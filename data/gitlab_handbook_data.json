[
    
    {
        "title": "GitLab Values",
        "url": "https://handbook.gitlab.com/handbook/values/",
        "content": "GitLab\u2019s six core values are\n\ud83e\udd1d Collaboration,\n\ud83d\udcc8 Results for Customers,\n\u23f1\ufe0f Efficiency,\n\ud83c\udf10 Diversity, Inclusion & Belonging,\n\ud83d\udc63 Iteration, and\n\ud83d\udc41\ufe0f Transparency,\nand together they spell the CREDIT we give each other by assuming\ngood intent. We react to them with values emoji\nand they are made actionable below. \n     \n We take inspiration from other companies, and we always go for the boring solutions. Our CEO, Sid Sijbrandij, has shared the origin of each of the CREDIT values, but\njust like the rest of our work, we continually adjust our values and strive to make them better.\nGitLab values are a living document.\nIn many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business. We used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior. Everyone is welcome to suggest improvements. Please assign MRs to update these values to our CEO Sid and @mention him in Slack if you work at GitLab Inc. or on Twitter if you don\u2019t. Driving Results with CREDIT from GitLab on Vimeo. To achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve.\nSimilarly, you can rely on others for help and advice\u2014in fact, you\u2019re expected to do so.\nAnyone can chime in on any subject, including people who don\u2019t work at GitLab.\nThe person who\u2019s responsible for the work decides how to do it,\nbut they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented. We value caring for others.\nDemonstrating we care for people provides an effective framework for challenging directly and delivering feedback.\nKindness doesn\u2019t mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers.\nKindness means you make a separation between the work and the person, you can criticize someone\u2019s work but still be respectful to the person.\nGive as much positive feedback as you can, and do it in a public way. There are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members.\nBe willing to invest in people and engage in open dialogue.\nFor example, consider making private issues public wherever possible so that we can all learn from the experience. Don\u2019t be afraid of judgement or scrutiny when sharing publicly, we all understand it\u2019s impossible to know everything. Everyone can remind anyone in the company about our values.\nIf there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions. Share problems you run into, ask for help, be forthcoming with information and speak up. Give negative feedback in the smallest setting possible.\nOne-on-one video calls are preferred. Negative feedback is distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement in a public channel, respectfully and transparently. In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. We deal with negative all the time at GitLab. If it\u2019s not a problem, then why are we discussing it? We deal with negativity a lot, and that\u2019s also part of our ambition. If you want to get better, you talk about what you can improve. We\u2019re allowed to publicly discuss negative things; we\u2019re not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting. Negative feedback can be given in a group setting if it\u2019s to someone higher in the management chain. This shows that no one is above feedback. GitLab co-founder and CEO Sid Sijbrandij and former CTO Eric Johnson discuss this in this GitLab Unfiltered video. We want to solve problems while they are small.\nIf you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your skip-level, a more senior person, or a people business partner. Recognize the people that helped you publicly, for example in our #thanks chat channel. When publicly thanking, it\u2019s important to recognize the following: Giving feedback is challenging, but it\u2019s important to deliver it effectively.\nWhen providing feedback, always make it about the work itself;\nfocus on the business impact and not the person.\nMake sure to provide at least one clear and recent example.\nIf a person is going through a hard time in their personal life, then take that into account.\nAn example of giving positive feedback is our thanks chat channel.\nFor managers, it\u2019s important to realize that team members react to a negative incident with their managers six times more strongly than they do to a positive one.\nKeeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself.\nIn the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member\u2019s performance going forward.\nGive recognition generously, in the open, and often to generate more engagement from your team. We use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts.\nSo we encourage people to get to know each other on a personal level through informal communication, for example, virtual coffee chats, and during GitLab Contribute. While it\u2019s wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible. If you have to remind someone of the position you have in the company, you\u2019re doing something wrong.\nPeople already know our decision-making process.\nExplain why you\u2019re making the decision, and respect everyone irrespective of their function.\nThis includes using the rank of another person - including the CEO - to sell an idea or decision. We naturally have a double standard when it comes to the actions of others.\nWe blame circumstances for our own mistakes, but individuals for theirs.\nThis double standard is called the Fundamental Attribution Error.\nIn order to mitigate this bias, you should always assume positive intent in your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes. When disagreeing, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g. \u201cstraw man\u201d). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent\u2019s position. We call this arguing against a \u201csteel\u201d position, instead of a \u201cstraw\u201d one. This concept is borrowed from argue the \u201csteel man\u201d technique. A \u201csteel\u201d position should be against the absolute most effective version of your opponent\u2019s position \u2014 potentially even more compelling than the one they presented. A good \u201csteel\u201d position is one where the other person feels you\u2019ve represented their position well, even if they still disagree with your assumptions or conclusion. There is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person.  We avoid classifications. If you made a mistake, apologize as soon as possible.\nSaying sorry is not a sign of weakness but one of strength.\nThe people that do the most work will likely make the most mistakes.\nAdditionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else.\nMistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel). Don\u2019t defend a point to win an argument or double-down on a mistake.\nYou are not your work; you don\u2019t have to defend your point.\nYou do have to search for the right answer with help from others. In a GitLab Unfiltered interview, GitLab Head of Remote Darren M. adds context on this operating principle. In many organizations, there\u2019s a subtle, low-level, persistent pressure to continually prove your worth.\nAnd I believe that this fuels imposter syndrome and wreaks havoc on mental health. What\u2019s so troubling to me is how often perception is reality.\nIn other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results. At GitLab, \u201cno ego\u201d means that we foster and support an environment where results matter, and you\u2019re given agency to approach your work in the way that makes sense to you.\nInstead of judging people for not approaching work in an agreed-upon way, \u201cno ego\u201d encourages people to glean inspiration from watching others approach work in new and different ways. Being no ego is a standard we hold ourselves as people to but is not one that applies to GitLab as a company or product.\nWe want to celebrate and highlight GitLab\u2019s accomplishments, including being one of the largest all-remote companies.\nThis doesn\u2019t mean we don\u2019t recognize our mistakes, including how we handled telemetry. A candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed. Keep an eye out for others who may be struggling or stuck.\nIf you see someone who needs help, reach out and assist. This might involve offering to pair program or setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance.\nWe are a team, so we succeed and shine together by supporting each other! Always make suggestions about examples of work, not the person.\nSay \u201cYou didn\u2019t respond to my feedback about the design\u201d instead of \u201cYou never listen\u201d.\nAnd, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed. Our collaboration value is about helping each other when we have questions, need critique, or need help.\nNo need to brainstorm, wait for consensus, or do with two what you can do yourself. The Bolt Handbook refers to this as the Founder Mentality, where all team members should approach the problem as if they own the company. Investigate mistakes in a way that focuses on the situational aspects of a failure\u2019s mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team.\nWe hold blameless root cause analyses and retrospectives for stakeholders to speak up without fear of punishment or retribution. People joining the company frequently say, \u201cI don\u2019t want to step on anyone\u2019s toes.\u201d\nAt GitLab, we should be more accepting of people taking initiative in trying to improve things.\nAs companies grow, their speed of decision-making goes down since there are more people involved.\nWe should counteract that by having short toes and feeling comfortable letting others contribute to our domain.\nFor example, pointed, respectful feedback to a proposal by GitLab\u2019s CEO led to his own merge request being closed. However, it is not required to respond to comments. We know we must rely on others for the expertise they have that we don\u2019t.\nIt\u2019s OK to admit you don\u2019t know something and to ask for help, even if doing so makes you feel vulnerable.\nIt is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole.\nAfter your question is answered, please document the answer so that it can be shared. Don\u2019t display surprise when people say they don\u2019t know something, as it is important that everyone feels comfortable saying \u201cI don\u2019t know\u201d and \u201cI don\u2019t understand.\u201d\n(As inspired by Recurse.) When collaborating, it is always important to stay above radar and work transparently, but collaboration is not consensus and disagreement is part of collaboration.\nYou don\u2019t need to ask people for their input, and they shouldn\u2019t ask you \u201cWhy didn\u2019t you ask me?\u201d\nYou don\u2019t have to wait for people to provide input, if you did ask them.\nYou don\u2019t need to have everyone agreeing to the same thing - they can disagree, commit, and disagree. Two-way doors decisions can be reversed as part of disagree, commit, and disagree, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster.\nWe believe in permissionless innovation\u2014you don\u2019t need to involve people, but everyone can contribute.\nThis is core to how we iterate, since we want smaller teams moving quickly rather than large teams achieving consensus slowly. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate collaboration when we take action to help others and include other\u2019s (both internal and external) input (both help and feedback) to achieve the best possible outcome. We exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else. The Results for Customers value is displayed through the following operating principles: While we iterate with small changes, we strive for large, ambitious results. We have an ambitious mission and vision, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results.  We agree in writing on measurable goals. Within the company we use OKRs to stay accountable. We have and report against KPIs with guiding targets. All GitLab team members should understand our customers\u2019 needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab\u2019s customers. We better understand customers and their needs through: We create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world. Our focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of the Concur effect. Arvind Narayanan, a Princeton Professor, described his frustration with Blackboard in a viral Tweet: It has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that\u2019s if you even remember the correct sequence the first time). Software companies can be breathtakingly clueless when there\u2019s a layer of indirection between them and their users. Everyone who\u2019s suffered through Blackboard will have the same reaction to this: try having less functionality! Ryan Falor followed up on Narayanan\u2019s tweet with his definition of the Concur Effect: See the Hacker News discussion for a specific UX example. At GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users. Customer results are more important than: We care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn\u2019t feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don\u2019t have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions. We use our own product in the way our users do to surface improvements that will lead to better customer results. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways: When something breaks, doesn\u2019t work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community. We give people agency to focus on what they think is most beneficial. If a meeting doesn\u2019t seem interesting and someone\u2019s active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes. Challenging the status quo can lead to remarkable results - we must never stop. A challenger mindset requires that we continually ask ourselves bold, difficult questions about our business the problems we solve while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be tenacious. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism internally as GitLab team members we must focus our efforts inwardly on achieving our very best results for customers to win market share. You don\u2019t always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on their trajectory, not their pedigree. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations. Our definition of cross-functional optimization is that you do what is best for the organization as a whole. Don\u2019t optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from the GTM teams, the right decision may be to push your own team\u2019s target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives. In the context of collaboration, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can. We refer to this as \u201cpersistence of purpose\u201d. As talked about in The Influence Blog, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed. We expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve. Time gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and ways we communicate, so the compounding of results can begin and we can focus on the next improvement. It\u2019s important that we keep our focus on action, and don\u2019t fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working When a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is a common principle.\nEvery decision can be changed;\nour best decision was one that changed an earlier one.\nIn a manager-report relationship, usually the report is the Directly Responsible Individuals (DRI).\nThe manager may disagree with the final decision, but they still commit to the decision of the DRI. In a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes, many or all individuals may disagree yet choose not to speak up, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback. Dissent is expression of that disagreement. However, it can be difficult and even socially expensive.\nExpression of feedback is a way for everyone to grow and learn, and is based on facts rather than opinions. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else. When you want to reopen the conversation on something, show that your argument is informed by previous conversations and assume the decision was made with the best intent.\nYou have to achieve results on every decision while it stands, even when you are trying to have it changed.\nYou should communicate with the DRI who can change the decision instead of someone who can\u2019t. If there is a disagreement and you can\u2019t move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate results when we do what we promised to each other, customers, users, and investors. At GitLab, efficiency means producing results without wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole. When we work internally with other team members, we leverage GitLab\u2019s unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab\u2019s ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications. Most companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a startup. We try to limit ourselves to healthy constraints. We document everything: in the handbook, in meeting notes, in issues.\nWe do that because \u201cthe faintest pencil is better than the sharpest memory.\u201d\nIt is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it. Use the simplest and most boring solution for a problem, and remember that \u201cboring\u201d should not be conflated with \u201cbad\u201d or \u201ctechnical debt.\u201d\nThe speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps.\nDon\u2019t pick an interesting technology just to make your work more fun;\nusing established, popular tech will ensure a more stable and more familiar experience for you and other contributors. Make a conscious effort to recognize the constraints of others within the team.\nFor example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future. Team members should first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Write down any new information discovered and pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results. Team members have more room to grow themselves when they are able to self-service and self-learn. Optimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself \u201cFor whom does this need to be most efficient?\u201d Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision. Consider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions. Every dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company. Consider the degree to which a purchase increases your ability to better accomplish your work and achieve business results relative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas. We have guidelines around this operating principle to help team members better understand our expensing process and expectations. Amazon states it best with: \u201cAccomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.\u201d Give short answers to verbal questions so the other party has the opportunity to ask more or move on. Keep one-to-many written communication short, as mentioned in this HBR study: \u201cA majority say that what they read is frequently ineffective because it\u2019s too long, poorly organized, unclear, filled with jargon, and imprecise.\u201d We want each team member to be a manager of one who doesn\u2019t need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end. When team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day. When possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process, or creating interdependencies, because they enable faster decision velocity and higher rates of iteration. When team members have freedom and responsibility over rigidity, they have more room to help others. Not every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks. We value constant improvement by iterating quickly, month after month. If a task is not the smallest viable and valuable thing, cut the scope. Adoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to hold management accountable for being deliberate. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work. Diversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build and institutionalize a culture that is inclusive and supports all team members equally in the process of achieving their professional goals. We hire globally and encourage hiring in a diverse set of countries. We work to make everyone feel welcome and to increase the participation of underrepresented minorities and nationalities in our community and company. For example, we celebrate our sponsorship of diversity, inclusion & belonging events. Take initiative to operate asynchronously whenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are structuring their day around pressing commitments at home or in their community. This is demonstrated by communicating recordings of meetings, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to documentation rather than pressuring others to be online outside of their working hours. Part of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority. We believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don\u2019t understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply \u201cappearing to care\u201d. Microaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression? \u201cThe everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.\u201d -  Derald W. Sue At GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact. We believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to GitLab\u2019s definition of Diversity, Inclusion & Belonging. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias. An example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term \u201cBrag Document\u201d was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the psychological safety to raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a diverse perspective, a survey was conducted in one of the Team Member and Advocacy Resource Group (TMRG) channels. The poll results showed that 100% of those polled preferred a different title and the title was changed. One of the unique elements to an all-remote culture is the ability to visit a person\u2019s home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment. Caregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there\u2019s a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you\u2019ll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it\u2019s easy for them to catch up. People feel more included when they\u2019re supported. To encourage this, and to support diversified learning across departments, consider GitLab\u2019s Internship for Learning program. We don\u2019t hire based on culture or select candidates because we\u2019d like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a values fit, not a culture fit.\nWe want cultural diversity instead of cultural conformity. Said differently: \u201cculture add\u201d > \u201cculture fit\u201d or \u201chire for culture contribution\u201d since our mission is that everyone can contribute. We generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn\u2019t mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company. GitLab also publicly supports pro diversity, inclusion & belonging activities and events. There is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our Code of Business Conduct and Ethics, avoid posting articles that reference specific political figures or parties. While it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our Code of Business Conduct and Ethics. We\u2019re a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to diversityinclusion@gitlab.com or #diversity_inclusion_and_belonging. Unexpected and unconventional things make life more interesting.\nCelebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves. Do not make jokes or unfriendly remarks about characteristics of the people who make up GitLab and how they identify.\nEveryone has the right to feel safe when working for GitLab and/or as a part of the GitLab community.\nWe do not tolerate abuse, harassment, exclusion, discrimination, or retaliation by/of any community members, including our team members.\nYou can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable. We recognize that unconscious bias is something that affects everyone and that the\neffect it has on us as humans and our company is large.\nWe are responsible for understanding our own implicit biases and helping others\nunderstand theirs. We are continuously working on getting better at this topic. We list our Parental Leave publicly so people don\u2019t have to ask during interviews. Use inclusive language.\nFor example, prefer \u201cHi everybody\u201d or \u201cHi people\u201d to \u201cHi guys\u201d, and \u201cthey\u201d instead of \u201che/she\u201d. While there are several good guides from folks like 18f, University of Calgary, and Buffer on using inclusive language, we don\u2019t keep an exhaustive list.\nWhen new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative.\nIf your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don\u2019t think it is a problem.\nAnd if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it, apologize gracefully and move on; there is no need to dwell on it, and you can work to avoid making that mistake in the future.\nPlease also visit our Gender and Sexual-orientation Identity Definitions and FAQ page if you have questions around pronouns and other topics related to gender / sexual orientation. We attach part of our identity to our names, and if it is mispronounced it can feel less inclusive.\nIf it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested\nin learning how to pronounce their name correctly. This applies to everyone you are in contact with:\nteam members, customers, candidates for jobs, and anyone else. People whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not\nspeak up about it.\nOther negative behaviors include giving a person a nickname without their permission, or\nactively avoiding using their name in sync calls. It might be challenging to pronounce names from a different language or culture than your\nown, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are: Some people might choose to use a nickname, for example: \u201cBob\u201d instead of \u201cRobert\u201d.\nAs long as this is their choice this is perfectly acceptable.\nWe should avoid assigning a nickname to a person without their permission. Slack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by editing your profile. This is documented on our page about interviewing. Be consciously inclusive in meetings by giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting. With internal meetings, consider using an agenda document for questions. For example, with GitLab Group Conversations, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation. Customers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion. Being globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions. For example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided. When planning an event, the organizer should cater for location density differences to maximize participation in all regions. As a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don\u2019t feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn\u2019t respectful or inclusive. Neurodiversity refers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring unique skills and abilities which can be harnessed for a competitive advantage in many fields (for example, cybersecurity), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive. At GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into transparency, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them. Remember, brains work differently and always assume positive intent, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result. We also recommend that all team members review the Reasonable Accommodation process. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools. The most important thing that managers can do is facilitate an environment in which all team members feel psychologically safe enough to make requests for what they need in order to do their job. Long-lasting relationships are the rocks of life, and come before work. As someone said in our #thanks channel after helping a family member for five days after a hurricane: \u201cTHANK YOU to GitLab for providing a culture where \u201cfamily first\u201d is truly meant\u201d.  Use the hashtag: #FamilyAndFriends1st Equity vs. Equality: What\u2019s the Difference? While the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people. Equality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. If you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources: Merriam-Webster defines iteration as the \u201cthe action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.\u201d At GitLab, we iterate to do the smallest valuable thing to get fast feedback and efficiently reach a desired end goal. Feedback can be from internal users (dogfooding), a limited number of external users (through our early access program), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers. When we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state: Iteration does not require us to ship features that are open to all users from day one. Feedback could come from internal users or a limited number of external users (early access program). It also is not a replacement for having a plan. We expect you to know where you are going, but you can iterate to get there. An iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link. While you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You\u2019re doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one. Many people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don\u2019t deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn\u2019t. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don\u2019t know how to make the transition, and it\u2019s hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards. The way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you\u2019re doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We\u2019re quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert. However, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only \u201cx\u201d amount of time on it, and that the next iteration will contain \u201cy\u201d and be ready on \u201cz\u201d. Iteration enables results and efficiency. In the GitLab Unfiltered video embedded above, GitLab CEO and co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization. Iteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don\u2019t start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results. Iteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include: If we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a \u201clocal maximum\u201d of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not \u201chalf-baked\u201d and align with work being done across the entire organization. Don\u2019t wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don\u2019t wait until you have a better version. Don\u2019t wait until you record a better video. Don\u2019t wait for an event (like Contribute). Inventory that isn\u2019t released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don\u2019t wait we signal intent to others that we have a purpose to resolve something.  Note: \u201cDon\u2019t wait\u201d should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers. We always try to set a due date. If needed, we cut scope.\nIf we have something planned for a specific date, we make that date. For example we shipped over 133 monthly releases. But every one of them doesn\u2019t contain all the features we planned.\nIf we planned an announcement for a certain date, we might announce less or indicate what is still uncertain.\nBut we set a due date because having something out there builds trust and gives us better feedback. As discussed in Sid\u2019s interview on iteration, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn\u2019t coherent), but we try to ensure that people don\u2019t need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers. Iteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer: Short iterations reduce our cycle time. Small iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback. We encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user\u2019s outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the product handbook, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we\u2019re adding useful functionality without obvious bugs or usability issues. If you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone\u2019s input. Having a proposal will be a much more effective use of everyone\u2019s time. Every meeting should be a review of a proposal. We should be brainwriting on our own instead of brainstorming out loud. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don\u2019t let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don\u2019t have a proposal, don\u2019t let that stop you from highlighting a problem, but please state that you couldn\u2019t think of a good solution and list any solutions you considered. By making a proposal you also provide better visibility into the work and the context surrounding it. In this GitLab Unfiltered video, GitLab CEO and co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components. At GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and assuming others have low context, confusion can be reduced as people have shared access to information. As we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end. Educating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan: In many organizations, you take a risk when you put forth any work that\u2019s not perfect, work where you haven\u2019t spent endless cycles planning for contingencies or counterpoints. Because of this, you\u2019re incentivized to invest a lot of time and effort into preparing for \u2018What if?\u2019 scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection. The downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you\u2019ve squandered time that you could have spent improving it through iteration. Having a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it\u2019s perfect, and instead celebrate the small changes. Cultural differences can bring unique challenges and expectations to iteration. For some, expressions like \u201cit doesn\u2019t have to be perfect\u2026\u201d can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating. Giving feedback and ensuring psychological safety are necessary for every iterative attempt. We believe great companies sound negative because they focus on what they can improve, not only on what is working well.\nIn every conversation, inside and outside the company, we should ask a question: What do you think we can improve?\nThis doesn\u2019t mean we don\u2019t recognize our successes; for example, see our Say Thanks value. We are positive about the future of the company. We are Short Term Critical And Long Term Optimistic (STeCALTO, for short). First, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in this article by Paul Graham. Resist the urge to bundle a series of smaller iterations so team members don\u2019t see a project as their last (or best) opportunity to contribute. It\u2019s tempting to create encompassing projects or initiatives that roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved. Most decisions are easy to reverse. In these cases, the Directly Responsible Individual should go ahead and make them without approval. Only when you can\u2019t reverse them should there be a more thorough discussion. By embracing iteration and making two-way door decisions, we are more efficient and achieve more results. Changing something without shipping it is a revision, not iteration. Only when the change is rolled out to users, these can be internal users or a limited customer group, can you learn from feedback. When you\u2019re changing a proposal based on different opinions, you\u2019re frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite. In order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it\u2019s where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the end of the first iteration rather than a hypothetical future state that requires multiple iterations. By embracing iteration we can increase creativity in incremental components. When you are submitting a merge request for a code change, or a process change in\nthe handbook, keep it as small as possible. If you are adding a new page to the\nhandbook, create the new page with a small amount of initial content, get it merged\nquickly via Handbook Usage guidelines, and then add additional sections iteratively with subsequent merge requests.\nSimilarly, when adding features to GitLab, consider ways to reduce the scope of the feature before creating the merge request to ensure your merge request is as small as possible. Rapid iteration can get in the way of results if it\u2019s not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we\u2019ve set development plans), organizational structure or product scope alignment (where real human stresses and team stability are involved), sales methodologies (where we\u2019ve trained our teams) and this values page (where\nwe use the values to guide all GitLab team members). In those instances, we add additional review to the approval\nprocess; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the GitLab Handbook Usage page and takes place via merge request approvals. Iteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we\u2019ve seen mistaken as iteration, but don\u2019t meet our definition of iteration. In this GitLab Unfiltered video, GitLab co-founder and CEO Sid Sijbrandij elaborates on each of these 12 things that are not iteration. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback. Be open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn\u2019t mean it can\u2019t be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you\u2019ve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say \u201cWhat\u2019s the kaizen moment here?\u201d and find a better way without hurt feelings. Even as a public company, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a public company, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so. When there are exceptions, material that is not public by default is documented. Everything at GitLab is public by default.\nThe public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from. One example of transparency at GitLab is the public repository of this website\nthat also contains this company handbook. Others include the GitLab CE and GitLab EE issue trackers, as well as marketing and infrastructure. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons,\nand processes with the whole community and the world in the spirit of open source, which we believe creates more value than it captures. In line with our value of transparency and being public by default, all GitLab team member profiles should be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the Private profile option is unchecked in your profile settings. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles. Because we are public by default and have the SAFE framework we don\u2019t need to make cases for why things should be transparent. If something is unSAFE and needs to remain not public it can be. We make information public by default because transparency is one of our values.\nHowever it is most important to focus on results.\nTherefore, a category of information is public unless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is not public by default on our communication page. If you believe something shouldn\u2019t be public that currently is (or vice versa), then make a merge request to the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the DRI. When content contains information which is not public it is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a \u201cnot public/internal only\u201d note. Always share publicly what we can. When information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify.\nCertain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information. Most companies become non-transparent over time because they don\u2019t accept any\nmistakes. Instead, we should always err on the side of transparency when there\nis a choice to be made between caution or inaction, and transparency. If we make\na mistake, we now know what the limits of transparency are for the company and\nwe should document this. The only exception to this rule would be in the case when there are legal concerns. Because some information is not public the public information can be lacking some context. We should be cognizant of that. Being direct is about being transparent with each other. We try to channel our inner Ben Horowitz by being both straightforward and kind.\nFeedback is always about your work and not your person. That doesn\u2019t mean it will be easy to give or receive it. If you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an earlier stance is not your current stance provides clarity to others and encourages data-driven decision making. Be transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don\u2019t worry; correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it, and how\u2014if needed\u2014you changed the process to prevent future mistakes. We practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we\u2019ll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about security incidents and participating in and contributing to Live Broadcasts. Transparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). Team members can view more details on these benefits by referencing the \u201cTransparency Benefit Quantification\u201d slides in Google Drive). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs. By having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don\u2019t need separate artifacts with different permissions for different people. Our transparency value means more than just making information accessible to all. In order to improve performance it\u2019s important that we not only ensure information is accessible, but also ensure it flows to the correct places and is findable by those who need it. Focusing on information flow will ensure you, for example, utilize multi-modal communication, or that you keep your stakeholders informed of changes by posting links to MRs in Slack. Transparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient. This also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made.\nThis is related to Chesterton\u2019s fence - it\u2019s much easier to suggest removing or changing something if you know why it exists in the first place. If you use generalized terms such as \u201cindustry standard\u201d or \u201cbest practices,\u201d be sure to give context, as without context they can be seen as potentially vague or opaque. Similarly, merely stating a single value isn\u2019t a great explanation for why we are making a particular decision. Many things could be considered \u201citeration\u201d or \u201cefficiency\u201d that don\u2019t match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value\u2019s name. Saying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the efficiency of boring solutions with the focus on customer results. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our values hierarchy and directly discussing the tradeoffs is easier with more context. Articulating why also helps people understand how something changed when you articulate that you changed your mind. Saying why does not mean justifying a decision against all other suggestions.\nThe DRI is responsible for their decision.\nThe DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change. When a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a \u201cwhy\u201d with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members.  In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency. Enable everybody involved to come to the same conclusion as you. This not only involves reasoning, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even if they may disagree. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier. Our values provide guidelines on how to behave and are written to be actionable.\nThey help us describe the type of behavior that we expect from GitLab team members.\nThey help us to know how to behave in the organization and what to expect from others. Values provide a framework for distributed decision making, detailed in GitLab\u2019s TeamOps management philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that our culture remains driven by our values. Lastly, values create a conscious culture that is designed to help you prosper and experience exceptional personal growth through work. Our values also help us to prevent the five dysfunctions: Some dysfunctions are not addressed directly by our values; for example, trust is not one of our values.\nSimilar to happiness, trust is something that is an outcome, not something you can strive for directly.\nWe hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given. Operating principles are behaviors that empower GitLab team members to definitively live out a given value.\nThey clarify what a given core value means and looks like at GitLab.\nUnderstanding this distinction is critical to thriving at GitLab,\nparticularly for newer team members who may be familiar with a prior organization\u2019s interpretation of iteration or collaboration (as examples). Values are not just things we do, but things that actively drive good behavior.  When we remove them it doesn\u2019t mean we stopped believing in it, just that it wasn\u2019t actively helping to drive behavior. If we don\u2019t prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture. Most companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, \u201cnot a value add\u201d or \u201cscored well on values during our interview.\u201d In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members. For certain business decisions or projects (such as compensation and end-point management ), GitLab team members may have a lot of opinions and interest,\nand they want to provide their feedback and comments.\nOn the other hand,  it might be challenging for the project DRI to digest and respond to all these inputs.\nWhat should you do in this scenario? Everyone can contribute at GitLab.\nWe encourage team members to share feedback and leave comments on issues.\nLeaving feedback and comments shows that team members care about a topic and about GitLab as a company.\nThese perspectives may also uncover potential risks and problems in the project. There shouldn\u2019t be a \u201cDon\u2019t they have their job to do?\u201d type of response.\nFurthermore, we shouldn\u2019t judge team members who are perceived as being the \u201csqueaky wheel.\u201d\nAt GitLab, we measure results, not hours.\nAs long as a team member is producing required results, they are empowered to decide how to spend their time. On the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone.\nIf a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle.\nIn these cases, it\u2019s best to have time-boxed feedback built into timelines. In a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment: We\u2019re deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We\u2019ll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we\u2019re using for the decision: Once the decision is made, it will be what is going into the stew. This method has shown itself to be effective at soliciting productive feedback that doesn\u2019t derail a timeline while ensuring team members feel heard. Companies are encouraged to copy and implement GitLab\u2019s values. They are Creative Commons and can be copied verbatim. We make our values public for the same reasons we make our OKRs (Objectives and Key Results) and strategy public. There is great power and efficiency in teams who share company values. Concealing values until after someone is hired into an organization is not a wise strategy. Not everyone will see our values and feel aligned with them, and that\u2019s OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who are aligned with GitLab\u2019s values apply for an open vacancy, this allows our hiring teams to more efficiently move candidates through the interview process. In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. Companies may ask you to write a blank check. They\u2019ll say, \u2018Come join our organization, and when you\u2019re here, you need to subscribe to our values, our way of working, and our strategy. It\u2019s very essential, and it\u2019s part of our identity!\u2019 But these companies don\u2019t give you the opportunity up front to evaluate it. It doesn\u2019t make any sense to me. If it\u2019s so important that people share your values, have them out there. Occasionally, values can contradict each other. It\u2019s useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values. Think of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:  In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. It\u2019s an attempt to relieve at least some of the tension. It\u2019s not absolute. If you think of values as binary, that\u2019s not going to work. There will always be interpretation, and there\u2019s always magnitude to consider. We made a hierarchy so that it\u2019s clear, in the end, the result matters most. For instance, we\u2019re not going to be transparent for the sake of being transparent. We\u2019re not radical in our transparency. We do it because we think it will lead to better outcomes. Those hierarchies are really important. They won\u2019t preempt every debate, but it helps. Our values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you\u2019re a team member or in the core team please post a link to the MR in the #values Slack channel. If you\u2019re not part of those groups, please send a direct Twitter message to @sytses. Whatever behavior you reward will become your values. We reinforce our values by: Criteria we use for promotions and communicate to the whole company on announcement. What we select for during hiring. What we emphasize during on-boarding. Criteria we use for our annual compensation review. What we refer to when making decisions. The example the E-group sets for the company since a fish rots from the head down. What we expect from all team members, as ambassadors for our values. Keeping them up to date with a stream of commits that add details. Behavior we give each other 360 feedback on. Behavior we compliment. Criteria we use for discretionary bonuses. What we include in our offer letters Criteria we use to manage underperformance. What we do when we let people go. Giving value awards during Contribute. Providing GitLab team members and qualified individuals transparency into all aspects of the company through the CEO Shadow Program to enable them to better engage and collaborate cross-functionally. Linking the takeaways of courses to our values, like we did for the Crucial Conversations training. The default settings of the software we use (for example: Speedy meetings, document sharing, agendas, etc.) Reinforcing our values with features in GitLab, for example the Iterations feature. Applying one of our values virtual backgrounds in video calls. Our GitLab Song Book, the song lyrics often mention GitLab values. Regularly conduct a values exercise at the e-group offsite. The most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure. In negative feedback, we should be specific about what the problem is. For example, saying someone is \u201cnot living the values\u201d isn\u2019t helpful. Your values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances are your values. It\u2019s not what you say they are. Values should be explicitly part of our hiring process, our job profiles, and our review process. When we give bonuses and promotions, they are always linked to values. That\u2019s the crucial thing. If you reinforce them there, that\u2019s the most powerful thing you can do. \u2014 Sid Sijbrandij, GitLab co-founder and CEO Value erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as \u201cme values\u201d rather than \u201ccompany values.\u201d For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration. If you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with assuming positive intent from other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab\u2019s #values Slack channel (for GitLab team members) or @-mentioning  @gitlab on Twitter (for those who do not work at GitLab). In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. Almost every time we face a hard decision at GitLab, it\u2019s because values are in conflict. It\u2019s not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision. From our values we excluded some behaviors that are obvious; we call them our permission to play behavior: We don\u2019t want people to play politics at GitLab. An example of politics is people discussing a proposal and being overly focused on whose proposal it is.\nThis is a manifestation of the Belief Bias, where we judge an argument\u2019s strength not by how strongly it supports the conclusion but by how strongly we support the conclusion.\nProposals should be weighed on their merits and not on who proposed them.\nAnother example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that\u2019s different from being promoted just because people like you. Below are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one. Values make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values \u2014 although the result is a very different company. During every GitLab 101 session with new hires we discuss our values. We document the questions and answers to Frequently Asked Questions about the GitLab Culture. New team members should read GitLab\u2019s guide to starting a new remote role, and reference interviews centered on values within the GitLab Unfiltered YouTube channel. Our mission is that everyone can contribute. This mission guides our path, and we live our values along that path. We have a page which documents our Mitigating Concerns. Many of our values help to mitigate some of these concerns. Anyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this learning course in Level Up. If you have questions, please reach out to our L&D team at learning@gitlab.com."
    },
    {
        "title": "GitLab Mission",
        "url": "https://handbook.gitlab.com/handbook/company/mission/",
        "content": "It is GitLab\u2019s mission to enable everyone to contribute to and co-create the software that powers our world. There are three ways you can contribute and co-create: To ensure that everyone can contribute with GitLab we allow anyone to create a proposal, at any time, without setup, and with confidence. Let\u2019s analyze that sentence a bit. We actively welcome contributors to enable everyone to contribute to and co-create with GitLab, the application. When everyone can contribute and co-create, users become contributors and we greatly\nincrease the rate of innovation to benefit customers and users. There is also an open dialogue between GitLab and our customers, partners, and the community so that we can also better identify what they need. That way we can not only build a solution for them, but bring that solution to the world. We think that it is logical that our collaboration tools are a collaborative\nwork themselves. More than 3,000 people from the wider community have contributed to GitLab to make that a reality. We do this by having quality code, tests, documentation, popular frameworks,\nand offering a comprehensive GitLab Development Kit\nand a dedicated GitLab Design System.\nWe use GitLab at GitLab Inc., we dogfood\nit and make it a tool we continue to love. We celebrate contributions by\nrecognizing a Most Valuable Person (MVP) every month.\nWe allow everyone to anticipate, propose, discuss, and contribute features by having everything on\na public issue tracker. We ship a new version every month so contributions\nand feedback are visible fast. To contribute to open source software, people\nmust be empowered to learn programming.\nThat is why we sponsor initiatives such as Rails Girls.\nThere are a few significant, but often overlooked, nuances of the enabling everyone to contribute to GitLab, the application mantra: A group discussion reiterating the importance of everyone being able to contribute: To enable everyone to contribute to GitLab, the company we have open business processes.\nThis allows all team members to suggest improvements to our handbook. We hire remotely so our team members can be judged on results, not presence in an office. We engage on social media platforms and in our blog post comments. And we strive to take decisions guided by our values. We welcome all contributors in the www-gitlab-com project so that everyone can contribute to about.gitlab.com. GitLab uses about.gitlab.com to share our expertise with the world and believe we can build even greater levels of trust with contributions from our team and community. We strive to provide a great experience for our existing and new community members by reviewing changes and integrating the contributions into our regularly planned updates. Our Mission is on a 30 year cadence. Our purpose is to help people increase their lifetime earnings through training, access to opportunities, and the DevSecOps platform. Our mission is the way we realize our purpose. By enabling everyone to contribute to and co-create the software that powers our world, we increase access for people to be creators. With more contributors and more creators, we increase both the volume and velocity of innovation. More innovation drives economic progress that benefits consumers, businesses, and the economy as a whole. As a result, innovation both directly and indirectly increases the total volume of available opportunities and average value of each individual opportunity. Access to a broader set of more valuable opportunities ultimately increases people\u2019s lifetime earnings. Our purpose is on the same 30 year cadence as our mission. Our purpose informs our mission, which directly or indirectly informs the rest of the items in our cadence. As a result, progress for the items on our cadence page like Yearlies creates progress for both our mission and our purpose. Our mission is the inspiration for our vision. Our vision is on a 10 year cadence. Our mission guides our path, and our values are the principles we live along this path. We firmly adhere to laws including trade compliance laws \u2013 see the GitLab Code of Business Conduct and Ethics, in countries where we do business, and welcome everyone abiding by those legal restrictions to be customers of GitLab. In some circumstances, we may opt to not work with particular organizations, on a case-by-case basis. Some reasons we may choose not to work with certain entities include, but are not limited to: This policy is in alignment with our mission, contributor and employee code-of-conduct and company values. Here are some links that may give you some background at how we arrived at this customer acceptance policy: We acknowledge the concerns to achieving our goals. We document them in our Mitigating Concerns page. \u00a0 Take GitLab for a spin See what your team could do with The DevSecOps Platform. Get free trial Have a question? We're here to help."
    },
    {
        "title": "GitLab Vision",
        "url": "https://handbook.gitlab.com/handbook/company/vision/",
        "content": "Our vision captures what we want to deliver to customers in the next 10 years. Today, we have the most comprehensive AI-powered DevSecOps Platform. This DevSecOps Platform shift is part of a larger trend: teams of all types are realizing that breaking down silos has compounding effects on productivity and collaboration. We see it with data and operations teams creating DataOps; we see it with machine learning and ops teams creating MLOps. As more companies (and more teams within a company) rely on our platform, we are positioned to become the AllOps platform \u2014 a single application for all R&D. This platform will offer significant and differentiated value to customers: For the next few years, the majority of our focus is on providing a rich and comprehensive DevSecOps platform to our customers. This is detailed in our company strategy. Gartner calls the combination of DevOps/MLOps/DataOps/AIOps xOps. Our Mission is on a 30-year cadence. It is the inspiration for this company vision, which is on a 10-year cadence. The vision here is reflected in our company strategy, which is on a 3-year cadence. You can find additional product vision details on our direction page. While we define our mission, vision, and strategy, we also acknowledge that we need to adapt with a changing market to meet customer needs. Netflix is a great example of this. Everyone knew that video on demand was the future. Netflix, however, started shipping DVDs over mail. They knew that it would get them a database of content that people would want to watch on demand. In other words, timing is everything. Additionally, we must ensure that our Platform is open. If a new, better version control technology enters the market, we will need to integrate it into our platform, as it is one component in an integrated DevSecOps product. GitLab has taken existing, fragmented software tooling markets, and by offering a consolidated offering instead, have created a new blue ocean. We would like to find more markets where we can repeat this same model. The desirable characteristics of such markets fall into two stages: category consolidation and creation. Our goal is to develop this model to be more quantifiable and formulaic, so that we can quickly and easily assess new opportunities. We acknowledge the concerns to achieving our goals. We document them in our Mitigating Concerns page. \u00a0 Take GitLab for a spin See what your team could do with The DevSecOps Platform. Get free trial Have a question? We're here to help."
    },
    {
        "title": "GitLab Strategy",
        "url": "https://handbook.gitlab.com/handbook/company/strategy/",
        "content": "Current strategy is in the internal handbook. The rest of this page desribes the strategy process. Our strategy is looking 3 years out and fits into our cadences. It also maps to and reflects GitLab\u2019s mission, vision and values. It is a living strategy, so we will revisit on a regular basis and iterate when there is reason to do so. Along the road to realizing our mission of everyone can contribute, our\nstrategic goal is to be the leading complete DevSecOps Platform. We help our customers build better software faster including developing cloud native applications, building mobile applications, and incorporating machine learning and artificial intelligence into their products and solutions. We believe that our dual flywheels (single application + open-core model) will propel us to efficiently be the default choice in the Enterprise market. As we execute on our strategy, it is important to use our financial targets as guide rails and mature our internal processes for building a durable business for the long-term. Our GitLab product vision is to deliver a single application for the entire DevOps lifecycle.  This is a very expansive product vision that requires us to build an enormous amount of product surface area.  Because we want to be efficient with capital, we want to build GitLab as a community. When we are early in a particular area of the product, we will plant seeds by shipping a small MVC. Shipping functionality that is incomplete to expand the scope sometimes goes against our instincts. However, planting those seeds even in an incomplete state allows others to see our path and contribute. With others contributing, we\u2019ll iterate faster and will accelerate the maturity of our offering faster than GitLab could on its own.  We can have a long tail of categories that are at a minimal maturity that don\u2019t get investment until they show traction. While these come with a low level of shame they allow the wider community to contribute and people to express interest. It is much more common for people to contribute to categories that already exist and express interest in categories already shipping in the product. A minimal category is the placeholder to channel energy, and it is our responsibility to till the earth with minimal iterations. GitLab the product should eventually have depth in every category it offers.  To build out real depth requires a shift in focus, from planting seeds to nurturing the product area to maturity. We should concentrate our nurture investments in the categories that have demonstrated monthly active usage, revenue contribution, and demonstrated customer demand.  As a product team, we\u2019ll be particularly focused on driving monthly active usage at the stage and group level.  This should lead to more Stages per Organization, which is important as each stage added triples paid conversion!  We\u2019ll also be heavily focused on driving usability, by measuring our system usability score, which is a measure of the user perception of GitLab\u2019s usability. If we effectively seed and then nurture, we can fully activate GitLab\u2019s two growth turbos, by creating wider community contributions and driving more stages per user. Please see our pricing model for details GitLab has two flywheel strategies that reinforce each other: our open core flywheel and our development spend flywheel.\nA flywheel strategy is defined as one that has positive feedback loops that build momentum, increasing the payoff of incremental effort.\nYou can visualize how the flywheels work in congruence via the diagram below. The KPI and responsibilities table lists the relevant indicator and department for every part of the flywheel. In the open core flywheel, more features drive more users which in turn drive more revenue and more contributions which lead to more users. The driving force behind the flywheel is that by using a DevOps platform to replace multiple point solutions, GitLab customers can achieve cost saving and efficiency gain. Therefore, when GitLab develops more features to improve the product maturity, it becomes easier to replace point solutions and GitLab will attract more users. GitLab is a complete DevOps platform, delivered as a single application, with contributions from the wider community. Compared to other DevOps platforms, GitLab leverages one or two unique turbos that boost the company: The advantage of a single application manifests itself if people start using more stages of the application.\nIn the graph below this is visualized with Stages per Organization (SpO), knowing that an organization using an extra stage triples conversion.\nIncreasing SpO drives both more seats and higher revenue per seat. In the development spend flywheel, we capture the relationship between merge requests (MRs), changes in ARR from one period to the next (Delta ARR), hyper growth R&D spend and the resulting impact on MRs. We see that more MRs increase stage maturity which drives more monthly active users and stages per user which in turn drives more seats and more revenue which funds R&D spend and leads to more MRs. Legend with links to the relevant metrics: To make sure our goals are clearly defined and aligned throughout the organization, we make use of Objectives and Key Results (OKRs) and Key Performance Indicators (KPIs) which are both publicly viewable. Our North Star KPI is revenue vs. plan. While our revenue data is limited access given that it is material nonpublic information (MNPI), revenue versus plan is a leading indicator of our likelihood of success in achieving revenue targets. Predictable revenue attainment is critical for continued business success. Our yearly plans are linked from the relevant cadence section. Activity Positioning and SWOT published in internal handbook with description of strategy process two weeks post offsite E-group capability gap exercise at e-group offsite (prework) Complete capability gap exercise at VP level to bring more input into the group Pull together comprehensive view of capabilities from e-group and VP sessions\nCraig/Dave E-group June Virtual Offsite Sessions: Kickoff LRO with inputs from this process"
    },
    {
        "title": "GitLab Communication",
        "url": "https://handbook.gitlab.com/handbook/communication/",
        "content": "We\u2019re an all-remote company that allows people to work from almost anywhere in the world. We hire great people regardless of where they live, but with GitLab team members across more than 60 countries, it\u2019s important for us to practice clear communication in ways that help us stay connected and work more efficiently. To accomplish this, we use asynchronous communication as a starting point and stay as open and transparent as we can by communicating through public issues, merge requests, and Slack channels. We also place an emphasis on ensuring that conclusions of offline conversations are written down.\nWhen we go back and forth three times, we jump on a synchronous video call. We communicate respectfully and professionally at all times. Embracing asynchronous communication and learning to use it effectively requires a mental shift. This can feel unusual or even uncomfortable for those who come from a colocated environment, where in-person meetings and communiques are the norm. Learn more about mastering the use of the written word in an all-remote setting. If you see something that concerns you in Slack, Issues, Merge Requests, Video, Emails or any other forum, we encourage you to respectfully say something directly to the individual in a 1:1 format. If there is an issue to raise regarding someone\u2019s communication or conduct, team members should follow the process for raising communication concerns by sharing their concern with their manager or, if preferred, email Team Member Relations (teammemberrelations@gitlab.com) directly. In an all-remote setting, where team members are empowered to live and work where they\u2019re most fulfilled, mastering asynchronous workflows is vital to avoiding dysfunction and enjoying outsized efficiencies and lifestyle flexibility. Asynchronous communication is the art of communicating and moving projects forward without the need for additional stakeholders to be available at the same time your communique is sent. To learn more on when to use asynchronous and synchronous communication, examples of async workflows in practice at GitLab, core async behaviors, and to take an async knowledge assessment, visit GitLab\u2019s guide to embracing asynchronous communication. When working on a problem or issue, communicate directly with the people you need support from rather than working through reporting lines. Direct communication with the people you need to collaborate with is more efficient than working through your manager, their manager, or another intermediary.\nEscalate to management if you are not getting the support you need. Remember that everyone is a manager of one and they might have to complete their own assignments and inform the reporting lines. (This guidance supplements and overlaps with GitLab\u2019s SAFE Framework, the guidance on the use of the internal handbook, and the additional guidance on this page. We ask our team members to consider the factors below in their communication. ) As GitLab matures, we want to continue to foster discussion while evolving our communication guidelines so that topics that are potentially GitLab sensitive are discussed in appropriate forums. This is particularly relevant as team members heavily leverage async modes of communication including merge requests, issues and epics, and in Slack communication. Words have impact long after they are written, and even when you\u2019re communicating internally, the manner in which you speak with one another should be viewed through an external lens. For additional information, please review our Guidelines for communicating effectively and responsibly through text. At GitLab, we are public by default, but some information is classified as internal or limited access. Please see the confidentiality levels handbook page for details on this. The above examples overlap with the GitLab\u2019s SAFE Framework examples. We recommend you to further review that page for more information and context. We encourage communicating risks to GitLab, its team members, or customers in a synchronous 1:1 setting. Where possible, a group of Communications Champions, made up of global team members and people managers, will be given a preview of companywide changes to provide feedback, so that team member perspectives have been taken into account. We\u2019ll introduce two cohorts for FY25: Each team member will participate for two quarters/6 months. Should a team member no longer be able to participate during their cohort; they can be backfilled. We\u2019ll engage bi-weekly with planned or urgent information seeking. We\u2019ll create a net-new slack channel for each group:\nNaming convention: #comms-champions-fy25-a People managers will nominate team members through a google form. After nominations, PBPs will review the list to ensure all are in good standing and collaborate on potential participants. People Comms & Engagement will make final selections. The table below outlines an overview of different communication forums at GitLab, and the considerations team members should think through related to potentially GitLab Sensitive topics when determining which forum to leverage. When in doubt, you can reach out to your People Business Partner and/or your leadership team  directly. Please see our Project names section. Internal communication is any work related communication at a company.\nInternal Communication includes conversations between team members, wider team discussions, or internal announcements.\nAt GitLab, everyone can contribute to the effectiveness of Internal Communications to support aspects of GitLab culture, such as intentional transparency and engaging people in open dialogue. Since we believe that all team members must be Managers of One, most communication is handled by the relevant group, but we know that some communications are more sensitive and contentious than others.\nIn those cases, the DRIs may want to engage the Internal Communications function. We want to avoid unstructured content which includes FAQs (Frequently Asked Questions), especially for internal communication. FAQs tend to take on the voice and concerns of assumed personas. Instead of assuming questions, aim to articulate key facts as statements and use these to structure content under topical headers which aren\u2019t questions. Structured content around GitLab, the product, should be in GitLab Docs and structured content around GitLab, the company, should be in the handbook; we should not use separate documents or locations to share this information. As an example, let\u2019s say your FAQ would have a question like: Q: I\u2019m not seeing widget X, what should I do?\nA: If you\u2019re not seeing widget X, you can verify if it\u2019s enabled or not by going to User Profile -> Settings and ensure the checkbox is enabled under Enable widget X You can reframe it to: How to enable widget X You can enable widget X by going to User Profile -> Settings and ticking the checkbox next to Enable widget X then clicking on the Save button Content guidelines across the industry support avoiding FAQs: Employ multimodal communication to broadcast important decisions. To reach our distributed organization, announce important decisions in the company announcements Slack channel, email the appropriate team email lists, Slack the appropriate channels, and target 1:1s or other important meetings on the same day, with the same information. When doing this, create and link to a single source of truth: ideally the handbook, otherwise an epic, issue, or Google Doc. The email or Slack message should not be the source of truth. When referring to email that recipients should have received, reference the sender and subject of the email so it\u2019s easy to find. For example, \u201cYou should have received an email from Jane Smith with the subject \u2018Training Seminar Details\u2019\u201d. If something is behaving strangely on https://gitlab.com, it might be a bug. It could also mean that something was changed intentionally. Please search if the issue has already been reported. If it has not been reported, and you are sure it is a bug, please file an issue. If you are unsure whether the behavior you experience is a bug, you may ask in the Slack channel #is-this-known.\nIf you know which stage of the DevOps lifecycle is affected, it is also okay to ask in #s_{stage}, for example #s_manage. When you ask: When taking notes in an agenda, in the handbook, or on our OKRs, keep items numbered so we can refer to Item 3 or 4a.\nThe number is not a signal of the importance or rank of the subject unless explicitly stated to be such.\nIt is just for ease of reference. Linking should not be in one direction. We should go beyond deep-linking to create a richer web of links that can surface content and ensure people consider all pages when making updates. When linking one page to another, try to link back as well. Instead of only linking from Page A to Page B, both link Page A to Page B and link Page B back to Page A. For example, the Live Doc Meeting section of the All Remote Guide links to the Live Docs Meetings page. The Live Docs Meetings page links back to the Live Doc Meeting section of the All Remote Guide. In informal acknowledgement scenarios, such as on Slack or on issue comments, it is common practice to use the following: In order to effectively communicate an important change to hundreds of distributed employees, we occasionally use an ACK process. To prevent overuse, this should only be used by a member of the exec team. Anyone may ask an exec to sponsor one. As a guideline, we\u2019d expect no more than one per quarter to be sent out. Too many ACKs lose power. To initiate an ACK process: As we continue to build on inclusion, recognition is a key and transformative tactic. Thanking team members provides an opportunity for them to be recognized for their contributions, influences engagement behavior, and acknowledges to team members their work is seen. By saying thanks, you are contributing to and supporting the value of DIB. Add Values emoji reactions to thank you messages in the #thanks slack channel\nor feel free to use them in GitLab.com, other slack channels and\nsocial media, when you see alignment to our values: GitLab\u2019s values.   As a second iteration, we have added these custom emoji to GitLab to enable tanuki values reactions in issues, epics, and MRs within the gitlab-com and gitlab-org groups. As a later iteration, we will begin tracking the number of emoji reactions for each value through the Reacji API and update this page with our findings! Indicate your availability by updating your own calendar using Google\u2019s \u201cout of office\u201d feature and include the dates you plan to be away in your automated response. Note that this feature will automatically decline any meeting invitations during the time frame you select. Informal communication is made up of interactions between co-workers that are unofficial in nature and focus on building social relationships outside of the normal hierarchy of a typical business structure. In other words, it\u2019s what happens when we get to know each other and talk about anything other than work. Informal communication is a vital part of GitLab culture, and we\u2019ve listed 20+ ways to engage. If there is something that you want to discuss, but you do not feel that it is\na reasonable option to discuss with either your manager or CEO, then you can reach\nout to any of the other C-level GitLab team members. When possible, it\u2019s best practice to start a discussion with a Merge Request (MR) instead of an issue. An MR is associated with a specific change that is proposed and transparent for everyone to review and openly discuss. The nature of MRs facilitate discussions around a proposed solution to a problem that is actionable. An MR is actionable, while an issue will take longer to take action on. Some merge requests that involve a big decision or change tend to collect a large amount of feedback. As GitLab grows in size, it is unrealistic for a single person to respond to potentially hundreds of comments. To remain efficient in these MRs and to make it scalable, it is important for the DRI to receive a clear signal of input that is shared on the merge request. Some MRs may be marked as \u201cManager Mention MRs\u201d by clearly designating them as such at the beginning of the MR description with the following code block: Additionally, add the ~\"Manager Mention MR\" label to the merge request. This will make future analytics on Manager Mention merge requests more easily identifiable. It also enables managers to subscribe to the label to be notified when an MR has elected the Manager Mention MR designation. We tried Manager Mention MR\u2019s for the first time in a recent announcement (2021-03-03) but this did not work well and we are working on making it better. We\u2019re starting with a more thoughtful and transparent process in our communications cadence and approach going forward, including all directs and people managers getting a few days\u2019 notice before important company-wide changes are announced to all team members. This will allow all directs and people managers to feel more enabled and better understand the why behind big changes in order to scale communication to team members. For all managers: It is important to ground yourself in the contents of the changes before the announcement goes live to all team members. If a team member tags you in a Manager Mention MR, it is your role to respond candidly and thoughtfully to their question or comment. If the line of questioning in the Manager Mention MR gets out of your depth, ask the DRI to help answer. If a team member comments without a manager tagged, the comment will be closed with a link to this handbook section or closed without comment. In a situation where a team member leaves a wildly inappropriate comment in the Manager Mention MR, you should feel empowered to delete comment and talk to your team member 1:1. Consider subscribing to the label ~\"Manager Mention MR\" to be notified when MRs transition to this designation. For team members: Check if the MR you are about to comment on has the ~\"Manager Mention MR\" label. Check each time as the label may have been added since you last commented. When leaving a comment in a Manager Mention MR, frame the comment as a question or suggestion to your manager directly, and not anyone else, including the DRI. We do this to scale communication, as it is unsustainable for the DRI to answer every question. MRs should not start out as a Manager Mention MR as we prefer communication to be direct. They should only be designated as such after the number of comments on them grows to a level that is unsustainable for the DRI. An exception to this is compensation changes and other company-wide announcements that can be sensitive/contentious in nature since they have historically generated many comments. When an MR is changed to be Manager Mention, the person making this change should add a comment stating this so that everyone tracking the MR can be informed. Issues are valuable when there isn\u2019t a specific code change that is being proposed, such as: When utilizing issues, it is still important to maintain focus by defining a single specific topic of discussion and the desired outcome that would result in the resolution of the issue. Issues should not be open-ended or go stale due to lack of resolution. For example, a team member may open an issue to track the progress of a blog post with associated to-do items that need to be completed by a certain date (e.g. first draft, peer review, publish). Once the specific items are completed, the issue can successfully be closed. Below are a few things to remember when creating issues: Pro Tip: When creating a Merge Request you can add closes: #[insert issue number here] and when the Merge Request is merged, the issue will automatically close. You can see an example of this here. Note: Automatic issue closing is disabled on some projects. Our companywide announcements channel is #company-fyi.\nIt is an announcement only channel, meaning that communications need to be approved before they can be posted. To minimize noise, announcements made in #company-fyi should not be duplicated in #whats-happening-at-gitlab. Be mindful of the attention economy. In order to post or have a message posted in #company-fyi, please reach out to the internal communications team or your function\u2019s executive who can approve the message and post it. Examples of what should not go in #company-fyi (as per new group guidelines): The above should all go in the new #whats-happening-at-GitLab channel (formerly the #company-announcement channel). Due to the volume of posts in the Slack channel, we recommend that you do not use #whats-happening-at-gitlab as a sole location for important announcements as information might get lost or muted. Examples of important items include but are not limited to: Meetings are incredibly expensive since they require synchronous time.\nThe most common meeting problems can all be addressed by following the above guidelines around scheduling meetings.\nSome of the most common meetings problems are outlined below: If folks are involved in a meeting and have capacity to do so, they should take notes using GitLab\u2019s Live Doc Meetings principles. This is important, because: It may look like a few people are already taking notes, do not see this as a deterrent for helping. Initial note takers may be first to show up and then see it as their responsibility to continue if no one else is stepping in. While meetings recordings are helpful, written notes are more efficient to read and offer greater opportunities for async engagement. Takes notes even when a meeting is being recorded. GitLab Executive Business Administrators sometimes support teams by taking notes. Since note taking takes time away from their other activities and can often be done by other folks, consider the following before engaging an EBA in a meeting solely for note taking purposes. Note taking helps us to work asynchronously. Team members can add thoughts to an agenda in advance of a meeting and understand what was discussed if they cannot attend. It also offers a record of discussion. Consider the following best practice when taking notes in meetings: If you have any questions about what may or may not be a sensitive topic, please refer to our SAFE Framework or reach out via the #safe Slack channel Presenting during meetings requires valuable synchronous time. Instead, recorded presentations make content accessible, prevent confusion, and increase participation for team members that prefer consuming content asynchronously. Remember it is not required to have a presentation or have a pre-recorded presentation. In the video below, GitLab CEO Sid Sijbrandij explains why there are no presentations in most meetings. Pre-recorded presentations enable: There are times when presenting during a meeting is needed. This may occur when adding more context to a specific topic on slides. If this is the case, consider the following: Best Practices for Pre-Recorded Presentations While most meetings should not have presentations, there are a few exceptions. Specifically, we may use synchronous touch points in meetings with large numbers of folks. These tend to be meetings used for building team cohesion and alignment. For example, GitLab Assembly or the Functional Leaders Meeting. GitLab has the following meeting framework for determining which meetings should have presentations: Introductions can be helpful during some external meetings, such as executive sales calls. In those meetings, use these guidelines: If you\u2019re scheduling a meeting across multiple regions, consider using the time ranges below to respect common working hours. The suggested times are organized by the regions that you\u2019re trying to accommodate.\nEach suggested window is shown in the local time zone.\nFor example, if your meeting includes team members in EMEA and AMER, you could consider scheduling from 8:00 AM to 10:00 AM Pacific Time. Note: Time zone offsets change throughout the year due to Daylight Savings Time, Summer Time, and similar time changes, so these suggested times may be less convenient at different times of year. When scheduling meetings with two or more sessions (usually when trying ensure worldwide coverage for all team members),\nname them after the topic, appended with a session number based on the order they show up in the calendar.\nTeam members will see the meeting invites in their email or calendar in relation to their local time zone and can decide for themselves which session to attend, based on their working hours. Avoid: For example: You are the manager of your attention, and you decide when you do or don\u2019t pay attention in a meeting. You will always have more work than time in your life.\nIf you get invited to a meeting you don\u2019t think you should go to, you should decline the meeting.\nIt is better to cancel than to show up and not pay attention. On the other hand, not every part of a meeting is relevant, but it can sometimes be helpful to have more people in a call.\nIf you only have one discussion point, if possible, try to reorder the meeting agenda to have your point first and then drop from the call.\nIf you get asked a question when you\u2019re not paying attention, it is an okay use of time to repeat a question every now and then.\nIf training is required for one\u2019s role, team members should plan to give the training full attention\u2013especially if engagement in discussions or breakout rooms is required. If training is \u2019nice to learn\u2019 or \u2018optional\u2019 for team members, multi-tasking can be done at the team members discretion. We don\u2019t use the first 15 minutes of a meeting to read the materials like they do at Amazon. You can use the start of a meeting to review the materials for the meeting if you need to, given you do not have to be paying attention, but that should not delay the start of the meeting for the people that already have questions based on the materials. Meetings start on time at GitLab. Do not use your camera to signal you\u2019re not paying attention; cameras should always be on. There are too few hours in a week, so we expect each team member to manage their attention. If you\u2019re hosting a meeting, don\u2019t tell people to give you their attention or stop multi-tasking. Respect each team member\u2019s agency over their time. Instead of demanding attention, earn participants\u2019 attention by organizing and facilitating meetings so they are compelling to attendees. You should take pride in being the first person to add a question to a\nmeeting agenda, however unlike the First post\nmeme we do want the first post to be\nmore than just \u201cFirst!\u201d. The meeting DRI will be happy to see there is a\nquestion ready before to kick off the meeting. The Meeting DRI should remember\nto thank the person for asking the first question. Never do a countdown or say something like. \u201cI\u2019ll give it x seconds\u201d, people are very unlikely to ask a question if you do that. Either ask for a question, wait for a question, or end the call. In calls that have remote participants everyone should use their own equipment (camera, headset, screen). When multiple people share equipment the following problems arise for remote participants: The people sharing equipment also have problems because they don\u2019t have their own equipment: The disadvantages for remote people are much greater than for the sharing people and hard to notice for the sharing people.\nThe disadvantages cause previously remote participants to travel to the meeting to be in person for a better experience.\nThe extra travel is inefficient since it is time consuming, expensive, bad for the environment, and unhealthy. Theoretically you can have multiple people in a room with their own equipment but in practice it is much better to be in separate rooms: Ask Me Anything meetings can be a useful opportunity for team members to meet a new leader, learn more about an existing team member, or gain clarity on a recent change. Fireside chats are informal conversations between a host and a guest. The guest is typically a new leader, board member, or guest speaker. They are a useful opportunity to learn specific information about these individuals and their professional careers and personal interests. Fireside chats allow the audience to learn more about the guests in a casual and approachable setting. Format: In advance of the call, the host will prepare questions and share them with the guest. During the call, the host will moderate the conversation with the guest, by verbalizing the prepared questions. There is specific amount of time reserved at the end of the agenda for questions from attendees. A Walk and Talk call is when team members step away from their computers and get outside for a meeting. The difference between a coffee chat and a Walk and Talk call is that a Walk and Talk call be held with people that you interact with frequently at GitLab. It could be social in nature or focused on a specific problem/topic that needs to be discussed. If it\u2019s a problem-solving focused discussion, the outcome should be captured in a merge request. It should not be used if the problem being discussed requires screen sharing or detailed note taking. There are great physical and mental health benefits to a walk and talk call. There are also benefits with increased focus and creativity. A Walk and Talk can also help prevent Zoom fatigue. The team members can use Zoom on their mobile device with the audio only function, or call one another from their preferred mobile device. A walk and talk call should be agreed to in advance to ensure that the local weather is compatible for a walk in both locations and that the walk and talk call fits into both team members\u2019 schedules. We\u2019ve created a Slack channel #walk-and-talk-meetings where, if you\u2019d like, you can share pictures from your walking meetings. After GitLab releases a new version every month, we have a\n30-minute call a few days later reflecting on what could have been\nbetter: We spend the first part of the retrospective meeting reviewing the action\nitems from the previous month. On the 8th of each month (or the next business day), we have a kickoff meeting\nfor the version that will be released in the following month. The product team and other leads will have already had\ndiscussions on what should be prioritized for that release. The purpose of this kickoff is\nto get everyone on the same page and to invite comments. Both the retrospectives and kickoffs are live streamed to our GitLab Unfiltered YouTube channel\nand posted to our Unfiltered YouTube channel. As GitLab continues to grow, sharing knowledge across the community becomes even more important.\nThe Deep Dives page describes initiatives we are trying to encourage.\nThis aligns with how we work since everything at GitLab is public by default. GitLab has a specific process to follow in crisis situations to ensure effective communications. Details can be found in the internal handbook. On 2022-01-20, the L&D team hosted Lorraine Lee for a live speaker series on video and presentation techniques in an all-remote workspace. Key points addressed in the training include: Watch the replay below: As you\u2019re creating external or business content for GitLab, please refer to the GitLab Content Style Guide. For technical content, you can reference this word list. This list offers additional guidance for written communication at GitLab: Many times an explanation can be aided by a visual.\nWhenever presenting a diagram, we should still allow everyone to contribute.\nWhere possible, take advantage of the handbook\u2019s support for Mermaid. If you are new to using Mermaid or need help troubleshooting errors in your Mermaid code, the Mermaid Live Editor can be a helpful tool.\nWhere taking advantage of Mermaid isn\u2019t possible, link to the original in our Google Drive so that the diagram can be edited by anyone. At GitLab we use ubiquitous language to increase communication efficiency. This is defined in Domain-driven design as: \u201cA language structured around the domain model and used by all team members to connect all the activities of the team with the software.\u201d We use it for activities in GitLab, even ones not implemented in software. By having ubiquitous words to identify concepts we prevent confusion over what is meant, for example we refer to parts of our organization as a function, department, or group depending on exactly what is meant. Make sure that domains don\u2019t overlap, for example organization size and deal size don\u2019t reuse words to prevent overlap. If a term is ambiguous don\u2019t use it, for example our hiring team uses the terms roles and vacancies, but avoid the ambiguous word job. Make sure that projects and working groups have clear and direct names. Prefer \u201cCI Spend Reduction Working Group\u201d to \u201cProject Raven Working Group\u201d. Make sure that people can infer as much as possible from the word, for example our subscription options allow you to know if someone is using self-managed or GitLab.com. Make sure terms don\u2019t overlap without clearly defining how and why, for example see our tier definitions. Keep terms to one or at most two words to prevent people from introducing ambiguity by shortening a term. When using two words make the first word unique because people tend to drop the second word more often. MECEFU is an acronym for Mutually Exclusive Collectively Exhaustive Few words Ubiquitous-language. You pronounce it: MessiFu. Think of the great soccer player Lionel Messi and his kung fu or soccer fu skills. We want to use MECEFU terms to describe a domain to ensure efficient communication. MECEFU terms have 4 characteristics that help with efficiency: An example of a MECEFU term is our sales segmentation: One nit-pick is that the Medium of SMB and Mid of Mid-Market sound very similar. Simple Language is meant to encourage everyone at GitLab to simplify the language we use.\nWe should always use the most clear, straightforward, and meaningful words possible in every conversation.\nAvoid using \u201cfluff\u201d words, jargon, or \u201ccorporate-speak\u201d phrases that don\u2019t add value. When you don\u2019t use Simple Language, you: When you do use Simple Language, you: Here\u2019s an example: Original sentence We\u2019re now launching an optimization of our approach leveraging key learnings from the project\u2019s postmortem. A Simple Language sentence We\u2019re creating a new plan based on what we learned from this project. Simple Language is important both when we\u2019re speaking to other team members and when we\u2019re representing GitLab to people outside the company. Be sure to use Simple Language in written communications as well.\nOur handbook, website, docs, marketing materials, and candidate or customer emails should be clear, concise, and effective.\nCorporate marketing maintains guidelines on GitLab\u2019s tone of voice. For example, do not suggest that you\u2019re \u201cworking in real-time\u201d when a matter is in disarray. Convey that a lack of organization is hampering a result, and provide feedback and clear steps on resolving. Do not use a cool term such as \u201ctiger team\u201d when the existing term of \u201cworking group\u201d is more exact. While cool terms such as these may be useful for persuading colleagues to join you in working towards a solution, the right way isn\u2019t to use flowery language. The last example is when we used \u2018Prioritizing for Global Optimization\u2019 for what we now call a headcount reset. When we renamed it we saw a good reduction in the use of this disruptive practice of moving people around. Using American English as our standard language supports our values such as efficiency, results, and transparency.\nCareful use of another person\u2019s language can be a celebration of diversity and build an atmosphere of inclusion. The guidance in this section applies to written one-to-one communication, for example, merge request comments between an author and reviewer, not merge request descriptions or commit messages. Also keep the following in mind: Here\u2019s an example: Hey @nmalcolm, I left some suggestions for your merge request. Ka mau te wehi! (Te Reo M\u0101ori: great work / well done!) \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059 (Japanese: thank you very much) for the review @cynthia! Avoid using Git in the naming of internal and external company related programs (BagGit, GitFit, Gitty, GitIt, etc.). Referencing Git creates an inaccurate perception that GitLab has a narrow focus. While GitLab started as a source control platform, it has become The DevOps Platform. We have a low internal email culture, as we see greater efficiency in other forms of communication (e.g. Slack). If you are emailing, please use the following guidelines: Slack is used for: Use a bias for action to quickly move conversations that require collaboration and action out of Slack and into an issue. Only 90 days of Slack activity will be retained, so Slack should specifically NOT be used for: Internal Slack messages between team members are still considered professional communication. Please do not use or add emoji\u2019s to Slack that are of a political, religious or of a sexual nature. You can refer to the Religion and politics at work section of the handbook. When in doubt do not use or add the emoji. If you have any concerns about an emoji that was used, please reach out to the author or if you are not comfortable doing so please reach out to your People Business Partner. There is a lot of information pertaining to Slack, as it is a critical part of GitLab\u2019s communication. See the Slack tools and tips page. Note: We don\u2019t use the term private message, because these direct messages are not inherently private like a phone call or private letter. The messages are potentially accessible by Workspace admins or via Backups. Slack refers to these types of messages as direct messages themselves. When using Slack for work-related purposes, please avoid direct messages. Direct messages discourage collaboration. You might actually be contacting the wrong person, and they cannot easily redirect you to the right person. If the person is unavailable at the moment, it is less efficient because other people cannot jump in and help. Use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed. If someone sends you a work-related direct message, it is okay to let them know you\u2019d like to take the conversation to a public channel, linking to this section of the handbook. The process might look something like: If you find yourself getting a lot of direct messages that should go in a public channel, consider changing your Slack status to an attention grabbing emoji and set it to something like: If you must send a work-related direct message, don\u2019t start a conversation with \u201cHi\u201d or \u201cHey\u201d as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly, and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g., \u201cI\u2019m having trouble understanding issue #x, can we talk about it quickly?\u201d. Use private channels instead of group direct messages. Group direct messages are very hard to maintain, track, and respond to. They also have a key limitation in that you can\u2019t add people to the conversation. This is a hindrance to collaboration and transparency. Consider whether the conversation can take place in a public channel. If not, please use a private channel instead. This channel may have a short-term purpose. It is acceptable to leave the channel and/or archive it if you are no longer an active participant or the channel is no longer in use. For all the same reasons that we want to avoid direct messages, use public channels, and be handbook-first, we track the % of messages that are not DMs.\nAs we grow headcount, we exponentially increase the lines of communication- 3 people have 3 communication lines, 4 have 6, and 41 have 820.\nAs a result, there is a natural tendency for people to prefer private channels of communication.\nThe intentions are good, as people are looking to reduce noise for others, but this can lead to the same problems as described elsewhere on this page, notably: Slack is our primary source of chat communication and is where many personal interactions happen.\nWe want to continue to encourage folks to build personal relationships with one another which will often happen over DMs. We know that DMs will always exist.\nWe don\u2019t want to eliminate them.\nWe set a target of Slack messages that are not DMs being at least 25% of messages.\nAt the time that we set this target, it was <20% of communications. Everything at GitLab is a work in progress, so if we see a culture shift where Slack is not where work is occurring, thus inflating the amount of communication that is personal that is occurring, we can always change this KPI, but the steady growth of Slack messages paralleling the number of team members does not seem to suggest that is the case. The previous KPI (% of messages sent in public channels) was about public channels but since some necessary parts of the business occur in private channels (discussions around comp, hiring, talent acquisition- and we do A LOT of hiring), this version of the KPI makes more sense.\nEarlier in our history, 50% of all communication was in public channels. Note: Some of these charts require data from a sheetload file that needs to be manually updated. To self-serve data for a chart with missing data, please visit Slack\u2019s workspace administration page. It provides guidance on how to access Slack\u2019s analytics dashboard for a particular workspace. If this data is required in the charts below, you can ping the #data channel for a refresh. If this becomes a common request, we may choose for the manual step to become regularly scheduled. Start by understanding what we mean by respecting time. We should err toward putting material into channels over DMs and public channels over private channels even though we understand that this will generate more messages that can be read by more people. Respecting time is not about reducing the overall volume of channel messages that team members receive. It\u2019s about making sure that messages are targeted, expectations for asynchronous responses are clear, and we are communicating with consideration. The following tips provide ways to work respectfully with others given this context, though is not an exhaustive list: If you have a question that you can\u2019t find the answer to in our handbook (or you need help finding something in the handbook) team members across the company are here to help. Go directly to the subject matter experts/source in the designated slack channel to ensure your question is addressed. If your question doesn\u2019t relate to any of the existing topics: The times this feature would be used would be to comply with certain obligations. Corporate Export must be enabled by Slack in accordance with Slack\u2019s policy, which can be found here. Examples of instances where GitLab may need to use this feature may include, but are not limited to, those situations listed in Slack\u2019s documentation. No. The Slack Workspace Owner has the ability to export data from all direct messages and private channel conversations for the maximum retention period set by GitLab, which is currently set for 90-days. All messages that are older than 90-days cannot be exported by the Workspace Owner or any other Team Member at GitLab. While messages are not actively monitored, GitLab reserves the right to monitor its software for the reasons stated in its Employee Privacy Policy, including, but not limited to, the safety and protection of our Team Members, the protection of our intellectual property, and the exercise or defense of legal claims. Please keep GitLab values in mind when communicating directly with other team members.\nIf you have a confidential personal issue that you do not feel comfortable discussing via a business-provided internal communications tool, it is recommended to use a personal form of communication such as a text message or phone call.\nFor additional questions, please address in the issue. To use the \u201cSlack Down!\u201d group chat on Zoom: Once service is restored, go back to Slack. To use Slack Huddle: Once service is restored, go back to Zoom. Join the Slack Down! room on Hangouts Chat.\nOnce service is restored, go back to Slack and Zoom. Never use a Google Doc / Presentations for something non-confidential that has to end up on the website or the handbook. Work on these edits via commits to a merge request. Then link to the merge request or diff to present the change to people. This prevents a duplication of effort and/or an out of date handbook. Google Docs can be useful when rapidly iterating/commenting/suggesting on the content, but if the content is meant to be long lived it should be moved to the handbook as an SSOT and deprecated with a link to the handbook page. If the content is short lived, e.g. one-time report that won\u2019t be referred to beyond 2-3 weeks, it can remain in a Google Doc or presentation. Google Docs Pageless format is the preferred format for company documents that won\u2019t be printed. If you set your default to Pageless then this will be applied to all future documents as well. If a document is likely going to be printed (for example, a contract) the older paged style is acceptable. See Good practices and helpful tips for help navigating the pageless format. If you do need a Google Doc, create one with your company Google Workspace (formerly G Suite)\naccount and set the visibility, access controls and searchable flag according to the following guidelines. The recommended defaults when sharing a document for GitLab internal purposes is setting visibility to GitLab, access to Editor and searchable\nCan find in search results to ensure everyone can contribute! Note:\nTo our knowledge, it is not possible to set the default to Can Edit and you have to change the permissions from View manually. We hope that Google adds this capability in the future. Reference Google\u2019s documentation on Link Sharing to learn more. Pages like this are part of the handbook. The GitLab handbook is the central repository for how we run the company. GitLab Docs - docs.gitlab.com is where you can find documentation on GitLab, the product. repository/repositories are where files are kept under source code management. In most cases, requires MRs to merge. The Handbooks are in a repository, our code is in a repository, etc. README - README.md files are what are shown by default when you browse a repository. Contains useful information to give context on what the project/repository are for. These can also be used for user profiles as personal READMEs. We recommend you set your Google Calendar access permissions to \u2018Make available for GitLab - See all event details\u2019. Consider marking the following appointments as \u2018Private\u2019: There are several benefits and reasons to sharing your calendar with everyone at GitLab:  If you add blocks of time spent on recurring tasks to your Google Calendar to remind yourself to do things (e.g. \u201cCheck Google Analytics\u201d), consider marking yourself \u201cFree\u201d for those events so that coworkers know they may schedule a meeting during that time if they can\u2019t find another convenient time. This feature allows you to create a link to an availability schedule that you can send to your customers or coworkers for them to schedule a call according to your availability. This allows you to only show available spots while keeping your other calls private. This also avoids having to go back and forth between you and other person figuring out what day and time works best for both of you. Since this is a native Google Calendar functionality, there is no need to set up integrations with your calendar like other scheduling tools. A member of our Customer Success team created a demo video of how to use this feature. Key practices to consider during any meeting are listed below. GitLab team members are not authorized to speak with the media or analysts on behalf of our company unless authorized by our Marketing department. Unless authorized, do not give the impression that you are speaking on behalf of GitLab in any communication that may become public. This includes posts to online forums, social media sites, blogs, chat rooms, and bulletin boards. This policy also applies to comments to journalists about specific matters that relate to our businesses, as well as letters to the editor and endorsements of products or services. For more, please visit the Corporate Communications handbook section. GitLab as the leader in all remote work creates opportunities for our team members to receive requests from external 3rd parties to participate on panels, blogs or news publication or articles. Recently our team members have been approached by external 3rd parties looking to pay or compensate GitLab team members for their time to discuss GitLab remote practice to help them guide a client. Other third parties may contact GitLab team members to provide subject matter expertise that they may have by virtue of their role at GitLab. As in any request we ask that team members verify who they are speaking with to make sure the source is indeed a valid and legitimate request. Always remember that you represent GitLab and if any question makes you uncomfortable or gives you a pause on whether you should answer then we recommend that you do not answer. A third party\u2019s questions regarding GitLab financials, sales, compliance, executives or specifically where the company is heading should be treated with the most caution. We want and encourage all team members to be remote evangelists and this can be done without giving very specific information about GitLab. If you have any concern about a request please reach out on slack to #external-comms Please see our team member social media policy. See the YouTube page for options and instructions for posting recordings and live streaming to our YouTube channels. If you need to provide the details of GitLab\u2019s contact information you can take the address from the visiting page for reference; or the mailing address of the office in the Netherlands if that is more applicable. If a phone number is required, leave this field empty by default. If that is not possible, then use\nthe general number (+1-415-761-1791), but be aware that this number simply guides to a voice message that refers the caller back to contacting us via email. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. In an all-remote organization effective communication is key to exchanging knowledge, ideas, and information. Effective communication at GitLab: If you would like to improve your skills or expand your knowledge on topics relating to Communication at GitLab, check out our resources: Skills and behavior of applying effective communication as a Team Member: Skills and behavior of applying effective communication as a People Manager: A diversity, inclusion and belonging \u201cally\u201d is someone who is willing to take action in support of another person, in order to remove barriers that impede that person from contributing their skills and talents in the workplace or community. It is not required to be an ally to work at GitLab. At GitLab it is required to be inclusive. Being an ally goes a step beyond being inclusive to taking action to support marginalized groups. The first step in being an ally is self-educating. This is a page to list resources that GitLab team-members have found helpful in learning how to act as an ally. GitLab uses Zoom as the primary video collaboration platform for internal and external communications. Some of our customers and partners have different preferred tools and to facilitate the communication with those parties, GitLab provides licenses for WebEx and MS Teams. This service is only provided to team members that have a business need to host meetings and where Zoom is not accepted. It is not efficient for GitLab to use multiple video conferencing tools, however we encourage the use of the most popular ones among our customers and partners when needed. E.g.; Zoom, WebEx, MS Teams, Skype, etc. At GitLab, Slack is critical to our communication with each other.  While it enables real-time communication, we also are careful to remain true to our asynchronous mindset, suggesting that GitLab team-members set \u201cdo not disturb\u201d and not expect real-time answers from others all the time. There are groups of channels that can help with various areas of GitLab. This page speaks to a few subsets of those channel groups. The purpose of this playbook is to help those who are looking to create video content determine what type of video they should create, how to get it done, and most importantly identify why the video should be created in the first place. The first thing you should ask yourself when considering a video project is, \u201cwhy am I doing this video?\u201d In asking yourself that question, figure out what your purpose is for the video and why you feel there is a need for it. Also, be sure to check that a video hasn\u2019t already been created that fulfills the content gap you are seeking to fill. There are times in everyone\u2019s life when you can feel overwhelmed, anxious, angry or irritated about a situation.  At the next small disturbance it pushes you to react in perhaps a moment of frustration.  Everyone does it in their personal life as well as their work life.  As a manager this can be particularly challenging and sometimes you react or say something in a meeting, via slack, an issue or email during the heat of the moment.  In this section we are going to review the Power of the Pause and provide you with a few tips to help you take a moment and breathe before you respond. Below are terms people frequently use when they should use another term. \"GitLabber\" includes both the GitLab community and people who work at GitLab. When you want to refer specifically to people who work at GitLab, use \u201cGitLab team member\u201d instead. By definition, we are all international and global, regardless of where in the world we\u2019re located. International and rest of world are often incorrectly used to speak to non-US, so we don\u2019t use them to avoid confusion."
    },
    {
        "title": "GitLab Culture",
        "url": "https://handbook.gitlab.com/handbook/company/culture/",
        "content": "Please see our company page for more general information about GitLab. You can see how our team has grown at the GitLab Contribute page.  It\u2019s an exciting time to be part of GitLab. We\u2019re a fast-growing, all-remote team, and we\u2019re looking for people to join us around the world.\nHere\u2019s a look at what you can expect from our culture and all-remote environment. Our size and our mission (that everyone can contribute) mean that our team members can \u2014 and are expected to \u2014 make an impact across the company. Because we all use our product internally, you don\u2019t have to be a developer to learn to collaborate in the GitLab tool.\nFrom your very first week, no matter your role, you\u2019ll gain the technical skills needed to access, question, and contribute to projects far beyond your job description. This unique approach works because we\u2019re a team of helpful, passionate people who want to see each other, the company, and the broader GitLab community succeed.\nWe learn from each other, challenge each other, and thank each other. Come prepared to do meaningful work that will help shape the future of the company. While the opportunities to contribute are boundless in a growing organization like GitLab, they may not be clearly defined.\nYou\u2019ll need to think creatively, speak up to see how you can help, and be willing to try something new. At GitLab, our value of iteration has a unique impact on the way we operate and get things done. Working this way means our team members are expected to quickly deliver the minimal valuable change in their work instead of waiting to produce a polished, completed product. While this can be a challenging practice to adopt at first, it\u2019s liberating to be able to make mistakes, get feedback quickly, and course correct to reach a better outcome, faster. As our company and the industry continue to grow, you\u2019ll have the freedom to change and constantly evolve everything from your schedule and your workspace to your job description and your skills. In the above interview with Stuart Miniman of theCUBE, GitLab CEO and co-founder Sid Sijbrandij discusses the merits of operating a 100% remote organization, and why he believes it\u2019s the future of work. At GitLab, we\u2019re figuring out a lot of things you have to do to be all-remote, and we\u2019re trying to share those lessons. That\u2019s anything from working handbook-first to communication styles and being intentional about informal communication. If you Google \u201cGitLab all-remote\u201d, you\u2019ll find tons of tips. And those are based not just on what we say, but what we do. We have a public handbook of over 3000 pages with all our internal processes. You can check out what we really do to make this work. I think it\u2019s going to be the future. In the future, companies who make digital products are going to be much more all-remote. And we want to enable that trend. We think it\u2019s great for team members. GitLab is one of the world\u2019s largest all-remote companies, and being a part of our team offers unique advantages beyond the requisite flexibility you\u2019ll find in many organizations. As a GitLab team member, you can work from anywhere with good internet. Whether you\u2019re an adventurer looking to travel the world while still pursuing your career,\na parent or caregiver who wants a job that allows you to spend more time with family, or somewhere in between, you\u2019ll have the freedom to contribute when and where you do your best work. But there\u2019s more to our all-remote culture than the daily flexibility it provides.\nBy nature, having no offices or headquarters makes us more inclusive, more transparent, and more efficient in everything we do.\nWith a team spread across over 65 countries around the globe, we invite diverse perspectives, we document everything, and we collaborate asynchronously. Despite all of its benefits for team members, our company, and the world, remote work isn\u2019t for everyone.\nLearn more about all-remote work at GitLab and decide if it\u2019s right for you.  Culture at GitLab is composed of three things. In other organizations, culture may be defined through the personality of the group. This includes people who have traits in common and people who you enjoy spending time with. Note that this is not something that should matter when evaluating people for work, and this is not what we mean with Culture at GitLab. Watch this live speaker series, hosted on 2021-11-18, with Carter Gibson and Markus M\u00fchlbauer from Google on Building Internal Culture. Some key takeaways from the call include: Top 10 Reasons to Work for GitLab: Dmitriy started GitLab when he pushed the initial commit. Sid announced GitLab on HN. First 10 people get access to GitLab Cloud (now known as GitLab.com). GitLab CI is officially announced. GitLab Enterprise Edition is announced. GitLab Cloud renamed to GitLab.com. GitLab in Y Combinator winter 2015 batch. Series A Funding was signed. Anniversary of our first ever summit in Amsterdam with 25 GitLab team-members. What better way to convey a sense of who we are and how we work together, than by sharing the stories about it? \n\n  \n\n\n\n \n\n  \n\n\n\n \n\n\n\n \u00a0 Take GitLab for a spin See what your team could do with The DevSecOps Platform. Get free trial Have a question? We're here to help. Over the years, GitLab has hosted GitLab Summits, global team member events. During past times, they events have sometimes between called Contributes. Summit is an all-company team member gathering to foster collaboration, alignment, and motivation. We\u2019ll meet face-to-face, welcome new team members, reconnect with old friends, and reinforce our business through our core values, all while having fun in the process! The goal of Summit is to build trust through social connections. This trust should lead to higher individual and team motivation, leading to higher productivity and retention. Higher trust between individuals and teams fuels collaboration and leads to stronger results."
    },
    {
        "title": "TeamOps",
        "url": "https://handbook.gitlab.com/teamops/",
        "content": "At its heart is a belief that creating the environment for better decisions and improved execution of them makes for better teams \u2014 and ultimately, progress. TeamOps is how GitLab scaled from a startup to a global public company in a decade. Now we\u2019re opening it up to every organization. The four guiding principles of TeamOps are below."
    },
    {
        "title": "CEO",
        "url": "https://handbook.gitlab.com/handbook/ceo/",
        "content": "This page details processes specific to Sid, CEO of GitLab.\nThe page is intended to be helpful, feel free to deviate from it and update this page if you think it makes sense.\nIf there are things that might seem pretentious or overbearing please raise them so we can remove or adapt them.\nMany items on this page are a guidelines for our Executive Business Administrators (EBAs). Sid Sijbrandij is the Co-founder, Chief Executive Officer and Board Chair of GitLab Inc., the most comprehensive AI-powered DevSecOps platform. GitLab\u2019s single application helps organizations deliver software faster and more efficiently while strengthening their security and compliance. Sid\u2019s career path has been anything but traditional. He spent four years building recreational submarines for U-Boat Worx and while at Ministerie van Justitie en Veiligheid he worked on the Legis project, which developed several innovative web applications to aid lawmaking. He first saw Ruby code in 2007 and loved it so much that he taught himself how to program. In 2012, as a Ruby programmer, he encountered GitLab and discovered his passion for open source. Soon after, Sid commercialized GitLab, and by 2015 he led the company through Y Combinator\u2019s Winter 2015 batch. Under his leadership, the company has grown with an estimated 30 million+ registered users from startups to global enterprises. Sid studied at the University of Twente in the Netherlands where he received an M.S. in Management Science. Sid was named one of the greatest minds of the pandemic by Forbes for spreading the gospel of remote work. A pronunciation hint for Sijbrandij: It\u2019s like when you have seen some distilled wine, and want to point it out: Sid, see brandy Moved to a google document internal to GitLab team only. Please search in Google Drive file name: CEO\u2019s Favorite Restaurants. If you have questions please message the Staff EBA to the CEO in #eba-team or DM. Transparency and directness are part of our values and I want to live them by sharing the flaws I know I have.\nI\u2019m fully responsible for improving the things below, listing them is no excuse.\nThey are listed here for two reasons.\nThe first one is so that people know it is not them but my fault.\nThe second one is so I can improve, I hope that listing them lets people know I appreciate when people speak up about them. If you speak up about them I should thank you for it, it is OK to say \u2019this was on your list of flaws so I kinda expected a thank you\u2019.\nI\u2019m sure I have more flaws that affect my professional life.\nFeel free to send a merge request to add them or communicate them anonymously to one of our people operations team members so that they can send a merge request. Not a flaw but something to know about me, I have strong opinions weakly held. Or as someone said, I come in hot but am open to new evidence. Sid is easy to talk to on any subject. He is good at drawing people out and challenging them to grow, in a supportive way. He can meet anyone on their level and have a productive conversation. Watch a quick video from a CEO Shadow recounting her observations. This section was started by GitLab\u2019s Head of Remote Darren M. to coach and provide context to others who meet with and interview Sid. The below are suggestions based on a history of personal interviews, extracted lessons from GitLab Unfiltered interviews, and observations during a CEO Shadow rotation. Others are welcome to create a merge request and add more. Thanks to M\u00e5rten Mickos for the inspiration for this section. All good ideas are his, all bad ones are mine. I am a visual person much more than auditory, and I am a top-down person much more than bottom-up. This means that I love written communication: issues, email, Google Docs, and chat. Feel free to send me as many emails and chat messages as you like, and about whatever topics you like. I prefer chat over email. If you have a great new idea or suggestion for me, I appreciate if you can convey it in a picture or in written words, because I learn by seeing more than I learn by hearing. I don\u2019t mind if you send me or point me to plans that are in draft mode or not ready. I am happy if I can give useful feedback early. It doesn\u2019t have to be perfect and polished when presented to me. In written communication, I appreciate the top-down approach. Set the subject header to something descriptive. Start the email by telling me what the email is about. Only then go into details. Don\u2019t mix separate topics in the same email, it is perfectly fine to send two emails at almost the same time. Try to have a concrete proposal so I can just reply with OK if that is possible. I get many email on which I am only cc\u2019d on, I would very much appreciate if you started emails intended specifically for me with \u201cSid,\u201d or some other salutation that makes it clear that the message is for me. Share slide decks in advance of meeting with me per few meetings with presentations communication guideline. I can be tagged in a relevant Slack channel. When sharing slides with me, limit the content on each slide to one concept. Avoid condensing multiple concepts into one slide. Additionally, the slide title should be specific to the content on that slide. For example, instead of condensing two lists onto one slide, separate the lists onto two separate slides with slide titles specific to each list. This also applies if you are providing slides for me to present. I have accounts on LinkedIn and Facebook. I will not send invites to team members on those networks since as the CEO I don\u2019t want to impose myself on anyone. But I would love to connect and I will happily accept your LinkedIn and Facebook friend request. Please ping the Staff EBA to the CEO in #eba-team on slack and they will accept your connection request. You can also find me on Twitter as @sytses, I won\u2019t request to follow private twitter accounts, I assume I\u2019m welcome to follow public twitter accounts, if not please let me know. Sometimes I will ask to be kept apprised of an action item or follow up. One common way for me to express this desire is by applying the CEO Interest label on a GitLab issue. When keeping me apprised please tend toward over-communication. The primary method to communicate your follow up to me should be via MR or issue updates posted in the #ceo slack channel including specific notification when an issue is completed or closed. It might feel like you are being bothersome or distracting, but it is not. If I ever feel like you are truly over-communicating, I will let you know. I get a lot of @ mentions in Slack, often when I\u2019m being discussed. Please only @ mention me when you need me to see something or approve something, when you just want to refer to me you can just say Sid. This saves time and enables increased efficiency. If there is a suggested message draft that you\u2019d like me to post in Slack, you should send two messages to me. The first message should include the context behind the ask, the suggested timing for posting, and a link to the channel that the draft will be posted in. Under this message reply in thread with your second message. This should only contain the draft message. This allows me to easily copy and paste on mobile. I\u2019ve been thinking about the notion of Sacred Cows since I heard that people use \u201cSid said\u201d as an argument in conversations. The phrase comes from the belief of devout Hindus that cows are sacred animals and should never be harmed. In the US, we use this term to mean \u201cone that is often unreasonably immune from criticism or opposition.\u201d If we\u2019re truly practicing continuous learning, we have to question the Sacred Cows that can subtly and profoundly influence how we make decisions and conduct business. We need to examine Sacred Cows with ruthless compassion. By that I mean that we should be ruthless about examining and questioning their validity while being compassionate with the person citing the Sacred Cow. Just because I said something doesn\u2019t make it inviolable law like a law of physics. My utterances are usually merely an opinion based on the context of the discussion and the moment. As new context is revealed, we need to be willing to reexamine what we say and iterate. What I propose is that next time \u2018Sid said\u2019 is mentioned you check in with me, I might say: But it is also possible that: Please follow these steps if you\u2019d like me to review a Merge Request (MR) for approval: I prefer other forms of communication (e.g. slack) over email. I get a lot of email and I\u2019m frequently not on top of it.\nI appreciate it if you send my EBA a slack message if I need to respond to an email.\nPlease quote the subject line of the email in your chat message. If someone else in the company wants to have me send an email they should email me and cc my EBA with: When receiving such an email my EBA should stage a draft email to the recipient and a draft answer \u2018done\u2019. The email should only be the body. Greetings and niceties are handled by the EBA. For scheduling a video call or meeting with me or other execs, please see the EBA handbook page. Please do not use Zoom waiting rooms for meetings scheduled with me or on my behalf. If attendees are joining separate sections of a meeting, you can break the session into multiple Zoom calls or have a Slack channel to manage attendee entrances and exits. As part of my role, I participate in a variety of meetings both internal and external. Please see below for a general overview of these. I try to plan my vacations around times when many team members in the United States are on vacation. A rough overview of these times is captured on GitLab\u2019s cadence page. Other team members may also preference taking off work during these windows as there tends to be less demand for synchronous collaboration during these times. The recruiter should share a prep package with the Board Member at least 3 business days in advance of a candidate interview. This should include: To schedule a Pick Your Brain interview with me, please see the EBA handbook page. To watch and read prior Pick Your Brain interviews about all-remote, please see the Interviews page. For scheduling a video call or meeting with me or other execs, please see the EBA handbook page. To schedule Sid to speak at an external engagement please contact the EBA to the CEO with the details outlined in the Executive External Event Brief. The EBA to the CEO will gain approval from the function head of the requester on whether the CEO will attend or not. Sid\u2019s preference is to participate in 1:1 fireside chats or conduct a stand alone presentation (audience Q&A is fine). He does not participate in panels with multiple speakers. If the organizer of an event requests a prep meeting with Sid to check audio and visual before a remote presentation, we can schedule for 5 minutes before the event for Sid to login and confirm that audio and visual are working as expected. A longer prep meeting is not required as Sid has a robust remote work setup. Some general guidelines of what travel is appropriate, these guidelines are not fixed, feel free to ask for exceptions: Consider the following to increase efficiency: When at conferences I want to achieve results for the company and be efficient with my time.\nPlease ask sales and/or marketing to set up meetings for me in advance.\nI don\u2019t mind doing booth duty, presenting, or any other way I can contribute.\nI do mind unscheduled time randomly wandering the hallways, I\u2019ve found this to be ineffective. Each year I want to attend the Linux Foundation Member Summit (formerly the Open Source Leadership Summit).\nPlease ensure: If I am asked to keynote a conference, it is up to the executive of the function asking me to attend to decide.\nFor example, if the request is coming from marketing, the CMO decides; if the request is coming from Finance, the CFO decides.\nPlease follow the process outlined under [meeting request requirements]({{ ref \u201ceba#meeting-request-requirements\u201d >}}) and work with my EBA who will shepherd the decision about whether or not I will attend. If possible, I use a teleprompter when giving keynotes. I prefer to use the teleprompter app \u201cPromptSmart\u201d along with the \u201cPromptSmart Remote Control.\u201d Ideally, someone will scroll through the script on my behalf, at my pace. I\u2019m always willing to record video content for conferences I\u2019m unable to attend.\nEmail my EBA to coordinate the recording. Often when attending an event, the organizers will reach out to see if I want a certain snack or drink. If possible, I would prefer: People regularly ask what I use for my home office setup. Below is a list of the items I use: Note: I have paid for all of these items myself. Please refer to GitLab\u2019s expense policy for office equipment and supplies when purchasing and expensing home office items. When preparing scripts or documents in my voice, please follow these guidelines. This list can help you prepare a draft that is as close as possible to my natural way of communicating. For additional information or questions, please contact the #external-comms Slack channel or the Chief of Staff to the CEO. The CEO will pay for all transport expenses (flight, Uber, etc.) personally.\nBy default flying business class.\nOn short flight with other team members fly economy if we can sit together, in this case still pay personally. There are three levels of performance: I\u2019m driven by what is possible, the aspiration, what can be.\nOthers\u2019 expectations of a person affect the person\u2019s performance with high expectations leading to better performance, this is called the Pygmalion effect.\nWhat is possible is more than what we are satisfied with or what we promised to our stakeholders.\nWe can be above what we promised and below what is possible and still have done a good job, we can win without doing everything we aspired to do, or everything that is possible.\nIt is unlikely that we win without doing what we promised.\nI have to be clear in distinguishing these level when I discuss a goal with my reports. One of the hardest things in business is not to slow down as the organization grows.\nAn applicant asked how we manage to do this and these are the factors that come to mind: As the company keeps growing my use of the handbook is also changing. These office hours are an opportunity for GitLab team members to discuss how to take a more iterative approach to a specific activity or to highlight how a more iterative approach helped drive results.\nIteration is one of the hardest things to learn about working at GitLab and these office hours are a great opportunity for me to help coach folks who are interested in better understanding it.\nWe learned iteration at YC, where we took our plan for the next 3 months and compressed it into 2 weeks.\nGive yourself a really tight deadline and see what you can do.\nThe smaller we split things up, the smaller steps we take and the faster we can go. I keep in touch with various industry leaders on a regular basis (monthly, quarterly or annually). They are people who have accomplished extraordinary things at prominent companies such as hypergrowth hiring, ambitious revenue growth, or created transformative technologies. In these meetings, I get to learn from and know senior leaders within the industry. This helps me to understand what great looks like as it offers me a lens into other companies and what has made them successful or held them back. I ask questions about how they would approach GitLab\u2019s\u00a0current challenges or opportunities. I often share insights from my conversations with functional leaders and\u00a0other\u00a0team members. I have these conversations across all functions because it is important for me to have external, subject-specific mentors. Better understanding individual\u00a0functions helps me set better targets, ask better questions, and be a better partner to functional\u00a0leaders. This allows me to be a better manager and CEO. I try to prioritize people from underrepresented groups, because I see value in learning from folks with different backgrounds. These same folks may eventually become GitLab team members who would add diversity to GitLab. See CEO and executive fraud in the security practices section of the handbook."
    },
    {
        "title": "Office of the CEO",
        "url": "https://handbook.gitlab.com/handbook/ceo/office-of-the-ceo/",
        "content": "GitLab is a functionally organized company in which functions are as mutally exclusive as possible to be efficient. Without a COO or central operating department reporting into the CEO, the CEO gets leverage through an Office of the CEO (OCEO for short) led by the Chief of Staff (CoS) to the CEO. While the Chief of Staff to the CEO is not a part of GitLab\u2019s executive team, this senior person reports directly to the CEO and manages a team that supports the CEO and/or cross-functional projects of importance to GitLab. Help the CEO be more effective and lead select cross-functional initiatives of importance to GitLab. The Office to the CEO consists of: When there are gaps, the Office may expand to include additional roles and responsibilities. For example, at times this Office has included our TeamOps initiative, internal communications, and handbook maintenance. As GitLab is a functionally organized company, the goal in most cases is to own an area until another function is prepared to own and support it. Given the cross-functional nature of the company OKRs and given these projects are important to the CEO, the Strategy and Operators team members are often involved in these initiatives. The Chief of Staff to the CEO and their team may work on projects that fit any combination of the following: This is not an exhaustive list of the types of work the Office of the CEO might do. GitLab is a functional organization, which means the people are organized by function.\nWhen a cross-functional project arises between multiple different Departments, Office of the CEO team members may be included to help with the planning and execution.\nIn many cases, a member of the Office of the CEO will be the directly responsible individual (DRI) for the project.\nWhether it\u2019s a product feature proposal, a new initiative roll-out, or questions from the board, the Office of the CEO is the group that can be trusted to get things done, get them done quickly, and get them done right. Examples of a cross-functional project: Projects come up that are both important and under-resourced.\nThe Strategy and Operations team members within the Office of the CEO should be known for its ability to become 80% effective on any subject quickly.\nThey are generalists at their core and, while they bring special skills to the table, they are meant to be able to address important problems as they come up.\nA member of the Office of the CEO might help source candidates for a strategic hire, fix grammatical errors in the handbook, and build a financial model all in the same day based on what is important or top of mind for the CEO at a given point.\nThe team helps with work that other teams may not have the bandwidth to do but is important to the organization and/or the CEO. Examples of an under-resourced project: There may be projects with no clear leader for a myriad of reasons, including that we\u2019re still hiring the point person or the lead is on leave.\nBecause of the team\u2019s ability to come up to speed quickly, they may be tasked with something totally out of their domain with the expectation that they bring their leadership experience to the table, will do the work to make good decisions, and will lean on team members who are subject-matter experts. For example, there has historically been no DRI for the handbook or related content sites. As it became clear that this was a GitLab priority, but no function planned to prioritize this within the coming year, the Office of the CEO stepped in to take on handbook ownership until an owner could be identified. Examples of projects with no clear leader: Some projects or initiatives are very broad and cross-functional and make sense to belong to the CEO but would be inefficient uses of the CEO\u2019s time if fully owned by the CEO.\nOKRs are a prime example. OKRs need to happen and are key to the business but it is not efficient for the CEO to shepherd the process along.\nThe Office of the CEO is the shepherd for these sorts of projects and collaborates with all team members at GitLab to achieve success on such initiatives. Examples of broad projects: The CEO will have other projects that come up that they will task the Office of the CEO with, such as following up on something or carrying on a conversation on their behalf. Examples of tasks or initiatives that are important to the CEO: The team uses a limited access Google doc called \u201cSid, Stella, and the Office of the CEO\u201d to collaborate and share progress with the CEO.\nIt\u2019s format is structured like the 1-1 Suggested Agenda Format.\nMany of the tasks on the sheet are quick asks: handbook MRs, formatting changes, or questions to be answered.\nSmall asks should be handled as quickly as possible.\nOther asks, such as OKR-related planning or an initiative that requires alignment with multiple stakeholders, require forethought and more appropriate timing.\nSome amount of time each week needs to be spent moving these sorts of tasks forward. As a rule, everything in the doc is a TODO for the Office of the CEO.\nWhen tasks are DONE, they should be labeled as such.\nThe CEO will review and delete the item once it\u2019s been assessed as completed. Since the team has limited capacity to lean into everything that it may want or be asked to, it is thoughtful about team and individual capacity. Members of the Office of the CEO will be expected to manage both directed and leadership (largely self-directed) work. You can find definitions and examples of directed and leadership work on the CoS to the CEO handbook page. When newly initiated, self-directed, leadership work entails a significant time commitment (>20% capacity for more than a week), the work being done should be flagged to the CEO in a 1:1 or team meeting. This work should stay on the 1:1 agenda between the CoS to the CEO and the team member for the duration of the activity. If needed, activities may be reprioritized based on top demands and priorities. More senior roles within the Office of the CEO can expect to have more leadership than directed work, but all roles should have a mix within a fiscal year. Office of the CEO members should monitor the mix of directed and leadership work that they are doing and provide as appropriate in Office of the CEO Meetings, so the CoS to the CEO and CEO are aware of the current balance and can make adjustments, if needed. The Chief of Staff to the CEO supports Board activities as specified in the Board Meeting section of the handbook and as directed by the CEO. In addition, the CoS to the CEO helps the CEO in preparing for the CEO\u2019s closed session. The CoS to the CEO should coordinate with the EBA to the CEO to schedule a 25 minute session with the CEO and the CoS to the CEO a week before the Board of Directors Meeting. The CoS to the CEO should prepare an agenda that includes an outline for what the CEO may want to cover. For each discussion topic, the following should be captured: Designated meeting time will be used to review and make adjustments to the proposal. The CoS to the CEO will coordinate with the EBA to the CEO to ensure that there is a \u201cFYI\u201d on the closed session agenda that links to the prepared material. The Office of the CEO runs the OKR process.\nWe set OKRs on a fiscal quarter basis. There is an OKR schedule that dictates the timeline of events.\nWe use a handbook page for each quarter.\nThe CEO\u2019s Objectives every quarter map to the sequence of our strategy.\nThe CEO\u2019s KRs are what we\u2019re measuring for the company for that quarter. While there are rare exceptions, members of the Office of the CEO are not forever owners of initiatives. They plug in to help achieve critical milestones or fill gaps. When a member of the Office of the CEO joins an initiative, there should be agreement from key stakeholders around: Office of the CEO members can be reassigned based on the needs of the business and priorities of the CEO. In most cases, a member of the Office of the CEO will remain with a project until the exit criteria for the Office of the CEO is achieved. If a project extends beyond its anticipated timeframe or priorities change, a member may have to leave a project before the agreed upon exit criteria is achieved. When a member of the Office of the CEO exits an ongoing intitiative they will: There may be instances in which the Office of the CEO leaving leads to a project scope being reduced or deprioritized. In these instances, the Office of the CEO member will be responsible for engaging key stakeholders around the keep/expand scope or go/no-go decision. It will be clearly documented and key folks will be involved in the decision and aware of the outcome. The CEO does a Quarterly Kickoff in the first month of each quarter. The Office of the CEO plays a role in creating materials, recording content, and preparing the CEO. Details can be found on the All-Company Meetings page of the handbook. The executives get together every quarter for the e-group offsite.\nThe CoS to the CEO plays an important role.\nIt\u2019s 3 to 4 days long with a Functional Leaders Meeting within the following days.\nThere are recurring discussion topics as well as a discussion on content chosen by the CEO. In addition, the CoS to the CEO is responsible for preparing the CEO for offsites by: In Q1 of a new fiscal year, the Chairperson of the Compensation Committee conducts the annual CEO Evaluation. The Chairperson meets with all members of GitLab\u2019s Board and E-Group for their feedback on the CEO\u2019s performance over the past Fiscal Year. The Chairperson meets with the CEO for their self-assessment at the beginning of the evaluation cycle. The CEO\u2019s self-assessment is centered on three main areas The Staff EBA to the CEO assists the Chairperson to schedule the performance review meetings with each Board Member (50 minutes, 1:1) and E-Group member (25 minutes, 1:1). These are conducted in an interview format to capture the richest possible feedback regarding the CEO\u2019s performance. During these calls, Board Members can expect to share their perspectives on the CEO\u2019s major accomplishments and disappointments in areas such as vision, strategy, operations, management team development, company culture, and relationship with the Board. General areas of strength. Areas for improvement and/or additional focus. Key fiscal year strategic/operational, non-financial goals. The results from the Board and E-Group team interviews are summarized (without attribution) by the Chairperson and shared for discussion at the March Board of Directors meeting. The CoS to the CEO is responsible for a mid-year and an end-of-year update to the Board on the progress made across focus areas. This will come in the form of a progress scorecard.\nFor example, if one area of focus is \u201cset 3-year strategy\u201d, the CoS to the CEO will evaluate whether the activity is on track or needs attention. The scorecard will be updated with a progress score (on track, needs attention, or at risk) and a high-level summary of relevant key activities. Feedback from the Board will be shared and discussed in the Q1 E-Group Offsite. Progress will be discussed in the Q3 E-Group Offsite. The CoS to the CEO will also assist the CEO in prepping for the CEO\u2019s end of year review and areas for focus in the coming year. Functional Leaders is a group comprised of all CEO-Skips, select People Business Partners, and a few other folks as nominated by members of E-Group.\nThe CoS to the CEO enables and manages this group. We outline our Mitigating Concerns in the handbook.\nThe CoS to the CEO is responsible for maintaining this list.\nThere is an issue to also add DRIs and review the mitigations. The CEO chooses to run a Summit Challenge as part of some Summits. The Challenge is shared in advance of Summit or on the first day of Summit. As an example, the 2020 Challenge encouraged team members to beautify docs. The Office of the CEO is responsible for collaborating with the CEO to create and introduce the challenge. The CEO is responsible for identifying a prize for team members, but the Office of the CEO should ensure that a prize is identified and support the CEO in this if needed. On February 14, or the Tuesday after if this day falls over the weekend or on Monday, we have an annual calendar cleanup day. The template Slack post includes more information about the purpose and recommended actions: When cancelling a meeting, a team member can copy and paste this message to send to attendees:\nI evaluated the need for this meeting as part of Meeting Cleanup Day. I have determined that the meeting is no longer needed. Please get in touch if you have any concerns. When changing the cadence of a meeting, a team member can copy and paste this message to send to attendees: I reassessed this meeting as part of Meeting Cleanup Day. I have determined that the meeting no longer needs to happen as frequently. Please look for an updated meeting invite and get in touch if you have any concerns. If you are a team member who intends to decline a meeting, the asynchronous communication section of the handbook has some good suggestions for what to say when you decline. Meeting Cleanup Day is intentionally near the start of the new fiscal year. The Office of the CEO will launch this initiative annually a week in advance through posting in the #whats-happening-at-gitlab Slack channel, and by re-posting a reminder at 00:00 UTC on cleanup day. Office of the CEO (or CoS) will repost in the #managers channel for visibility. A member of the Office of the CEO is the DRI within GitLab for the success of GitLab\u2019s partnership with JiHu. Coordination with JiHu requires engagement from multiple functions within GitLab. The Office of the CEO ensures that the appropriate folks are engaged at the right times and that GitLab provides appropriate support to this separate entity. For example, this member ensures that there is an aligned process among relevant GitLab functions after a customer requests to transit to JiHu: Due to its cross-functional scope and access to information, the Office of the CEO is uniquely positioned to see what is happening across the company. Members of the Office of the CEO are encouraged to regularly have coffee chats with folks outside of the team and share key insights and feedback from these conversations. We are evaluating different ways to measure our success as a team. These include: The Chief of Staff to the CEO may occasionally have a Chief of Staff Shadow, a GitLab team member who will participate in a specific project or initiative for a fixed time. Depending on the projec or initiative, the team member may spend most of their time with an Office of the CEO team member instead. Shadow responsibilities could include: taking notes, providing feedback, and/or supporting the overall initiative success. This role would be in addition to any existing responsibilities at GitLab. Participants would opt in to experience another function within GitLab and contribute to a different part of the business. Since participation would be in addition to an existing workload, managers must sign off before a CoS to the CEO Shadow can participate. Interested team members can share their interest with the Chief of Staff to the CEO in the #ceo-chief-of-staff-team Slack channel. The CoS to the CEO will follow up with you to understand what you are looking to get out of the experience and review projects that may be a good match. If there is not an existing project, you will be kept in mind for future opportunities. Once a project or initiative to Shadow has been identified and the team member decides to participate, the team member should open a merge request to add their name to the below table. The MR should be shared through Slack in the #ceo-chief-of-staff-team channel for review and merge. Optionally, the team member can make use of the internship for learning as a framework to guide the Shadow period. The Office of the CEO maintains a GitLab Group and Google Group to ensure the appropriate level of access is granted or removed as team members join and leave the team. The following mapping of permission levels from GitLab Groups to Google Groups is being used: As of 2023-08 there\u2019s no automatic syncing between these groups so Office of the CEO team members who have the appropriate permission level in each group should add or remove team members as they join and leave the team. The primary project used by the Office of the CEO to track work specific to our team is Office of the CEO. Please file issues here as needed to track work being done. To increase the use of public channels and be handbook-first, we track the percent of messages that are not direct messages. The data is exported from Slack Analytics and copied to sheetload.gitlab_slack_stats on a regular basis. Data model."
    },
    {
        "title": "Key Reviews",
        "url": "https://handbook.gitlab.com/handbook/company/key-review/",
        "content": "At most companies, this would be a quarterly meeting for senior function leaders to present priorities, progress, and risk mitigations to the CEO. We allow some additional stakeholders to attend to invite a broader range of perspectives, give visibility to peers across functions, and create broader accountability. Members of E-Group and department leaders nominated by their E-Group leader can be required or optional. Their E-Group member will determine desired participation from within their function. These meetings are designed to ensure that E-Group is aligned on: Key Reviews are once per quarter. The Staff EBA to the CFO is the scheduling DRI for the Key Reviews and will schedule a two hour block during the week after Board Meeting material is submitted. We use Board memos as collateral, so meetings occur in the week between Board memo submissions and the Board Meeting. To be clear on when this meeting would happen: The Key Review meeting invitations will utilize the CFO\u2019s Zoom account. The functional DRI and corresponding EBA will be set as co-hosts. The Key Reviews should always be recorded, with the functional DRI\u2019s EBA as the recording DRI. A Key Review should not be cancelled without permission. Permission to cancel or make changes to the Key Review schedule must be requested in the #key-review Slack channel, tagging the CFO for approval and the Staff EBA to the CFO for awareness. If the CFO is not available, the CEO will make the decision. All changes to the Key Review schedule and/or invites have to be posted in the #key-review Slack channel. Required invitees are members of E-Group, the CoS to the CEO, the EBA to the CFO, and the EBAs to the CEO.\nOptional attendees are other team members as designated by their E-Group leader. Key Review Meetings may contain material non-public information (MNPI). As materials are limited access, participation is limited. Key Review agendas and recordings should not be shared with anyone not on the invite. If the Key Review meeting will not contain MNPI, it can be privately livestreamed to GitLab Unfiltered. Functions that have these quarterly meetings are: Function DRIs are expected to review the invite list in advance of each Key Review. If cross-functional topics are being discussed, they are encouraged to invite folks who should be involved in the conversation. If there are MNPI concerns, they may choose to link to a separate agenda for this part of the discussion. If you would like to be added to a function\u2019s Key Review, ask your functional E-Group member to ask the Staff EBA to the CFO to add you. Each E-Group member will share its Board memo on the Board material submission date. This is the key collateral used in these meetings. E-Group members can optionally choose to include additional material. Some may chooose to use a version of a company-wide template that we have previously used in these meetings. as much as possible to reduce duplicative efforts and streamline Key Reviews. Whether leveraging memos or other mediums, materials should capture:"
    },
    {
        "title": "Group Conversations",
        "url": "https://handbook.gitlab.com/handbook/company/group-conversations/",
        "content": "Group conversations are recurring events providing regular updates and an additional opportunity for team members to ask questions, across all GitLab teams on a rotating schedule. Group conversations support collaboration and transparency All Team Members are invited to participate in Group Conversations by adding questions and comments in the Group Conversation issue, which is linked in every announcement by the respective host. If you have suggestions for improving the Attendee or Meeting Leader experience please create a Merge Request (MR) to update this page \u2014 everyone can contribute! Due to low attendance of the sync meetings, Group Conversations moved to being fully asynchronous in FY24-Q4. It\u2019s common to wonder what the difference is between these two meetings. Generally, they cover the same or similar content, but for different audiences. The Key Review is intended for senior leadership to ask questions. The Group Conversation is open to the entire GitLab team to ask questions. We have both to give the senior leaders enough time to ask questions since the Group Conversations often have general questions unrelated to slide deck. Both are also a good place for sharing news and explaining initiatives. The same deck is generally used for both events, except that the Group Conversation one will have any material non-public information (MNPI) removed. Here\u2019s a brief discussion of why we have both meetings, and how they can operate effectively: If you have questions around an upcoming Group Conversation, please be sure to bring it to the #group-conversations Slack channel and @tag the host! The Host or DRI is the person leading the conversation, usually the group lead, subject matter expert, and overseer of the slides created for the Group Conversation. The host doesn\u2019t need to be the group lead, but the group lead is responsible for making sure that it happens. Questions will generally be directed to the Host, and they will usually answer them unless they feel that another team member has more information or expertise to offer. Complete this process within 7 days after the Key Review to host a Group Conversation. Use presentations to document everything people should know about your group. If the GC is for a group that didn\u2019t have a Key Review, and are preparing new slides, the slides should start with the top 3-5 highlights or top of mind updates that are relevant across functions, followed by additional information. These presentations are for attendees to review and generate questions from for the call, and attendees will often have low context around your function or team. Functions with Key Reviews should not create a new deck for a Group Conversation but should use their Key Review deck for the Group Conversation. If the Key review deck has MNPI, then a copy without MNPI should be created. You can also record and upload a YouTube video if there is additional context that would be beneficial to supplement the slides. There are three layers of content in a presentation: Best practices for presentations: For more general presentation best practices, please see our communication handbook\u2019s Presentation section. All of the public live streamed Group Conversations can be found on the GitLab Unfiltered YouTube channel Group Conversations playlist. The Group Conversation schedule is set quarterly. The schedule is finalized the week before the start of each quarter by the EBA to the CEO. The Scheduling DRI for each GC is encouraged to remind the DRI. There is a rotating schedule with each Department having a conversation on a regular interval.\nWe usually do not have Group Conversations or Company calls during the last two weeks of December. We also tend to cancel these during Contribute. Please note: the frequency of Group Conversations does not recur on a specific cadence, but rather an estimated time (ex: the Portfolio Marketing GC could happen every other month, but does not happen specifically on the 4th Wednesday every other month). Groups Conversations without Key Reviews are optional, and these can be swapped with other groups without Key Reviews, or scheduled during an open day on the schedule. If your Group Conversation is optional and you need to move the date, please work with your department\u2019s EBA. All of the public live streamed Group Conversations can be found on the GitLab Unfiltered YouTube channel Group Conversations playlist. To request a new Group Conversation, please ping @exec-admins in the slack channel #group-conversations and they will assist you in scheduling a date."
    },
    
    {
        "title": "GitLab Environmental, Social, and Governance",
        "url": "https://handbook.gitlab.com/handbook/company/esg/",
        "content": "At GitLab, our mission is to enable everyone to contribute to and co-create the software that powers our world. This, together with our values, is at the core of how we manage our business, including our approach to Environmental, Social, and Governance (\u201cESG\u201d). Our all-remote team drives GitLab\u2019s strategy and business results in more than 60 countries worldwide. In FY24, we sharpened our focus on our people by emphasizing the foundational role of high-performing teams and continuing to leverage our core value of diversity, inclusion, and belonging (DIB) to drive innovation and impact across our business. These efforts included launching new training and development programs and additional resources to encourage and enable team members to contribute and to give our people leaders more of the skills they need to manage efficient and effective teams. Our ESG strategy also encompasses efforts to minimize our environmental impact and better understand and address the potential effects of climate change on our business. In FY24, we continued to enhance our approach to measuring and reporting our greenhouse gas emissions. We conducted GitLab\u2019s first climate risk assessment in alignment with the Task Force on Climate-related Financial Disclosures (TCFD) and launched the first iteration of a supplier engagement program focused on improving the visibility of emissions in our supply chain. We are committed to good corporate governance and high standards of ethics and compliance. In particular, as we continue to harness the power of AI to enhance the GitLab platform, we recognize the importance of working within a robust framework of ethical principles and protecting our customers\u2019 and users\u2019 data. In early fiscal year 2025, we launched the GitLab AI Transparency Center, giving customers direct access to our AI Ethics Principles for Product Development, AI Continuity Plan, and AI features documentation so that they can adopt AI with confidence. Lastly, our strategy and mission are also bolstered by engagement with the wider GitLab community. In the last fiscal year, we continued to expand outreach and drive social impact through community programs such as GitLab for Startups, GitLab for Open Source, and GitLab for Education. We also launched GitLab for Nonprofits, which provides free GitLab licenses to registered nonprofit organizations that align with our values and ESG strategy. Our charitable efforts are further complemented by the GitLab Foundation, which supports people in growing their lifetime earnings through education, training, access to opportunities, and systems changes on a global scale. As ever, GitLab \u2014 the platform and the company \u2014 is made stronger by the support of our stakeholders, including our team members, customers, shareholders, and the wider community. I am thankful for the contributions so far and look forward to what we can accomplish together in the years ahead. Sincerely, Sid Sijbrandij GitLab Co-Founder and Chief Executive Officer GitLab\u2019s mission is to enable everyone to contribute to and co-create the software that powers our world. Our mission is the way we realize our purpose: to help people increase their lifetime earnings through access to opportunities and the DevSecOps platform. Our vision captures what we want to deliver to customers in the next 10 years. Today, GitLab is the most comprehensive AI-powered DevSecOps platform. The DevSecOps Platform shift is part of a larger trend: teams of all types are realizing that breaking down silos has compounding effects on productivity and collaboration. We see it with data and operations teams creating DataOps; we see it with machine learning and ops teams creating MLOps. As more companies (and more teams within a company) rely on our platform, we are positioned to become the AllOps platform \u2014 a single application for all R&D. Our efforts are guided by our six core values of Collaboration, Results for Customers, Efficiency, Diversity, Inclusion and Belonging, Iteration, and Transparency. Together, they spell the CREDIT we give each other by assuming good intent. \u201cWith GitLab\u2019s second ESG Report, we demonstrate our values of iteration and transparency, sharing how we continue to build on our approach to addressing the issues that matter most to our stakeholders and our business. One key example is the launch of our AI Transparency Center, underscoring how we are leveraging the power of AI within a clear framework of ethics, responsibility, and accountability. As our innovation continues to break down barriers, we recognize the increasing opportunity of integrating our business and sustainability strategies to create value for our customers, our shareholders, our team members, and the broader community.\u201d \u2013Robin Schulman, Chief Legal Officer, Head of Corporate Affairs, and Corporate Secretary GitLab\u2019s Environmental, Social, and Governance (\u201cESG\u201d) Report includes information on our key ESG focus areas, our programs and policies, achievements to date, metrics and targets that help define our ESG program, and our plans for the future. Data about GitLab\u2019s financial performance is not included in this report and may be found in our financial and SEC filings. Unless otherwise specified, the information included in this report was last updated on July 18, 2024. The content included covers Fiscal Year 2024 (\u201cFY24\u201d) (as of January 31, 2024) and we plan to update the report annually. Throughout the report, there may be mentions of Fiscal Year 2025 (\u201cFY25\u201d), which runs from February 1, 2024, through January 31, 2025. We would also like to note that GitLab maintains a public-facing handbook, pages of which are linked throughout the report. These pages are maintained separately and may reflect a different reporting period than this report. This report has been prepared with reference to the Global Reporting Initiative (\u201cGRI\u201d) Standards released in October 2021 and the Sustainability Accounting Standards Board (\u201cSASB\u201d) Standard for Software & IT Services. We have also provided disclosures based on the framework of the Task Force on Climate-related Financial Disclosures (\u201cTCFD\u201d). Content indexes for these standards are available in the Appendix. GitLab\u2019s Nominating and Corporate Governance Committee on the Board of Directors (\u201cBoard\u201d) has reviewed the information in this report. For information on GitLab\u2019s ESG Team, please visit the ESG handbook page. GitLab\u2019s ESG strategy is driven by our values and deeply integrated into the company\u2019s business philosophy. It reflects longstanding practices embedded in our work culture since GitLab\u2019s inception, as well as updated policies and programs designed to meet the evolving needs and expectations of our stakeholders. The ESG Team creates and maintains GitLab\u2019s ESG/sustainability strategy and programs. This includes creating and managing GitLab\u2019s ESG disclosures and public ESG reports, identifying and prioritizing key issues to advance our social and environmental goals, and creating partnerships with nonprofit organizations that support GitLab\u2019s values and mission. Our ESG strategy is informed by an understanding of the ESG topics that matter most to our business and our stakeholders. Completed in December 2022, our ESG materiality assessment included engagement with internal and external stakeholders and a focus on \u201cdouble materiality,\u201d exploring both topics that have the greatest impact on GitLab\u2019s business, as well as the actual and potential impact of our activities on the environment, society, and our global communities. GitLab senior leadership \u2014 including members of the Nominating and Corporate Governance Committee of GitLab\u2019s Board of Directors \u2014 were engaged as part of the assessment. The materiality assessment identified the following key ESG topics: Social Environment Governance We also include in this report other topics relevant to our business and stakeholders, including Community, Social Impact, and Corporate Governance. The United Nations Sustainable Development Goals (\u201cUN SDGs\u201d) provide a shared blueprint for peace and prosperity for people and the planet, now and into the future. Our ESG efforts currently align with five of the 17 UN SDGs, and we seek to drive progress on the goals within our operations. We will continue to revisit and deepen our alignment as we make progress on our ESG strategy.  (UN SDG #8 and 10) We\u2019re a team of helpful, passionate people who want to see each other, GitLab, and the broader GitLab community succeed. Our mission (to enable everyone to contribute to and co-create the software that powers the world) means that our team members can \u2014 and are expected to \u2014 make an impact across the company. We empower them by cultivating a high-performance and results-driven culture \u2014 one that enables people to do their best work and advance their careers while fully contributing towards advancing GitLab\u2019s business results. We hire, promote, and recognize those team members who best live our values. We also leverage team members\u2019 unique skills and experiences to drive extraordinary outcomes. We believe that when team members seek feedback from a diverse group of peers and leaders, inside and outside of their group or function, they make better decisions and feel more connected. We work to make everyone feel welcome and increase the participation of underrepresented groups in our community and company. Our entire workforce is remote, making it easier for people of diverse backgrounds and abilities to join the team. As GitLab has evolved, we have learned a great deal about what it takes to build and manage a fully remote team, which we share through our publicly available handbook. Our approach to talent management is underscored by our values, particularly of transparency and diversity, inclusion, and belonging. It is also bolstered by the resources we provide to help our team members grow and succeed. Through our website and handbook, we are transparent about available positions, benefits, job descriptions, onboarding and offboarding procedures, facilitating connections with various internal groups, and much more. We also work to build a diverse team to drive extraordinary outcomes by expanding outreach and inclusivity initiatives to increase the number of team members and our Manager+ population who identify as part of an underrepresented group. Our People Group is dedicated to supporting each team member through their career journey at GitLab. They enable GitLab\u2019s strategy through a focus on attracting and retaining diverse talent, creating a high-performance culture with a focus on efficiency and quality results, driving divisional success through talent programs, and cultivating an equitable and inclusive culture. This includes developing and maintaining our talent brand, facilitating ongoing learning and development, and providing resources for team members to connect, share concerns, and seek support. In FY24, we focused on accelerating GitLab\u2019s 3-year strategy through re-emphasizing the foundational role of high-performing teams. At GitLab, high-performing teams: We educate team members about our values through trainings, videos, workshops, forums, certifications, and ambassadors, which are designed to reinforce our values as key drivers of our high-performance, results-driven culture. Developing Our Leaders Managers at GitLab support our mission of enabling everyone to contribute to and co-create the software that powers our world. We need to equip our people leaders with the skills to lead globally dispersed, all-remote teams to support our business growth at scale. Elevate is GitLab\u2019s leadership training program for Managers and Senior Managers, which prepares managers with skills they need to build high-performing teams. In FY24, we certified 73% of our eligible Managers and Senior Managers in Elevate. Although this fell short of our goal of 85%\u2014due to business-critical initiatives, some team members had to delay certification for a year\u2014it demonstrated positive momentum for the program and contributed to the company\u2019s strong performance throughout the year. During FY24, we also developed and launched additional tools to help participants deepen and continue their learning beyond initial certification. Elevate Applied is an ongoing resource that enables Managers and Senior Managers to connect with each other and practice, apply, and integrate concepts taught in Elevate in their day-to-day work at GitLab. In addition, we developed and announced the FY25 launch of Elevate+, a six-month program designed to enable senior leaders (Directors and Senior Directors) to better understand and practice behaviors anchored in GitLab\u2019s values and leadership competencies, develop new skills to support high-priority business needs, and help establish and strengthen cross-functional connections. We strive to foster a culture of continuous growth so that GitLab remains a great place to work. A positive impact on team member experience leads to a positive impact on results for GitLab and its customers. Our Talent Development team (commonly referred to as \u201cLearning & Development\u2019\u2019) enhances team member performance, expands capabilities, and further develops skills that make GitLab team members the top talent in the industry. Our vision is to be recognized as a top organization for remote learning and development and to create a future where everyone contributes to a culture of curiosity. We accomplish this by focusing on skill-based learning, providing resources to enhance career mobility, and developing learning journeys for teams throughout the organization. To support our aim of facilitating accessible, remote-friendly development for all, we provide asynchronous access to learning opportunities, including: As a global, all-remote company with a team of diverse backgrounds, experiences, and perspectives, GitLab offers a dynamic environment and culture where everyone is encouraged to do their best work. Our talent brand empowers team members to share their thoughts on what it\u2019s like to work here because their voices and stories make GitLab unique and successful. \u201cBy fully embracing the values, GitLab has changed the way I work. I have become more productive and satisfied with the work I do, while also having a better work-life balance. It\u2019s motivating to work somewhere so amazing with such great people.\u201d \u2013 Cynthia, Strategy and Operations, Office of the CEO Engagement Surveys We conduct a number of engagement surveys that enable us to capture honest feedback from our team members, understand engagement levels across the organization, and respond to changing needs. By making small iterations and moving quickly, we can get the data needed to evolve engagement programs as needed and align our priorities to the areas team members care about most. Our key survey tools include the annual CultureAmp Engagement survey, Employer Award surveys, and other ad hoc measures like Organizational Health surveys. In FY24, our Annual Engagement Survey reached 88% participation and indicated an overall engagement score of 75% favorable. This is 2% higher than our New Tech peer group, which gives us confidence in knowing we have a highly engaged team member community. Additional highlights included: Subsequently, our global year-end pulse survey demonstrated positive momentum with an overall engagement score of 79% favorable (+4%). In addition, 91% of participants said they\u2019re proud to work at GitLab, while 86% rated GitLab as a great place to work. GitLab received Great Place to Work Certification for the 4th year in a row in May 2024 with 93% of its U.S. based team members saying that they believe GitLab is a great place to work. Great Place to Work recognizes companies for their outstanding workplace culture, benefits, and performance through successful completion of a survey for US-based team members and culture brief application. (UN SDG #5, 8, and 10) We are committed to a future where the Diversity, Inclusion and Belonging (\u201cDIB\u201d) value empowers everyone to contribute. As a globally dispersed organization serving customers all over the world, we strive for a team that is representative of our users, an open and transparent work culture where all voices are heard and welcomed, and an environment where everyone can show up as their full selves and contribute to their best ability each day. We believe this not only makes GitLab a great place to work but also supports innovation and promotes better decision-making, helping us continue to deliver results for customers. Our DIB focus also extends to how we show up for people outside of GitLab, through initiatives that promote DIB in our industry and the broader community. To put it simply, we need the contributions of everyone in order to empower our team members, help our users change the world, and transform the industry. We do this through our A.D.A.P.T. strategy: Growing Our Talent & Their Experience Our team members are critical to our success. We provide pathways for them to thrive individually and as a part of the GitLab community. Level Up \u2013 Our learning platform is designed to deploy learning content across GitLab internal team members. Career development and mobility \u2013 We provide resources and direction to help team members engage in lifelong growth to meet their unique career goals. Team Member Resource Groups (TMRGs) \u2013 TMRGs cultivate an inclusive workplace and empower our employees by fostering a supportive environment where everyone can thrive. Our TMRGs are open to all team members, not just those who specifically identify with a particular group. Team Member Advocacy Groups (TMAGs) \u2013 TMAGs are groups that share common interests and work together to drive change on behalf of the community through education, action, and enablement across a specific need. Leadership in Action From education to mentorship, sponsorship, and advocacy, GitLab educates its leaders, provides resources for its team members, and holds its leaders accountable so that team members feel empowered to utilize the community they are surrounded by every day. Equipping Our People Leaders \u2013 Our leadership training ensures that DIB is considered and threaded throughout the team member experience. Community partnerships are a great way for GitLab to engage with the community externally, provide opportunities for career development and networking for our team members, and also add layers of DIB to key areas of our organization. Partnerships are also how we measure our inclusive practices against industry standards and can act as accountability partners in achieving success. External Engagement \u2013 We sponsor and support events worldwide that promote inclusion and belonging, and create learning and growth opportunities for our team. By networking with diverse talent at these events, we infuse our team with fresh perspectives and ideas. Reflecting on a year of impactful partnerships, we are inspired to further foster spaces where technology and diverse talent converge, giving everyone a voice. Do Good \u2013 Throughout the year, the DIB and ESG teams collaborate to give back to the communities we serve by offering volunteer opportunities to team members, working with TMRGs to donate funds to relevant nonprofits, and providing in-kind donations to DIB related nonprofits through the GitLab for Nonprofits program. When we think about DIB, it\u2019s easy to see it only from a team member perspective. Our goal is to bring inclusivity into as many touch points as possible \u2014 from our open source contributors to how we engage with our customers and users. DEI Project Badging Program \u2013 In FY24, GitLab partnered with the Linux Foundation through the Community Health Analytics in Open Source Software (CHAOSS) project to enable open source projects to signal their focus on building and growing diverse communities. Digital Accessibility \u2013 At GitLab, we build understanding, empathy, and allyship around accessibility. We do this through various methods internally, including Inclusive Design Principles, Digital Accessibility Training, webinars, and workshops, to ensure that our Product and Engineering teams are equipped with the skills necessary to make our product more accessible. Inclusive Hiring \u2013 GitLab strives to create an equitable application, interview, selection, and offer process for all candidates to ensure we\u2019re building a diverse and inclusive workforce around the globe as the company continues to grow. DIB Working Group \u2013 A strategic group of impactful team members who collaborate to drive action and results in support of DIB. This includes promoting inclusive practices in areas such as name pronunciation, pronoun education, and meeting etiquette in an all-remote workplace. We followed through on our commitments and accomplished a lot in 2023, but we still have work to do. We are continuing to build DIB into every part of GitLab \u2013 both internally with our team members and externally with our customers, users, partners, and open source community. We have committed to four key objectives in FY25: Deliver our supplier diversity strategy \u2013 We have set an aspirational goal to double the number of suppliers categorized as diverse. To achieve this aspirational goal, we are engaging partners, strategically embedding diversity, inclusion and belonging practices into our procurement process, and evaluating our current suppliers\u2019 practices in line with applicable anti-discrimination principles. Increase representation \u2013 Extend our representation of team members from our Disabilities, Neurodivergence and LGBTQIA+  communities. We are working with several partners to help us achieve this goal including but not limited to, Unicorns in Tech, DisabilityIN, and Anita B. Org. Visit this Handbook page to learn more about how we select partners and measure success in attracting team members from these communities. Emerging Talent @ GitLab \u2013 Our mission is to attract, acquire, and activate talent to unlock their potential, connecting learning agility with employment opportunities, decoupled from academic-based prerequisites. This is anchored on the belief that building a balanced workforce will enable GitLab to scale effectively and inclusively, and that building a strong foundation today will greatly impact our future growth. Ensure inclusive leadership \u2013 Inclusive leadership is integrated into leadership development experiences and offered as voluntary resources to promote ongoing education and awareness. These experiences span all front-line and aspiring leaders in addition to VP and E-Group populations. (UN SDG #8) From the beginning, GitLab has been an open source project made possible by contributions from its community. Contributors to GitLab \u2014 the platform and the company \u2014 make up the GitLab community and are fundamental to GitLab\u2019s strategy and mission. The Developer Relations team supports GitLab\u2019s mission by working with our community to ensure they receive support and recognition for contributing to GitLab. This involves a multifaceted approach that includes creating educational content, organizing events and workshops, developing programs, and providing platforms for knowledge exchange and collaboration. The team focuses not only on promoting GitLab\u2019s features and capabilities but also on actively listening to and incorporating feedback from our community to inform product development and improvements. GitLab\u2019s Community Programs aim to put GitLab\u2019s most powerful features in the hands of communities that may not otherwise have the means to access them, helping them to grow and thrive. Members of the Community Programs team serve as liaisons, tracking the ways their respective communities prefer using GitLab and translating that knowledge into insights that help GitLab create a better product. While each program is unique in its organization and execution, benefits may include: Our key community programs include the following: For information on GitLab for Nonprofits, see Social Impact below. Finding an open source community to learn, connect, and grow with can be a challenge for many developers. To better align on best practices for building inclusive open source communities and to ensure that our DIB value is reflected in our contributor community, GitLab has partnered with the CHAOSS project to integrate GitLab with their recently released DEI Project Badging program. The DEI Project Badging program enables open source projects to: To learn more about how the program works and how GitLab and CHAOSS worked together to bring it to the wider community, see our blog post. In FY24, our Contributor Success Team sought to enhance community relations and contribute to sustainability by allowing teams to recognize contributors by sponsoring tree planting in lieu of traditional rewards like swag. Through a partnership with Tree-Nation, we have the ability to plant trees on behalf of others, and others can also pay to plant trees in our forest. Similarly, our Marketing team offers attendees at GitLab events the opportunity to plant trees through Rewards.Earth. (UN SDG #4 and 10) Launched in 2023, GitLab\u2019s Philanthropy Policy supports GitLab teams that want to engage in charitable giving and activities benefiting registered nonprofit organizations that align with GitLab\u2019s mission, values, and ESG strategy. By enabling teams to contribute to causes aligned with their work, we foster connections between GitLab\u2019s purpose and values and the opportunity to drive impact in the broader community. For example, in FY24: During FY24, we also launched our in-kind donation program, GitLab for Nonprofits, which gives free GitLab licenses to registered nonprofit organizations that align with our values and ESG strategy. Nonprofits accepted into the program are provided a free Ultimate license for one year for up to 20 seats. In the first six months of the program, we granted licenses to more than 100 qualified nonprofits. \u201cGitLab is our canvas for workflow across our nonprofit organization. It allows us to do everything from planning and managing the workloads for our teams all the way to the CI/CD pipelines, which automate efforts ranging from routine tasks to platform deployments in our various environments. Whether it\u2019s documenting processes in place with issue templates or structuring organization-wide initiatives with interdependent issues, epics, and milestones, GitLab gives us the structure we need, with the flexibility to meet our unique needs.\" \u2013Mike Bowie, Chief Technology Officer, Last Mile Through our GiveLab program, we encourage team members to take part in volunteer initiatives that support and ultimately uplift their local communities. In FY24, GitLab provided virtual volunteer opportunities for team members through a partnership with SuitUp, a nonprofit that equips students for life beyond the classroom by partnering with schools/youth organizations and businesses to develop, organize, and implement engaging educational competitions in communities across the U.S. and beyond. \u201cWe extend our heartfelt gratitude to GitLab for their invaluable partnership with SuitUp in 2023. GitLab\u2019s commitment to youth education has not only paved a clear pathway for our students\u2019 success, but has opened abundant opportunities for their development in STEM careers and beyond. We are deeply thankful to the GitLab team for their dedication and the transformative impact they have had on the lives and futures of our SuitUp students across the globe.\u201d \u2013Kelsey English Smith, SuitUp\u2019s Interim Chief Executive Officer GitLab is dedicated to supporting charitable organizations with missions that align with our company\u2019s values through the GitLab Foundation. Established in 2022, the GitLab Foundation focuses on supporting people to grow their lifetime earnings through education, training, access to opportunities, and systems change on a global scale. Its vision is a world in which one million more people can afford a better life. The GitLab Foundation is funded by GitLab and its CEO, Sid Sijbrandij. When GitLab went public in 2021, the Board approved a 1% share donation to capitalize the GitLab Foundation. In FY24, 1,635,545 shares of Class A common stock were registered to be issued to the GitLab Foundation. The GitLab Foundation is an independent nonprofit entity and its operations are autonomous from GitLab. To learn more, please visit the GitLab Foundation. (UN SDG #13) Around the world, many communities are already experiencing climate impacts such as warmer temperatures, more frequent severe weather events, and changes in water availability and other vital ecosystem services. With this in mind, GitLab is committed to doing our part to minimize our environmental footprint, including working to reduce GHG emissions associated with our operations. As a fully remote company, GitLab has no Scope 1 (direct) emissions or Scope 2 emissions from purchased electricity for company-owned facilities, meaning that 100% of our footprint comes from Scope 3 emissions. Our FY24 GHG inventory measures emissions associated with purchased goods and services (which includes cloud services), capital goods, employee commuting (which includes remote work), business travel, and investments (as defined under Category 15 of the GHG Protocol). Our emissions increased in FY24 partially due to improvements in our methodology. For FY24, we estimated emissions using the Comprehensive Environmental Data Archive (CEDA), a multi-regional economic and environmental database, as it better reflects the global nature of supply chains, helping capture differences in emissions profiles that vary significantly from one country to another. We also expanded our measurement to include emissions from investments (as defined under Category 15 of the GHG Protocol).  More detailed results of our inventory are available in the Performance Data Table. Our third-party assurance letter of our FY24 GHG inventory is available here. In FY24, we took steps to further understand our climate impacts and advance the development of a formal emissions reduction strategy. This included initiating GitLab\u2019s first climate risk assessment, to help us better understand climate-related risks and opportunities for our business. For more information on our climate risk assessment and scenario analysis, please see our TCFD Index. In FY24, we also launched a supplier engagement program with a focus on climate. As an initial step, we engaged our top 20 suppliers by spend who are not currently disclosing emissions data, asking them to start measuring their emissions and sharing the data publicly. We will be expanding the scope of the engagement to include more suppliers in FY25.\nIn FY25, we will continue working to establish GHG emissions reduction targets. We have also launched the first iteration of a team member sustainability guide with the goal of educating GitLab team members on how to be more sustainable. In January 2024, GitLab purchased and retired carbon removal credits worth 8,580 tonnes of CO2e. The purchase funds a reforestation program called Trees for Global Benefits, a long-running cooperative carbon offsetting program that combines community-led activities to increase carbon sequestration, encourage sustainable land-use practices, and provide farmers with performance-based payments. We also retired additional credits worth 877 tonnes of CO2e that were purchased in FY23. GitLab is strongly committed to good corporate governance practices, which provide an important framework within which our Board and executive leadership can pursue our strategic objectives for the benefit of our shareholders. The Board\u2019s duty is to serve as a prudent fiduciary for shareholders and to oversee the management of the company\u2019s business. To fulfill its responsibilities and discharge its duty, the Board follows the procedures and standards set forth by GitLab\u2019s Corporate Governance Guidelines and other governance documents. Board members\u2019 responsibilities include: The Board has an Audit Committee, a Compensation and Leadership Development Committee, and a Nominating and Corporate Governance Committee. The composition and responsibilities of each committee are described in our Proxy Statement and in the Investor Relations section of our website. Board committees oversee and review areas of risk that are particularly relevant to them based on their responsibilities and charters. GitLab\u2019s management regularly provides reports to support the Board\u2019s oversight obligations. This reporting cadence provides visibility and information regarding the identification, assessment, and management of critical risks and the company\u2019s risk mitigation strategies. The charter of the Nominating and Corporate Governance Committee tasks the committee with assisting the Board in overseeing company programs relating to corporate responsibility and sustainability, including ESG matters. GitLab\u2019s Senior Director, ESG, reports to the Chief Legal Officer (who is also the Head of Corporate Affairs and Corporate Secretary) weekly and to GitLab\u2019s executive leadership as needed. The Nominating and Corporate Governance Committee meets at least twice per year and ESG topics are discussed with this committee as well as with the full Board as needed. At GitLab, we recognize that to maintain trust and deliver the world\u2019s leading DevSecOps platform, security and privacy must remain our top priorities. Our information security and privacy practices reflect our dedication to safeguarding customer data and building security into the core of our product and our company. The GitLab Security Division\u2019s mission is to enable everyone to innovate and succeed on a safe, secure, and trusted DevSecOps platform. As part of this mission, the Security Assurance Department is responsible for monitoring and reporting on GitLab\u2019s compliance with various security frameworks and standards and for providing GitLab customers with a high level of assurance around the security of GitLab Cloud Services, which is comprised of GitLab.com and GitLab Dedicated. To help ensure that user information is protected, we employ a range of administrative, technical, and physical security controls. For more information on our security practices, please see our Technical and Organizational Security Measures for GitLab Cloud Services. We maintain various security certifications covering GitLab Cloud Services, including ISO/IEC 27001:2013, ISO/IEC 27017:2015, and ISO/IEC 27018:2019. In FY24, we expanded our compliance portfolio to include a SOC 2, Type II report for GitLab Dedicated and added TISAX AL-2 certification for GitLab Cloud Services. In January 2024, we enhanced customer access to assurance resources with the launch of the updated GitLab Trust Center. The Trust Center provides a single, unified location for communicating our compliance and assurance credentials, hosting our security and privacy documentation for customer consumption, sharing important notices, and hosting our internal knowledge base where customers can readily access the same answers we provide in questionnaire responses. This self-service approach not only provides customers with increased visibility of critical information but also enables them to accomplish security and risk reviews quickly and efficiently. GitLab\u2019s cybersecurity program was designed in alignment with industry standards and recognized best practices to identify, assess, and manage material risks from cybersecurity threats. Identified risks are assessed for criticality, prioritized for remediation, and reported by GitLab\u2019s security teams to various levels of our management. Our global incident response team iteratively evaluates security events for impact, using both qualitative and quantitative factors. Security incidents that are assessed as potentially material are escalated to designated members of our senior management and Board, as applicable. Our security program also accounts for potential cybersecurity risks associated with third parties with whom we do business. These risks are continually assessed throughout the vendor lifecycle, from onboarding to offboarding. We also engage in continuous monitoring of our cybersecurity risks and perform security assurance activities via independent, external third parties such as consultants, auditors, and assessors during our robust security certification audits, penetration tests, and bug bounty programs. The Audit Committee has oversight responsibility for risks and incidents relating to cybersecurity threats, including compliance with disclosure requirements and related effects on financial and other risks, and it reports any findings and recommendations, as appropriate, to the full Board for consideration. Management is responsible for and regularly discusses identifying, assessing, and managing material cybersecurity risks on an ongoing basis through programs led by the Chief Information Security Officer, the Chief Legal Officer, and the Chief Financial Officer. For more information, see our FY24 Form 10-K and our GitLab Trust Center. GitLab is fully committed to protecting the personal data of its customers, team members, suppliers, and other stakeholders in accordance with global comprehensive data privacy laws. We take the privacy of personal data very seriously and have initiated a variety of methods and controls so that we know what data we collect and hold and that it is protected appropriately. Our Privacy Statement provides details on how we collect, share, use, and protect personal information and on the choices that customers and users have regarding their personal data. Users also have the right to access, correct, restrict, or delete personal data and to port personal data to another company. Although legal and regulatory requirements related to data privacy may vary by jurisdiction, GitLab provides users with the same rights and choices no matter where they live. For more information on our privacy practices, see our Privacy Statement. The Privacy Team (part of GitLab\u2019s Legal and Corporate Affairs Team) provides support and guidance to uphold consistent business processes around the protection of personal data. Privacy Team members collaborate cross-functionally and serve as advocates to ensure that the data privacy practices of GitLab meet the needs of our cross-functional partners and are continually balanced with an ever-changing global data privacy and protection landscape. The GitLab Data Classification Standard defines data categories and provides a matrix of security and privacy controls for the purposes of determining the level of protection to be applied to GitLab data throughout its lifecycle. As part of our commitment to privacy, GitLab ensures that, where appropriate, projects and personal data processing activities are subject to Privacy Reviews and a Data Protection Impact Assessment (DPIA) as key components of a \u2018Privacy by Design\u2019 approach. GitLab\u2019s product mission is to consistently create products and experiences that users love and value. We believe this includes our responsibility to design inclusive products that aim to provide access to content and functionality that enables consumption and contribution from everyone. Our product principles guide us in developing products consistent with the approach of other world-class product organizations. We strive to set an example by empowering our wider GitLab community to build and work with the highest levels of security through our DevSecOps platform. This extends to how we are incorporating artificial intelligence (AI) and continuously evolving the platform to enable secure, responsible development. GitLab is dedicated to responsibly building artificial intelligence (AI) into and throughout our comprehensive DevSecOps platform. We offer GitLab Duo, a full suite of AI capabilities across the GitLab platform so that our customers can ship better, more secure software faster. GitLab Duo follows a privacy- and transparency-first approach to help customers confidently adopt AI while keeping their valuable assets protected. As we work to integrate new AI-powered features into the platform, we do not simply adopt the latest advancements for their own sake. Instead, we take a strategic, intentional approach, ensuring that the features we add have a clear purpose, appropriate controls, and safeguards to protect users\u2019 data. This includes a policy not to use customers\u2019 or users\u2019 AI inputs to train any language models without their instruction or prior consent. In early 2024, we launched the GitLab AI Transparency Center to enable our customers to confidently unlock the enormous potential of AI and emphasize our customer-centric approach to responsible AI development and deployment. The AI Transparency Center currently includes GitLab\u2019s AI Ethics Principles for Product Development, AI Continuity Plan, and AI features documentation. The principles and policies in our AI Transparency Center govern how we responsibly select AI models to use based on an extensive model evaluation process. The launch of the center was a cross-functional effort led by the Legal and Corporate Affairs (LACA) team in partnership with the Product, Security, and Marketing teams. Our commitment to responsible product development also encompasses how we support customers in ensuring security and responsibility throughout the software development lifecycle. GitLab\u2019s security and governance capabilities include a wide range of controls, such as automatic scanning of project dependencies for security vulnerabilities, license compliance, and other risks; vulnerability management and security scanning; security and compliance policies; and comprehensive anti-abuse tools. In FY24, we introduced several enhancements, including support for custom roles, expanded security policies, improved security scanner accuracy, and support for group-level dependency lists for centralized dependency management. The incorporation of end-to-end continuous integration and delivery (CI/CD) features in GitLab supports the default integration of best practices, empowering users to focus on developing code with speed, security, and quality in mind. This includes automated code testing capabilities that make software development easier, faster, and less risky for developers. In FY24, we continued to enhance GitLab\u2019s CI/CD offering with new features such as components, preconfigured CI/CD files that automate the process of building, testing, and deploying software applications, and expanded runner machine types to enable faster CI/CD pipelines. We also improved key GitLab features such as variables and secrets, helping users make more informed decisions about their data and application security while also supporting the best practices in design and secure workflows. GitLab is committed to the highest standards of legal and ethical business conduct. It has long operated its business consistent with operating principles and policies that reinforce this commitment. GitLab complies with all laws and regulations that are applicable to its activities and expects all team members to adhere to our ethical standards and legal and regulatory obligations. These expectations are reflected and reinforced by our Code of Business Conduct and Ethics (\u201cCode of Conduct\u201d) and various supporting policies, procedures, and other resources (collectively, \u201cCompliance Standards\u201d). In FY24, we centralized our compliance efforts. The Ethics and Compliance Program, is designed to help GitLab team members maintain its culture of compliance and to promote ethical decision-making by: The Board, through its Audit Committee, is responsible for administering the Code of Conduct, and for addressing material issues and risks concerning Compliance Standards and applicable laws and regulations. The Audit Committee has delegated day-to-day responsibility for administering and interpreting the Code of Conduct to GitLab\u2019s Chief Legal Officer. Each team member is responsible for reading, understanding, and ultimately complying with GitLab\u2019s Compliance Standards. Team members are expected to deal honestly, ethically, and fairly with customers, partners, suppliers, competitors, and other third parties. GitLab expressly prohibits team members from violating applicable laws and regulations, and any team member who does so may face disciplinary action, up to and including dismissal (subject to local law). To memorialize and reinforce GitLab\u2019s expectations, we require each team member to review and acknowledge our Code of Conduct on an annual basis. Team members are educated on GitLab\u2019s policies and procedures and related laws and regulations through continuous training, both at onboarding and throughout the year, and awareness campaigns. Team members are encouraged to ask questions about our policies and seek guidance when necessary through various avenues, including a Slack channel dedicated to ethics and compliance. GitLab strives to foster a work environment in which ethical issues and concerns may be raised and discussed with supervisors or others without fear of retribution. If a team member becomes aware of a suspected or actual violation of law, regulation, or GitLab Compliance Standards, they have a responsibility to promptly report their concern in accordance with GitLab\u2019s Whistleblower Policy and Code of Conduct. GitLab offers team members a variety of ways to report suspected or actual violations. Team members may raise their concerns orally or in writing to their direct supervisor or manager, to GitLab\u2019s Chief Legal Officer, or to the Audit Committee. At any time, team members may also submit reports using EthicsPoint, a GitLab-provided tool that is available 24 hours a day and allows for anonymous reporting about conduct addressed in the Code of Business Conduct and Ethics. Reports to EthicsPoint can be submitted using a toll-free hotline or through the EthicsPoint website. In addition to EthicsPoint, GitLab has engaged Lighthouse Services to provide an anonymous hotline for team members to submit reports involving team member relations. GitLab treats all reports seriously. Notification of reports submitted via EthicsPoint is automatically provided to the Chief Legal Officer and Chairperson of the Audit Committee and those reports are promptly and thoroughly investigated by qualified personnel at the direction of the Chief Legal Officer, as appropriate. Reports involving team member relations are reported to the People Group team. GitLab\u2019s commitment to legal and ethical conduct extends to its suppliers, contractors, resellers, agents, and consultants (collectively,  \u201cPartners\u201d). GitLab expects all Partners, their employees, sub-suppliers, and any other party involved in the execution of GitLab work to comply with all applicable laws, regulations, and the standards set forth in GitLab\u2019s Partner Code of Ethics, which includes standards relating to ethical conduct, including human rights and labor, health and safety, bribery and corruption, environmental impacts, and more. For questions regarding GitLab\u2019s ESG report and data, please contact ESG@GitLab.com. This report contains forward-looking statements within the meaning of the federal securities laws. These statements involve assumptions and are subject to known and unknown risks and uncertainties that could cause actual results to differ materially from those discussed or anticipated. For a complete discussion of risk associated with these forward-looking statements in our business, please refer to our SEC filings, including our most recent quarterly report on Form 10-Q and our most recent annual report on Form 10-K. Our forward-looking statements are based upon information currently available to us. We caution you to not place undue reliance on forward-looking statements, and we undertake no duty or obligation to update or revise any forward-looking statement, or to report any future events, or circumstances or to reflect the occurrence of unanticipated events. Additionally, this presentation contains information related to upcoming features and functionality. It is important to note that the information presented is for informational purposes only, so please do not rely on the information for purchasing or planning purposes. Just like with all projects, the items mentioned during the presentation are subject to change or delay, and the development, release, and timing of any products, features or functionality remain at the sole discretion of GitLab."
    },
    {
        "title": "About the Handbook",
        "url": "https://handbook.gitlab.com/handbook/about/",
        "content": "The handbook started when GitLab was a company of just ten people to make sharing information efficient and easy.\nWe knew that future GitLab team-members wouldn\u2019t be able to see emails about process changes that were being sent before they joined and that most of the people who would eventually join GitLab likely hadn\u2019t even heard of us yet.\nThe handbook was our way of ensuring that all of our company information was accessible to everyone regardless of when they became part of the team. At GitLab our handbook is extensive and keeping it relevant is an important part of everyone\u2019s job.\nIt is a vital part of who we are and how we communicate.\nWe established these processes because we saw these benefits: One common concern newcomers to the handbook express is that the strict documentation makes the company more rigid.\nIn fact, writing down our current process in the handbook has the effect of empowering contributors to propose change.\nAs a result, this handbook is far from rigid. You only need to look at the handbook changelog to see the evidence. Every attempt is made to document guidelines and processes in the handbook. However, it is not possible to document every possible situation or scenario that could potentially occur. Just because something is not yet in the handbook does not mean that it is allowed. GitLab will review each team member\u2019s concern or situation based on local laws to determine the best outcome and then update the handbook accordingly. If you have questions, please discuss with your manager or contact the People Success team. The handbook is subject to interpretation. We do our best to be as clear as possible to minimize confusion and/or misinterpretation. We also recognize that we have a global audience and that may bring different interpretations. If you have any questions or need further clarification please check with the content owner of the page. When in doubt please reach out and ask. Remember that everything is in draft at GitLab and subject to change, this includes our handbook. It\u2019s easy to see that the handbook is large, but have you ever wondered just how large?\nThe handbook is over two thousand pages long. That\u2019s a lot of good info! Word and page counts are determined through a simple two-step process: Note: If you need to go back to an earlier version of the handbook, use git checkout `git rev-list -n 1 --first-parent --before=\"2021-07-02 00:00\" master`  specifying the next day after the day you want. On this page you can see handbook trends and discover popular pages that you may not know about. GitLab uses Snowplow to track handbook usage; the information can be viewed on Tableau. We\u2019ve gathered some information about the handbook here, but there\u2019s still more elsewhere. This area has traditionally been referred to as \u201cthe handbook\u201d, but over time has grown in scope to include multiple sites, projects, repos, and types of content. Therefore, we are using the term \u201ccontent websites\u201d here to avoid ambiguity and properly frame discussions around this scope of responsibility. See our direction page for more. If you need help, please see the editing handbook section, or escalation information if it\u2019s urgent. The GitLab Handbook is the single source of truth for how we operate at GitLab, including processes, policies, and product direction. In keeping with our value of transparency, the GitLab Handbook is entirely open to the world. We welcome feedback from the community and hope that it serves as inspiration for other current or future companies. The GitLab Handbook is also an incredible talent acquisition tool, providing candidates with valuable insight into how GitLab runs as a company. For information on team members\u2019 roles and responsibilities, see Content Websites page. The Handbook is a critical part of empowering team members to do their jobs effectively. As such, we have a group of team members who assist in resolving issues affecting all team members. If you\u2019re looking for general help, please see the editing handbook page. Any issues should be reported in the #handbook-escalation channel in Slack. GitLab\u2019s general communications practices are detailed at GitLab Communication, but beyond those we do have some channel-specific guidance available.\nSee the list of resources below for links to other guides. Handbook style guidance is covered primarily by the handbook markdown guide,\nand the editing handbook page. In the absence of handbook-specific guidance, follow:"
    },
    
    {
        "title": "Handbook Escalation",
        "url": "https://handbook.gitlab.com/handbook/about/on-call/",
        "content": "For information on team members\u2019 roles and responsibilities, see Content Websites page. The Handbook is a critical part of empowering team members to do their jobs effectively. As such, we have a group of team members who assist in resolving issues affecting all team members. If you\u2019re looking for general help, please see the editing handbook page. Any issues should be reported in the #handbook-escalation channel in Slack. Issues should only be escalated if it relates to: If after posting in #handbook-escalation, you are not receiving a response, please ping the issue triager if it\u2019s within their working hours. If they are not available, the following team members (in the table below) have volunteered to assist when available. Please take into consideration the listed timezone where they are generally located and their Slack status on whether they\u2019re out of office. Additionally, any GitLab team member can volunteer to join the #handbook-escalation channel and help out. The Handbook On-Call deals specifically with matters relating to the content-sites projects.\nIf a reported issue relates to the GitLab product or the infrastructure running the handbook then it should be escalated to the Reliability Engineering team.\nTo report an incident follow the instructions on the Incident Management page: https://handbook.gitlab.com/handbook/engineering/infrastructure/incident-management/#reporting-an-incident Please see the handbook editing page for guidance and examples. All broken CI pipelines for the main branch of the handbook repository are automatically posted in the Slack channel.\nThese reports should be investigated and addressed where needed. Once a report has been looked at, please leave a comment stating the nature of the problem, action taken and add a \u2705 reaction to the message to show that it has been handled. If for some reason there is a large amount of failures resulting in spamming the channel, the error reporting can be turned off in the repository settings: https://gitlab.com/gitlab-com/content-sites/handbook/-/settings/integrations To see the status of the merge train (useful when team members are reporting that their MRs seem \u2018stuck\u2019 on the train), see this issue to check the status and perform a workaround, if necessary. TL;DR for workaround: If the first/oldest MR iid in the FIFO list (sort=asc by ID) is actively running a pipeline and eventually gets merged, then things are moving along, just slowly.  If the first one in the list isn\u2019t currently running any pipeline, remove it from the train and re-add it (it should go to the end). While the handbook is no longer on about.gitlab.com, some of the information in the runbook for about.gitlab.com incident handling may be helpful."
    },
    {
        "title": "GitLab Handbook Usage",
        "url": "https://handbook.gitlab.com/handbook/about/handbook-usage/",
        "content": "Sometimes you want to have real time editing of a proposal during a meeting and you need to use a Google Doc for that. When doing so the first item should be the URL of the handbook page this content will be moved to when the meeting is over. Documenting in the handbook before taking an action may require more time initially because you have to think about where to make the change, integrate it with the existing content, and then possibly add to or refactor the handbook to have a proper foundation. But, it saves time in the long run, and this communication is essential to our ability to continue scaling and adapting our organization. This process is not unlike writing tests for your software. Only communicate a (proposed) change via a change to the handbook; don\u2019t use a presentation, email, chat message, or another medium to communicate the components of the change. These other forms of communication might be more convenient for the presenter, but they make it harder for the audience to understand the context and the implications for other potentially affected processes. Having a \u201chandbook first\u201d mentality ensures there is no duplication; the handbook is always up to date, and others are better able to contribute. Beyond being \u201chandbook first,\u201d we are also \u201cpublic handbook first.\u201d When information is internal-only, it should be captured in the internal handbook, but we default to the public handbook for anything that can be made public. This ensures that everyone has access to any information that can be SAFEly shared. This supports the GitLab values, including transparency, efficiency, and results. It also protects against the internal handbook becoming a home for information that should otherwise be public or a conflicting or duplicative source of truth. When asked during an INSEAD case study interview (shown above) about challenges related to being all-remote, GitLab co-founder and CEO Sid Sijbrandij provided the following reply. The biggest problem is GitLab not working handbook first. We have an amazing handbook that allows us to collaborate, onboard new people, and think collectively. However, it is counterintuitive to communicate changes to the handbook. The default of people, when they wish to communicate a change, is to send a Slack message, send an email, give a presentation, or tell people in a meeting \u2014 anything but make a change in the handbook. It\u2019s slower for them. It\u2019s quicker to use any other form. If they make a change in the handbook, they first have to find the relevant part of the handbook, they sometimes have to adjust the handbook to make sure their change will fit in, they have to go through a technical process and a review or two, and they have to wait a bit before it\u2019s deployed. It\u2019s slower than any other option. However, it allows people that commit a change after that to build upon a change. When they take that extra time, it\u2019s building a foundation for the next thing. I think of it as brick laying. Every piece of information is a brick. At GitLab, there is a well-structured house, and everyone adds to that one house. Because we\u2019re pretty particular on how we build it, it has a strong foundation and we can build it very high. In every other company, they send the brick into the hands of people. Everyone is receiving bricks daily that they have to add to the house they\u2019re building internally. They forget things and things are unclear. A lot of context has to be created because there is no context around where to place the bricks. So, you can end up with a thousand houses that look quite different, that are all hanging a bit, and each time you add a brick to the top one pops out at the bottom. \u2014 GitLab co-founder and CEO Sid Sijbrandij The handbook is focused on any content that GitLab team members need to do their job. For other content that might be useful, link to the other source. Please follow these guidelines and remind others of them. Presentations are great for ephemeral content like group conversations and board presentations. Evergreen content like a leadership training should be based on the handbook. This is an important element of working handbook-first. In the creation of presentations for evergreen content, please screenshot the handbook and provide links to displayed pages rather than copy and pasting content (or formatting a slide specifically to mirror handbook information). This approach shows a bias towards asynchronous communication, and rationale for this is below. The presentation will look less polished, but the advantages outweigh that concern. If a synchronous presentation is required, default to sharing your screen and viewing live handbook pages over a slide presentation. Every GitLab Handbook page has a search field near the top of the page for searching.\nSee the Searching GitLab like a pro page for tips on searching the handbook faster and more efficiently. To change a guideline or process, suggest an edit in the form of a merge request. When working to get your change merged quickly, make sure you are asking the appropriate team members with merge rights. Not sure who is responsible? Consult (and add to) the CODEOWNERS file in the relevant project. After it is merged you can post this in the #whats-happening-at-gitlab slack channel if applicable. You can remind other people of this by asking \u201cCan you please send a merge request for the handbook?\u201d When substantially changing handbook layout, please leave a link to the specific page of the review app that is directly affected by this MR. Along with the link, include as much info as possible in the MR description. This will allow everyone to understand what is the purpose of the MR without looking at diffs. Keeping up with changes to the Handbook can be difficult, please follow the commit subject guidelines with a particular focus on your merge request\u2019s title, to ensure someone reading the Handbook Changelog can quickly understand the MR\u2019s content. Communicate process changes by linking to the merged diff (a commit that shows the changes before and after). If you are communicating a change for the purpose of discussion and feedback, it is ok to link to an unmerged diff. Do not change the process first, and then view the documentation as a lower priority task. Planning to do the documentation later inevitably leads to duplicate work communicating the change and it leads to outdated documentation. You can remind other people of this by asking \u201cCan you please update the handbook first?\u201d When feasible, introduce process changes iteratively. It is important that you contribute to the handbook by making small merge requests. This will help gain adoption among the process\u2019s intended audience. We want to avoid significant process changes that are unnecessarily large, top-down, and disruptive. These types of process changes can disempower DRIs and cause people to focus on process rather than results. Like everything else, our processes are always in flux. Everything is always in draft, and the initial version should be in the handbook, too. If you are proposing a change to the handbook, whenever possible, skip the issue and submit a merge request. (Proposing a change via a merge request is preferred over an issue description). Mention the people that are affected by the change in the merge request. In many cases, merge requests are easier to collaborate on since you can see the proposed changes. If something is a limited test to a group of users, add it to the handbook and note as such. Then remove the note once the test is over and every case should use the new process. If someone inside or outside GitLab makes a good suggestion invite them to add it to the handbook. Send the person the URL of the relevant page and section and offer to do it for them if they can\u2019t. Having them make and send the suggestion will make the change and will reflect their knowledge. When you submit a merge request, make sure that it gets merged quickly. Making single, small changes quickly will ensure your branch doesn\u2019t fall far behind master, creating merge conflicts. Aim to make and merge your update on the same day. Mention people in the merge request or reach them via Slack. If you get a suggestion for a large improvement on top of the existing one consider doing that separately. Create an issue, get the existing MR merged, then create a new merge request. If you have to move content have a merge request that moves it and does nothing else. If you want to clean it up, summarize it, or expand on it do that after the moving MR is merged. This is much easier to review. Try to add the why of a handbook process, what is the business goal, what is the inspiration for this section. Adding the why makes processes easier to change in the future since you can evaluate if the why changed. When adding or changing a process in the engineering workflow, consider scheduling a retro X months out. The retro is an opportunity to consider the effects of the new process and determine if it needs further iteration or can be removed. While not a requirement, it can be useful to schedule an async retro MR/issue X months out after the introduction of a new process. Consider identifying an improvement target and timeframe to determine what success is. You can use the retro MR/issue to transparently communicate expectations as well to provide a means to iterate or remove the new process. The creation of the retro MR/issue is an opportunity to think through: The retro itself is an opportunity to document: Think about the information architecture to eliminate repetition and have a Single Source of Truth (SSoT). Instead of repeating content cross-link it (each text has a hyperlink to the other piece). If you copy content please remove it at the origin place and replace it with a link to the new content. Duplicate content leads to more work by having to update the content in multiple places as well as the need to remember where all of the out of date content lives. When you have a single source of truth it\u2019s only stored in a single system.\nMake sure to always cross-link items if there are related items (elsewhere in the handbook, in docs, or in issues). A system of record (SoR) is the authoritative data source for a given data element or piece of information. It\u2019s worth noting that while it is possible to have a system of record that is also a single source of truth, simply just being a system of record doesn\u2019t directly imply it is the single source of truth. The handbook is organized by function and result to ensure every item in it has a location and owner to keep it up to date. Read through these style guidance below and the Writing Style Guidelines before editing the handbook. Keep your handbook pages short and succinct. Eliminate fluff and get right to the point with the shortest possible wording.\nKeep in mind that the biggest challenge cited by new employees is the vast amount of information to take in during onboarding. If a page includes more than two headings (especially if it\u2019s larger than a single \u201cscreen\u201d), add an automatically generated Table of Contents (ToC) by copying line 6 to 10 in this MR.\nHeadings should have normal capitalization: don\u2019t use ALL CAPS or TitleCase.\nAfter a heading, leave one blank line; this is not required in the standard, but it is our convention. Preference contributable diagrams over uploading images or other less contributable diagrams. This makes it easier for other people to suggest changes and contribute. Diagram options in Markdown include Mermaid and PlantUML. In an all-remote, asynchronous organization, each team member should practice handbook first. For more information on what it means to be handbook first, please refer to the why handbook first section of this page. Skills and behaviors of handbook first as a Team Member: Skills and behaviors of handbook first as a People Leader: It is each department and team member\u2019s responsibility to ensure the handbooks (public handbook, and internal handbook) stay current. The content in the handbook should be accurate and follow the same format as outlined in the Guidelines. For questions on who to submit a merge request to, or assistance with the handbook, please reach out on the #handbook Slack channel. If you need permissions to directly commit changes to the handbook, please submit a New Access Request issue and follow the process for access approval. Request a \u2018Maintainer\u2019 role for the appropriate handbook. You need developer access to the relevant handbook project to merge MRs. All team members should have developer access by default. This page contains some tips and guidelines that you should keep in mind when merging. You should feel confident merging any changes that pass the pipeline without worrying that you will break the handbook. The tests in the pipeline are designed to catch any major problems. The handbook projects are configured so that changes cannot be merged unless the pipeline passes. In the event that code is merged that does break the handbook in some way, follow the instructions for reporting an issue to the Handbook on-call team. Do not use the merge immediately feature! Even if your MR is important and time-sensitive, using this feature will create a lot of pain for everyone else. This feature should only be used when critical public information needs to be sent live as quickly as possible and should be approved by PR or Legal. If you don\u2019t have PR or Legal approval, don\u2019t use this feature. More context on the technical reasons behind this: Getting pinged to approve every small change to your page can be annoying, but someone changing a policy or procedure in the handbook without proper approval can have strong negative consequences. Use your best judgement on when to ask for approvals. Whenever reasonable, practice responsibility over rigidity. When you expect a page owner will appreciate your changes, go ahead and merge them without approval. Always ping the code owners with an @mention comment to inform them of the changes. They will be happy their page was made better and they didn\u2019t need to waste time reviewing and approving the change. In the event that something isn\u2019t an improvement, we practice clean up over sign off. Whenever appropriate, e.g. publishing a previously internal-only document, get approval from the code owner using the approval feature before merging changes. Each page in the handbook shows the code owner listed under \u201cMaintained by\u201d. The maintainer information and for list of groups that maintain a page, see the relevant codeowners file. The page\u2019s code owner is the DRI for the page and has the final say for what appears in the handbook. When in doubt, get the DRI\u2019s permission before changing their page. Don\u2019t worry if the DRI is a C-level person. You can still assign your MRs to them, even if you are an individual contributor. This is because we prefer to communicate directly. Unless it\u2019s a small change like a typo, always have another team member review your changes before you merge them. Being a maintainer gives you access to much more than just the ability to merge. You can see a full list of permissions in the docs. Keep in mind that you\u2019ll have access to a broad set of settings and configuration for the project. Don\u2019t adjust any settings or make any structural changes. Do not grant people maintainer access without an Access Request. As a maintainer you have the ability to grant others maintainer access. Don\u2019t do so without following the Access Request process to garner the appropriate approvals and create the necessary documentation. The description templates for issues and merge requests in the various projects are respectively located in the .gitlab/issue_templates and .gitlab/merge_request_templates directories, and can be edited and changed with a new merge request. Changes to the default templates in Default.md require review by the Office of the CEO or the CEO. See .gitlab/CODEOWNERS for the current list of approvers. As a company, we are public by default, but there are things that we cannot discuss publicly. The Internal Handbook is a space where team members can share internal information. Anything that is not considered internal only, should be in GitLab\u2019s public handbook. Anything that is limited access should not be added to the internal handbook as the internal handbook is accessible by all team members. Only add items to the internal handbook that fall into the not public category. Everything else should be added to our public company handbook. All team members have access to the internal handbook through Okta as baseline access during onboarding. Login to your Okta dashboard and click on the  GitLab Internal Handbook tile. You will have to authenticate with Okta first. The Engineering team and all sub-teams track Handbook Update Frequency as a KPI, with varying targets per team. Currently, Engineering is the only Division tracking Handbook update frequency, so as to analyse and observe the effectiveness of this KPI. Remember that, like virtually everything we do, our handbook is open source, and we expect that other companies may use it as inspiration for their own documentation and practices. That said, the handbook should always be specific on what we do, not who we want to be, and every company will need to fill out their own handbooks over time. Our handbook falls under the Attribution-ShareAlike 4.0 International license. If your company has been inspired by GitLab\u2019s handbook, we would love to know what inspired you. Please see our Inspired by GitLab page. Another company asked how we managed to work with the handbook because at their company it wasn\u2019t working: \u201cThere are many occasions where something is documented in the knowledge base, but people don\u2019t know about it because they never bothered to read or search. Some people have a strong aversion against what they perceive as a \u2018wall of text\u2019.\u201d We attempt to cover this in GitLab\u2019s guide to embracing a handbook-first approach to documentation. To ensure that people\u2019s time is well spent looking at the handbook we should follow the \u2018handbook guidelines\u2019 above, and also: Company handbooks frequently start as wikis.\nThis format is more comfortable for people to work in than a static website with GitLab Merge Requests and GitLab Pages.\nHowever wikis tend to go stale over time, where they are badly organized and get out of date. In wikis it is impossible to make proposals that touch multiple parts of a page and/or multiple pages. Therefore it is hard to reorganize the handbook. Because GitLab Merge Requests and GitLab Pages are based on distributed version control you can split the role of submitter and approver. This allows for a division of work that keeps the handbook up to date: Wikis also do not encourage collaboration on changes, because there is no way to discuss a proposed change like there is with merge requests. Some wikis make it hard to view and/or link to diffs of changes, which is needed to communicate decisions."
    },
    {
        "title": "Handbook Development",
        "url": "https://handbook.gitlab.com/docs/development/",
        "content": "The handbook site uses Hugo for static page generation\nfrom Markdown. The handbook uses a base theme called Docsy. A custom theme override\nis located in the Docsy GitLab Theme\nproject and automatically included in the handbook setup. For help and support with the development environment, please reach out in the public\n#handbook Slack channel. If you encounter a problem or bug, please open an issue or MR in the respective handbook projects. Follow the editing the handbook documentation. The Markdown files get parsed by Hugo, and converted into static HTML files, including all assets (JS, CSS, images, etc.).\nThe static files are uploaded to GitLab Pages. There are four internal projects and one external project used in the process of building and deploying the internal and external handbooks. Review the Hugo development documentation to learn more. To minimize maintenance, a small number of group and project access tokens are used.\nThis overview is not meant to be a comprehensive list. Search in this and other development documentation pages for details on the individual access tokens. A \u201czap\u201d (internal) (use shared 1Password sign in) has been configured with a group level webhook to notify the #handbook-escalation channel. Due to its reliability, you may want to consider creating an issue, or some other reminder. The handbook monitor project runs a pipeline every 10 minutes (see pipeline schedule) to check if the handbook is \u201cup\u201d using hurl. If the job fails, the pipeline will post to the #handbook-escalation Slack channel. Note: Internal handbook is not monitored in this way as there is a blocking issue. See internal-handbook#90.\nSimilarly, the request for integrating the handbook to infra\u2019s monitoring is pending. See docsy#14 for more information. Notices are also posted in that channel when pipelines fail on the main branch of the handbook projects. Supported methods: Cloning the repository allows you to manually edit the handbook locally. If you prefer to use the Web IDE, please continue reading the editing the handbook documentation. We recommend using git to clone the repository and then editing the handbook with a text editor such\nas Visual Studio Code, Typora,\nNova or Sublime to name a few. Clone the repository: Public handbook: Internal handbook: Docsy GitLab theme: After cloning the repository, sync the required data files from the\ndata file location (currently the www-gitlab-com repository).  Without this\nstep, the handbook cannot be run locally. Open a terminal, navigate into the cloned handbook repository path, and run the sync-data.sh script. Example for the public handbook: Hugo needs to be run to generate the static files from the handbook markdown content. When installing Hugo, review the CI file of the relevant handbook repository for the version of Hugo in use. The latest version may or may not work. There are two ways to run Hugo: The handbook is huge, and by default, the hugo server command loads everything to memory. The following options for the hugo command can be helpful for debugging or otherwise running locally: To render the entire site to disk (and inspect the output in ${PWD}/public),\npurge the generated files first, and then run Hugo. For some pages to render you may need a personal access token.\nGenerate one and export it as an environment variable prior to running hugo commands: If you need to make changes to the underlying theme you\u2019ll need to make changes in the Gitlab-Docsy module. To enforce rules and guidelines, we use: Once an error is encountered, the relevant job fails and a comment is added to the merge request with a list of errors, with guidance for the suggested fix.\nWarnings and suggestions are not reported in the comment, but are in the code quality report. Currently, all configuration and script files exist in each repository. See configuration file sync issue. The custom handbook lint script (handbook version) is used to verify a number of the guidelines we have, including: We use Hugo lint to check for the validity of internal links. It supports relative linking to the markdown file, and the production path. Each job also outputs the top 30 incorrect links to assist in fixing them. See the ReadMe for more information about how Hugo lint works. Refer to the markdown guide for style guide information, and guidance on rules. We use markdownlint-cli2 in our pipelines with a slightly customized set of rules.\nBefore pushing any changes, you can run markdownlint-cli2 and fix any suggested changes to avoid pipeline failures. To run markdownlint-cli2 using Docker, run: If you have markdownlint-cli2 installed locally, you can run the command in the relevant repository.\nThis method is recommended when editing the config file (look for the markdownlint file), and testing the changes. To have markdownlint automatically fix some errors,\nadd the fix option: Rules are configured to be close to the GitLab documentation markdownlint, without some of the stricter styling rules.\nThe relevant rules are also noted in the markdown guide. We use Vale to verify some of the rules in the Handbook Markdown Guide. Vale errors will fail the pipeline and are included in the MR comment.\nWarnings are included in the job log, code quality, and MR diff. To run Vale using Docker, run: If you have vale installed locally, you can test the changes. To limit the results, add the minAlertLevel option, such as: Rules are configured to be close to the GitLab documentation vale rules.\nWhen the gitlab_base rules are exactly the same, they are included in the gitlab_base folder in the content sites repositories.\nWhen the rules differ, they are stored in the handbook folder. Docsy is used as a base for the internal and public handbooks. Modifications\nand extensions have been added on top to ensure efficient handbook usage. All Hugo partials and shortcodes should be added to this repository, instead\nof duplicating them locally into the handbook projects. The Docsy GitLab theme\nis integrated into the public/internal handbook repositories using a Go module in\ngo.mod. To develop on the Docsy GitLab theme locally build the handbook (or internal-handbook) project with the updated local copy of the docsy-gitlab theme following the steps below: Add the following line to the bottom of the go.mod file in the handbook project: Run the Hugo server: Load the site locally: Any changes made to files in local docsy-gitlab project will be rendered in the local instance. When making changes that may have a user impact (not content only changes): Changes made to docsy-gitlab will be made available to the handbook and internal-handbook after the version is bumped and deployed to each project. This includes all theme updates with partials, shortcodes, and any changes to /docs. Much of this process has been automated, but a few manual steps are still required. To release a docsy-gitlab change follow these steps: For more information on the release process, see the release script. Note: Before updating dependencies, review the go.mod file in the target\nproject for additional notes and requirements. Always update dependencies individually to isolate potential bugs and regressions. Never pull latest\nbut pin the dependencies to a specific released version. Do not bump Docsy versions without testing them extensively in MR review apps. You can add redirects to the layouts/index.redirects file in the relevant repository.\nRefer to the GitLab Pages redirect documentation\nfor how these are formatted. Please add your redirect in chronological order with a removal date of: The CI/CD pipelines for the handbook and internal-handbook projects are roughly the same, and should remain that way. The build stage performs a few linter and security jobs (handbooklint, hugolint, markdownlint, and secret_detection), and a build job which builds the whole site and saves it as CI artifacts. The deploy stage uses the artifacts generated in the build stage to deploy the production site for changes to the main branch or review apps which can be deployed for MRs. The notify stage has two jobs that are triggered on specific events: The pipelines can be triggered to run in $BUILD_AND_TEST_ONLY mode which means they will run all the test and build jobs, but none of the deploy or notify jobs. A pipeline can be triggered in $BUILD_AND_TEST_ONLY mode by setting the $BUILD_AND_TEST_ONLY CI variable to true. This is used primarily by the downstream pipelines triggered from the www-gitlab-com project. Tools or scripts that need to interact with the repositories to perform handbook tasks should use the GITLAB_TOKEN CI variable. This is group level access token called Docsy GitLab Release with a developer role and has api and write_repository scopes. This token will expire after a year and will need to be refreshed. Follow the steps below to refresh the token: See above for more on general management of access tokens. The deploy and review apps are configured in the pages job in the .gitlab-ci.yml configuration file. Review app deploys can be run for merge requests by running the manual pages job, or by adding the ~\"deploy-review-app-always\" label to the MR. Production deploys are only run from the main branch. Conditional CI variables are used to configure the environment for review apps using GitLab Pages Multiple Deployments. The route map is configured in the .gitlab/route-map.yml. The CI/CD pipeline for docsy-gitlab is responsible for building, testing, and releasing the Docsy GitLab theme used by both handbook and internal-handbook. The test stage performs the markdownlint, and secret_detection jobs. The build stage performs runs the hugo command to ensure the theme builds successfully. The release stage performs one manual job to create a new release of the theme and merge requests to both handbook and internal-handbook. See the Releases section for more details. The CI/CD pipeline for www-gitlab-com is responsible for triggering downstream builds of both handbook and internal-handbook in $BUILD_AND_TEST_ONLY mode. This ensures that any changes to dependent data files in www-gitlab-com will build successfully for both handbook and internal-handbook. Right now the handbook projects doesn\u2019t use the Reviewer Roulette\nfeature of the danger-review CI/CD component. See issue. We use the architecture plugin to provide guidance on how to review MRs that contain changes to\narchitecture evolution design documents. In order to make Danger post message to MRs we need to setup a project token (api scope with Developer role) and\na CI/CD variable called DANGER_GITLAB_API_TOKEN to contain this project token (Masked but not Protected).\nSee above for more on general management of access tokens. For more details, follow the Danger documentation\nand inspect the MR adding the reviewer roulette to the public handbook. The CI/CD linting jobs generate code quality report artifacts for MR widget integration. If there are errors detected,\na custom CI/CD job posts a Markdown table summary as MR comment, linking to helpful handbook editing resources. The parse-codequality-report.sh script in the handbook and internal-handbook generates the code quality report posted in the MR. Changes to these reports need to be applied to both projects. The code quality report relies on the GITLAB_TOKEN to perform the reporting actions on any MRs. See maintenance tasks. The triage-bot project is meant to help triage issues in the handbook, internal-handbook, and docsy-theme projects.\nIt has two main goals: Please see the .triage-policies.yml for rules.\nYou can find more about how to create policies in the GitLab triage gem project readme. The triage bot is scheduled to run 3 times a week. See the project\u2019s pipeline schedule for details. Triage uses the TRIAGE_BOT access token to perform tasks. This must have the Developer role to take actions on merge requests.\nSee above for more on general management of access tokens."
    },
    {
        "title": "Editing the Handbook",
        "url": "https://handbook.gitlab.com/handbook/about/editing-handbook/",
        "content": "This page focuses on how to edit the handbook.\nPlease see the handbook usage page for how and why we use the handbook, and other docs pages for further reference. This page is intended to be complementary to Using GitLab at GitLab.\nWe suggest you complete the GitLab 101 Tool Certification if you haven\u2019t already. Have your own practical Handbook editing tips? Drop a video below! For how to add yourself to the team page, see the add yourself to team guide. For how to format markdown in the handbook, see the markdown style guide,\nwhich includes how to embed videos. A typical workflow to edit the handbook: Navigate to the handbook page you want to edit. At the bottom, or on the right, click on the URL Edit this page to open the new Web IDE.  Familiarize yourself with the Web IDE:  Edit the selected file, and try the Markdown preview. Cmd+Shift+P on macOS opens the Web IDE command palette to search for commands. For example, type Markdown, select Markdown: Open Preview to the Side and try the preview.  Upload new files by right-clicking and selecting Upload... for example images into static/images/handbook/ and the corresponding file tree, following the handbook directories.  Open the Source Control icon on the left menu which has a colored marker for counting the file changes. Tip: Keyboard shortcut Ctrl+Shift+G.  Review the changed files, and once ready, specify a Git commit message, click on the \u22c1 on the right side of the Commit and push button, and choose the Create new branch and commit option. Keyboard shortcut:  Cmd+Enter.  Specify a new Git branch name (optional). Press Enter to continue. This action pushes the changes into the Git repository. The changes are persisted on the GitLab server and are immediately visible in the project view.  Check the pop-up at the bottom right, and click Create Merge Request to open the GitLab MR tab. Tip: The notification bell icon at the bottom brings back the notification, if accidentally dismissed.  Fill in the MR template, provide why the merge request is created, add labels (optionally using quick actions, /label ~handbook), assign yourself (/assign me), and set the branch to delete when merged. Optionally, use the draft option to prevent merging until ready.  Make additional changes to the MR: Select Code > Open in Web IDE on the upper right menu. This opens the Web IDE again to make changes. All changed files are opened automatically.  Make changes, commit and push them (follow this issue for UX commit flows).  Optional: Follow the pop-up notification to navigate back to the MR.  Tip: Practice the keyboard shortcuts for your workflows: After making changes, Control+Shift+G to commit, Cmd+Enter, Cursor to select the branch, Enter, etc. Note: The Cmd+w keyboard shortcut to close a file tab in the Web IDE gets overridden by the Chrome browser to close the browser tab. This is a known problem, use this shortcut carefully. Note: The video shows the old www-gitlab-com project. The editing process, however, is the same. This video covers: In these videos, we run through the GitLab Handbook with experts, uncovering how to best use the handbook in our day-to-day work, and learning best-practices for handbook editing along the way. They are meant to be helpful to understand generally how GitLab works, but the instructions cannot be followed exactly since the editor and repository in GitLab has changed. If you want to install a local version of the website to test and preview things locally,\nsee the handbook project readme for instructions on how to set it up. Additional notes: To preview your changes, deploy the review app: If you need the review app deployed after every change on a MR, you can add the ~\"deploy-review-app-always\" label to always trigger the job, including on MR creation. For more information about how the review apps are configuration for the handbook projects, please see the Handbook Pages Deployment. The site uses the concept of page bundles, sections, and leaf pages.  A section can have multiple leaf pages, which requires a _index.md for the section.  A page bundle is a single page with a group of images, requires an index.md. In general, Handbook URLs should describe their content and be as clean and easy to remember as possible. Directories (folders) and pages should use lowercase a-z and hyphen -, except for _index.md. Uppercase A-Z is allowed but discouraged.\nWhile Git and Hugo allow any UTF-8 character to be used in the file path, using other characters (such as a space) can cause issues with the pipeline. Section: Page bundle: Section with a page bundle: If you delete, rename, or move a page, you should: When trying to edit content, you may encounter content that is \u201cbuilt\u201d using shortcodes and data files.\nShortcodes look similar to {{ % performance-indicators \"ux_department\" % }}. When you encounter content in a shortcode and want to edit it: If you recently created a merge request that was labeled as a Community contribution, you can fix this mislabeling issue going forward by updating the GitLab username in your personal entry in the team member directory to match the GitLab account you use for work. Use the team page editing instructions to find your team page entry file, and update the gitlab attribute (typically found on line 10) to be an exact match for the GitLab.com username you use for work. When clicking on Edit this page in the upper right corner on a handbook page in your browser, you might get a 404 error in the GitLab Web IDE. As a team member, this problem can be related to an expired SAML session for your GitLab.com profile. In order to mitigate and solve the problem, click on View page source to trigger the SAML authentication with Okta again. Alternatively, navigate into our GitLab.com profile into your To-Do list, or try to open a confidential issue, to trigger the authentication. It can also be browser related: Try clearing the cache, open an incognito window (on macOS: cmd shift n), or use a different browser to test. To see why your pipeline is failing, there are two main places to look: In the job log, error messages typically provide you: For example: Error: error building site: assemble: \"/builds/gitlab-com/content-sites/handbook/content/handbook/security/security-assurance/field-security/trust_center_guide.md:1:2\": closing tag for shortcode 'details' does not match start tag To fix markdown errors, review the message. Alternatively, review the relevant section in the markdown style guide. For all other errors, the error message should provide the information necessary to fix it. See the below sections for more details on how to resolves specific types of issues. If the problem was on the main branch, you may need to rebase. If you\u2019re unsure, you can reach out for help. To the ensure consistency, quality and correctness of the GitLab Handbook we use various linting jobs that run as part of the pipeline. These jobs check that everything is as it should be, and if they detect something is wrong will cause the pipeline to fail. If you have prettier set up in VS Code and it is formatting the .md files when they are not supposed to, check if you have Prettier set to be your default formatter with \"editor.defaultFormatter\": \"esbenp.prettier-vscode\" in your user settings. Additionally, consider using the Glob Pattern in the extension settings to specify which files to prettify automatically. There is a special linter that validates links and anchors across the handbook. If your change accidentally breaks a link, then the pipeline job will fail with a similar error message.  How to fix the problem Double-check that header Expense Reimbursement exists in sites/handbook/source/handbook/finance/spending-company-money/index.html.md. If it was moved or renamed, then update the link with the anchor to point to the correct location. MR pipelines should catch almost all errors before they are merged into the relevant repository.\nHowever, the handbook (and some other projects) pull data from www-gitlab-com yml files,\nwhich are currently not fully checked by the pipeline. If the default branch main (for public and internal handbook) or master (for www-gitlab-com)\nis \u201cbroken\u201d and pipelines are failing for everyone, the root issue is most likely a data file error. Take this example error: Following the error trace, notice that the last error with a full path and line number is:\nfailed to process shortcode: \"/builds/gitlab-com/content-sites/handbook/layouts/shortcodes/tech-writing.html:16:28\". Looking at the file,\nthe issue is an unexpected value in printf \"/handbook/product/categories#%s-section\" $section,\nwhich matches the last part of the error message. From there, line 11\ntells us that the data is from site.Data.public.stages.stages \"section\". If you have a local build of the site, you can find all the data files in the data/public folder.\nThe relevant file (usually a yml file) should tell you at the top where to find the original. If you do not have a local build, you can still likely find it in the www-gitlab-com data folder. Based on the code, you can figure out the filename. site.Data.public.stages.stages means it\u2019s\nin data/public and the file is stages.yml. The last parts .stages \"section\" means it\u2019s inside of stages: and it\u2019s pulling data from\neach section: line. You can check the most recent changes to the file, and/or compare it to when main started failing. In this case, an empty section: line\nwas the issue. The quick and easy fix is to add text to the empty section: line, merge it, and run a new pipeline\nin the public handbook project. In this case, the handbook code was made more robust. For additional tips, such as how to replace strings in files, refer to the practical handbook edits examples. If you run into trouble editing the GitLab Handbook, help is available. Team members, referred to as MR Buddies, are available to help you create a merge request or debug any problems you might run into while updating the GitLab Handbook. Some common questions are covered in the videos in the MR Buddies playlist. Post your request with a link in the mr-buddies Slack channel. For general questions about the handbook, post in the handbook Slack channel. For more serious problems, especially ones that are time sensitive or prohibiting access to important information, there is an escalation process to reach out to team members who are on-call to help resolve the problem."
    },
    {
        "title": "Handbook Style Guide",
        "url": "https://handbook.gitlab.com/handbook/about/style-guide/",
        "content": "GitLab\u2019s general communications practices are detailed at GitLab Communication, but beyond those we do have some channel-specific guidance available.\nSee the list of resources below for links to other guides. Handbook style guidance is covered primarily by the handbook markdown guide,\nand the editing handbook page. In the absence of handbook-specific guidance, follow:"
    },
    {
        "title": "Content Websites",
        "url": "https://handbook.gitlab.com/handbook/about/maintenance/",
        "content": "This area has traditionally been referred to as \u201cthe handbook\u201d, but over time has grown in scope to include multiple sites, projects, repos, and types of content. Therefore, we are using the term \u201ccontent websites\u201d here to avoid ambiguity and properly frame discussions around this scope of responsibility. See our direction page for more. If you need help, please see the editing handbook section, or escalation information if it\u2019s urgent. The maintainer of this page (as indicated in the sidebar) is considered the DRI for GitLab\u2019s \u201ccontent websites\u201d. At present, the roles and responsibilities are as follows: This page further documents the scope and responsibilities of the DRI and their engineering reports. The following guidelines are used for triaging issues in content websites projects\nthat are in-scope. The triage guidelines use the product issue triage\ninformation as a basis. However, as the group structure and resources differ for the content\nwebsites, so do the guidelines. A triage bot exists to help triage issues. Handbook issues typically fall under one of the following: Issues may be considered a bug separately from the category when applicable (not a feature). The team overseeing the content websites generally only resources operations issues,\nunless the issue is a blocker for contributing or using the handbook. The priority label is used to indicate the importance of an issue and guide its scheduling.\nPriority labels are expected to be set based on the needs of GitLab.\nPriority can apply to any type of issue. For bug issues, priority typically matches the severity.\nMatch the priority to the severity if uncertain. We encourage contributions for all issues, especially priority 3 and 4 issues, to be addressed sooner. Severity labels help us determine urgency and clearly communicate the impact of a ~\u201cHandbook::Operations\u201d issue on users. The severity should be determined based the various factors in the table below.\nWhen an issue falls under multiple categories, use your best judgment. Once you\u2019ve determined a severity for an issue add a note that explains in summary why you selected the severity you did. This will help future team members understand your rationale so they will know how to proceed with acting upon the issue. Timeline for resolution is based on priority. Please see the relevant project readme for implementation information. Note: Team members are added to the handbook-tools group as Maintainer or Owner. The group has Maintainer access to the handbook projects, and the Docsy theme project.\u00a0\u21a9\ufe0e"
    },
    {
        "title": "People Group",
        "url": "https://handbook.gitlab.com/handbook/people-group/",
        "content": "Welcome to the People Group handbook! You should be able to find answers to most of your questions here. The People Group works together to establish a high performance and results driven culture where a diverse and inclusive team can experience a meaningful career. We support a culture that enables people to do their best work and advance their careers while fully contributing to advancing GitLab\u2019s business results. We hire, promote, and recognize team members who best live our values. The People Group strategy is to set the foundation for GitLab\u2019s 3 year strategy through a focus on attracting and retaining diverse talent, creating a high performance culture with a focus on efficiency and quality results, driving divisional success through talent programs, and cultivating an equitable and inclusive culture. We\u2019ve published more information about how this vision translates to strategy and OKRs for GitLab team members in this internal-only presentation. You can also check out pages related to People Group in the section below. If you can not find what you are looking for please do the following: One Team Mosaic Video In general, the People Group is here to support GitLab\u2019s mission by bringing top talent into GitLab, and then enabling team members to make meaningful contributions in alignment with our values.\u00a0 Please don\u2019t hesitate to\u00a0reach out with questions or ask for support! The People Group works together as one team, made up of five departments: People Operations, Talent and Engagement, Total Rewards, People Business Partners, and Diversity, Inclusion, and Belonging (DIB). If team members need emergency support from GitLab\u2019s People team, please create a case in HelpLab. HelpLab is monitored during most working hours and is the centralized support platform for all people-related queries. Read more about our People Connect methods of engagement. In critical cases, the VP, People Operations, Technology & Analytics is contactable 24/7 via their mobile numbers that appear in their Slack profile. We trust team members to always use their best judgement when facing any emergency. Team members are encouraged to dial their country\u2019s emergency services number for any critical and/or medical emergency. In the case that other team members are aware of a team member\u2019s emergency (during a Zoom call for example) and wish to call that country\u2019s emergency services on the original team member\u2019s behalf, we do not recommend this as only certain People Ops team members have access to team member addresses and we would take on the role of communicating with emergency services, should this extremely rare situation arise. In the event a team member is in an unsafe situation due to a natural disaster, please see the Disaster Recovery Plan page. As stated in the Code of Business Conduct and Ethics, we have a section related to reporting violations. GitLab has engaged Navex to provide EthicsPoint, a comprehensive and confidential reporting tool, an anonymous ethics hotline for all team members. The purpose of the service is to insure that any team member wishing to submit a report anonymously about conduct addressed in the Code of Business Conduct and Ethics can do so without the fear of retaliation. In addition to EthicsPoint, GitLab has engaged Lighthouse Services to provide an anonymous reporting hotline for all team members to submit reports regarding team member relations. Reports may cover but are not limited to the following topics: wrongful discharge or disciplinary action, sexual harassment, discrimination, conduct violations, alcohol and substance abuse, threats, improper conduct, violation of company policy. Please note that the information provided by you may be the basis for an internal and/or external investigation into the issue you are reporting and your anonymity will be protected by Lighthouse to the extent possible by law. However, your identity may become known during the course of the investigation because of the information you have provided. Reports are submitted by Lighthouse to a company designee for investigation according to our company policies. Lighthouse has a toll free number and other methods of reporting are available 24 hours a day, 7 days a week for use by team members. In addition to EthicsPoint and Lighthouse, please review the Team Member Relations page. GitLab also offers a Harassment Complaint Form that any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at teammemberrelations@gitlab.com. This table lists the aliases to use, when you are looking to reach a specific group in the People Group. It will also ensure you get the right attention, from the right team member, faster. On this page you can find our People Manager Calendar and All Team Member Calendar. The goal of these pages is to ensure that team members and People Managers can plan ahead and have an overview of upcoming programs and timelines. Each quarter a Slack reminder will go out in #people-manager-and-above channel to review the next quarter calendar events. Each month shows Task, which outlines the people manager responsibility associated with the specific program, and (if applicable) highlights the Key Date. We will also leverage our Manager Newsletter and the Company Newsletter for broadcasting our programs widely. Each month on the first Monday there\u2019s a calendar reminder to update the calendars on that date. This calendar reminder includes People Business Partners and the DRI in L&D.\nAlso with sharing the calendars in the news letters People Business Partners and L&D will be tagged. The goal of the calendar is to include information at least two quarters ahead of the current quarter. For questions about the updates to the calendars you can always reach out to People Connect. The Legal-Employment team, collaborates with and provides support to the People team in many functional areas. Email approval from the Senior Director of Legal, Employment is required prior to engagement with external counsel to allow for accurate tracking of costs. Invoices will be sent to Senior Director of Legal, Employment, for approval. The legal, employment team may require support from the people connect team, for communicating a country specific legal requirement to team members, to consult with team members in an entity country if necessary or to arrange legally required contract amendments, to name just a few examples. As these matters may relate to individual team members or groups of team members, they are appropriately managed in a confidential manner. If the legal, employment team makes a request for support or assistance from the people connect team, the request should be formulated using a template (linked here, though accessible internally only to legal, employment and the people connect teams).\nThe request should include all the required detail and explanation to enable people connect to support, including: To make a request, a copy of the template should be saved, filled out as above, dated and passed to Alissa Meeks/the People Connect Manager so the request can be assessed and assigned to a member of the people connect team for completion. Once assigned, the member of the people connect team who will be assisting with the request should touch base with the member of the legal, employment team who has made the request, to confirm that the request is being worked on and so it\u2019s easy to collaborate on finishing out the task. All tasks will be assigned via slack in the #pbp-peopleops slack channel. This is a private channel. The People Connect Team, will self-assign a task, within 24 hours and comment in slack on the request to confirm. Please note that the source of truth for role responsibilites is the job family for the People Connect Team. The table below is meant to provide a quick overview of some of the core responsibilities for the team. Other listed processes for the People Connect Team can be found here Please review the frequently requested section of the People Handbook before reaching out to the team. The page includes information on accessing a team directory, requesting a letter of employment, mortgage forms, the companies reference request policy, ordering business cards, and changing your name in GitLab systems. GitLab does not actively search for LinkedIn profiles that have inaccurate information about being a GitLab Team member. However, there are instances where a profile is identified and there is question on whether the person is truly a GitLab team member. Here is the process for flagging a potentially inaccurate profile and the actions that the People Connect Team will do to confirm and potentially report a profile. We use Workday to maintain team member information.  All team members (all contract types) are in Workday.\nWorkday is managed and maintained by the People Tools and Technology team. See our Workday Guide to  learn more about how to use Workday. Administrative access to CultureAmp will be limited based on role and responsibility. There are 3 different levels of access: To request access please open an access request with the type of account access requested and the business need. You can assign the access request to Anesia Chan @anechan and Laura Janssen @Laura-Janssen (as backup) for review and approval. The default admin access will be the Survey Creator administration rights unless other access is specified. Please note that Survey Data Analyst admin rights will not be granted to team members outside of the People group with out permission from the Chief People Officer. If you need support with a specific CultureAmp Survey, please complete this issue template to alert the People Analytics Team. At GitLab, we believe that career growth is non-linear. In practice, non-linear career growth is an opportunity for team members to increase efficiency with new skills, develop as leaders with new responsibilities, and grow as an expert in their field. But growth only happens when we make intentional time and space to learn. As a People Group, we\u2019re embracing this attitude of continuous learning together, with the challenge that, as a team, we can spend a total of 300 hours learning before the end of FY25 Q3! We encourage everyone to participate, spending approx. 2 hours per month learning something new, as a way to prioritize your development and use work time to uplevel and upskill. At the end of the quarter, we\u2019ll ask folks to self-report hours spent learning, and take a tally of total People Group learning hours.  Here are a few ways you might spend time learning this quarter: We encourage everyone to have an ongoing conversation about career growth with their manager during weekly 1:1s. If this isn\u2019t already part of your weekly check in, consider adding it to your agenda template now! Investing in your growth is essential for both your individual success and the success of our entire team. Let\u2019s start learning together! Assembling a case for promotion can be a time-consuming process. The tips and style principles in this guide will help you prepare a document that presents the evidence clearly, requiring fewer review cycles. The emphasis on quantification over editorialization has a number of benefits for both the reader and the author: GitLab Team Members can now reach out to us at the touch of a button via HelpLab. If you are external to GitLab but have a question for our team be sure to email people-connect@gitlab.com.  HelpLab People Connect is GitLab\u2019s centralized team member support model that provides a single point of contact (SPOC) for all people-related questions and requests - taking the guesswork out of finding answers that may not be immediately apparent in the handbook, while creating space for team members to remain productive and focused on what they do best. Why we exist: GitLab Talent Development (commonly referred to as \u201cLearning & Development\u201d) exists to enhance team member performance, expand capabilities, and further develop skills that make GitLab team members the top talent in the industry. We strive to foster a culture of continous growth so that GitLab remains a great place to work. Positive impact on team member experience leads to a positive impact on results, which leads to a positive impact on GitLab customers. GitLab is growing fast and we have been ranked as one of the fastest-growing private software companies. Headcount has nearly doubled in the last year and we have plans to continue to grow. As we scale, there will be more and more changes to how we operate as an organization. New technology will be introduced to make us more efficient, new processes will be introduced to improve transparency, functional groups will be redesigned and adjusted to meet our growing headcount and strategic objectives, job families will change, and policies in the handbook will be altered that have a big impact on how we operate. This policy relates to the types of leaves that GitLab offers and the guidelines associated with each leave type. Training on our PTO policy is included as part of a team member\u2019s onboarding, and is also available here for reference or if a refresher is needed. Time away from work can be extremely helpful for maintaining a healthy work/life balance. GitLab encourages managers and leadership to set the example by taking time off when needed, and ensuring their reports do the same. Everyone at GitLab uses our GitLab tool in their daily work. This page details items specific to using the GitLab tool at GitLab. Skills and behavior of Using GitLab as a Team Member: Skills and behaviors of Using GitLab as a People Leader: Workday will be accessible to all GitLab team members through Okta SSO. Go to gitlab.okta.com and click on the \u2018Workday SSO\u2019 tile to login. You can search your apps for quick access."
    },
    {
        "title": "Anti-Harassment Policy",
        "url": "https://handbook.gitlab.com/handbook/people-group/anti-harassment/",
        "content": "\nPer the stated Roles & Responsibilities, changes to this page must be approved or merged by a code owner. All contributions are welcome and encouraged.\n Per the stated Roles & Responsibilities, changes to this page must be approved or merged by a code owner. All contributions are welcome and encouraged. Everyone at GitLab has a responsibility to prevent and stop harassment. Working remotely means that the majority of our interactions are by video call or written communication, such as email or shared documents. The exceptions to this are team summits, attending conferences together, and local team meetups. No matter the method of communication, it is expected that everyone will contribute to an inclusive and collaborative working environment and respect each other at all times. Team member behavior is not limited to internal interactions with each other.  Our Anti-harassment policy applies to GitLab team members interaction with customers, vendors and community members. Should you become aware of or witness any form of harassment or behavior that violates this policy or our company values, please report the incident directly to the Chief People Officer, Team Member Relations, or a People Business Partner immediately for thorough investigation. GitLab is a global organization and our team is distributed all over the world, so we strive to ensure our team is fully aligned with GitLab\u2019s no tolerance harassment policy despite their location. We want everyone to feel confident and comfortable communicating concerns. GitLab respects, appreciates, understands and supports every aspect of diversity. We aim to continuously foster a globally aware team. This policy applies to all team members of GitLab, whether contractor or employee, in all locations. There are local labor laws in every country and in the case of the United States, state laws, that must be followed when handling, reporting and investigating incidents of harassment. The People Business Partner team and legal counsel, if required, in each of those countries will be called upon to ensure compliance and the appropriate legal processes and procedures are followed. Specific country requirements for employees (subject to changes in employment law) are listed in the Country & US State-Specific Requirements section and will be updated regularly. All individual contributors, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit. The following are considered forms of harassment and will not be tolerated by GitLab: Sexual harassment is considered unwelcome conduct of a sexual nature that is sufficiently persistent or offensive enough to interfere with the receiver\u2019s job performance or create an intimidating, hostile or offensive working environment. Sexual harassment encompasses a wide range of conduct. Examples of misconduct include, but may not be limited to, the following actions: Sexual harassment is unlawful and is considered a form of team member misconduct. Sanctions will be enforced against individuals engaging in sexual harassment and against supervisory and managerial personnel who knowingly allow such behavior to continue. Any retaliation against an individual who complains of sexual harassment or who testifies or assists in any proceeding under the law is unlawful. Having a diverse workforce, made up of team members who bring a wide variety of skills, abilities, experiences and perspectives, is essential to our success. We are committed to the principles of equal opportunity, inclusion, and respect. All employment-related decisions must be based on company needs, job requirements, and individual qualifications. Always take full advantage of what our team members have to offer; listen and be inclusive. We do not tolerate discrimination against anyone, including team members, customers, business partners, or other stakeholders. Any form of discrimination towards an individual is strictly prohibited, including: Report suspected discrimination right away and never retaliate against anyone who raises a good faith belief that unlawful discrimination has occurred. If you believe you have been discriminated against or witnessed discriminatory practices, please contact the Chief People Officer, a People Business Partner, or the Team Member Relations Specialist to initiate an investigation into the behavior. GitLab has also engaged Lighthouse Services to provide anonymous reporting methods, as described in the How to Report Violations section. GitLab does not tolerate violent acts or threats of violence. The company will not tolerate fighting, bullying, coercion, or use of abusive or threatening words directed to, about, or against a co-worker, lead, manager, executive, candidate, client/customer, vendor, contributor, or any other person. No individual employed by GitLab should commit or threaten to commit any violent act or discuss committing such offenses, even in a joking manner. Retaliation of any sort for filing a claim of harassment will not be tolerated. If you believe you have been retaliated against, please contact the Chief People Officer, Team Member Relations or a People Business Partner to initiate an investigation. If someone messes up, people are encouraged to speak up publicly and within the moment, in order to let that person and others know that what happened was not inclusive behavior. This makes for a situation from which all parties can learn, and is one which promotes understanding. Additionally it makes it possible for that person to de-escalate the situation by correcting themselves and apologizing. This does not ensure there will be no consequences. However, it will greatly reduce the chance of escalation and has the potential to help a situation become comfortable and inclusive again. If a threat is made against you or someone else that makes you or another team member question their safety due to an issue, merge request, email or other work related matters do not hesitate to initiate the following process: If managers become aware of misconduct, they must deal with any allegations expeditiously, seriously, confidentially, and fairly, whether or not there has been a written or formal complaint made to People Business partner. Informed managers are expected to: Managers who knowingly allow or tolerate any form of harassment or retaliation, including the failure to immediately report such misconduct to People Business Partner, are in violation of this policy and subject to disciplinary action, including termination. All employees have the responsibility to help create and maintain a work environment free of bullying and harassment and can help by: The Chief People Officer and People Business Partners are responsible for: All individual team members, managers, and leaders will be subject to disciplinary action, up to and including termination, for any act of harassment they commit. Although disciplinary action will be specific to each case, it can generally be classified into 4 levels: First time occurrences of inappropriate behavior. An act out of character. After formal investigation, coworkers still feel comfortable working with the offender. Recurring socially inappropriate behavior. Major infraction, including retaliation, or recurring socially inappropriate behavior after a written admonition. Serious cases, including any criminal offence. Training and guidance on understanding, preventing, and dealing with discrimination and sexual harassment will be provided to both managers and individual team members. The courses and the related enrollment logic can be found here. This training will be provided on a regular cadence, consistent with local requirements, and/or when new legal requirements are introduced. Complaint Procedure If attempts to resolve the problem in an informal manner prove insufficient or if these attempts were refused or proved to be ineffective, the victim may follow the procedure below: Sanctions Without prejudice to the provisions that may arise from a judicial process instituted by the victim, one or more of the following sanctions shall be imposed on the person guilty of undesirable conduct: GitLab shall impose, by registered letter and within five working days, the sanctions imposed upon the person who has been guilty of undesirable behavior. In case an employee abuses this complaint procedure, the above sanctions may also apply for the employee. Psychosocial Intervention GitLab has engaged with an external health and safety service called Mensura who are responsible for handling any complaints of harassment that are received but can not be resolved informally and internally. Team members in Belgium may contact this service if they wish and make a request for an informal or formal psychosocial intervention. A request for a formal intervention should include the following: The psychosocial intervention advisor will investigate further and provide a report to the employee and People Business Partner with a recommended course of action. Protection from Power Harassment \u201cPower harassment\u201d is defined as any act by a person using his/her authority in the workplace, such as job position or human relationship with a team member, beyond the appropriate scope of business conduct, which causes such team member mental distress or physical pain or degradation of the working environment.\nThe law defines power harassment as \u201cremarks or behaviour by people taking advantage of their superior position that go beyond business necessity, thereby harming the workplace environment.  GitLab expressly prohibits any behaviour toward team members that falls within the definition of power harassment. Depending on the individual, a person may feel dissatisfaction when given the instructions, advice, or guidance necessary in the ordinary course of business.  In such cases where the actions are conducted within the scope of appropriate business practice, they should not fall under the category of power harassment.  Examples of power harassment include, but may not be limited to: Team members who feel that they may have been subjected to power harassment may bring their complaints to their People Business Partner, who will engage the appropriate internal consultation services and respond to claims.  GitLab is prohibited from dismissing or treating unfairly any team members who report harassment cases or cooperate in an investigation or consultation process. Prohibition of Sexual Harassment Team members are prohibited from any activities that cause disadvantage or discomfort to other employees or that are damaging to the work environment by way of speech or behaviour of a sexual nature.  GitLab shall take all necessary measures in managing employment to prevent sexual harassment at the workplace. Prohibition of Harassment Due to Pregnancy, Childbirth, Child Care Leave, or Family Care Leave Team members are prohibited from any activities that are damaging to the work environment of other employees by way of speech or behaviour related to pregnancy, childbirth, etc., or use of systems or measures related to pregnancy, childbirth, child care, family care, etc.  GitLab shall take necessary measures in managing employment to prevent harassment due to pregnancy, childbirth, child care leave, family care leave, etc. at the workplace. Prohibition of Any Other Forms of Harassment In addition to the prohibitions listed above, team members are prohibited from any other forms of harassment at the workplace that are damaging to the work environment of other team members such as by way of speech or behaviours related to sexual orientation or gender identification. Complaint Procedure Complaint Procedure and Contacts The Company is aware of and recognises the effect that bullying, harassment and sexual harassment can have on its team members. Informal Procedure Formal procedure Mediation In addition to EthicsPoint and Lighthouse, please review the Team Member Relations Specialist section. GitLab also offers a Harassment Complaint Form that any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at teammemberrelations@gitlab.com. Every team member located in the state of California will be required to read, review, and understand the following three documents during their onboarding: Every team member located in the state of Connecticut is required to take the 2 hour Anti Harassment Training for Supervisors. This training is to be completed by all individual contributors as well as managers. Team members who reside in Maine have the right to file a complaint through the Maine Human Rights Commission within 300 days of the date of the alleged discrimination. You may contact the Commission by phone at (207) 624-6290, TTY Maine Relay 711, or by visiting the office located at 51 State House Station, August Maine, 04333-0051. It is unlawful under the Maine Human Rights Act for an employer to retaliate against you because you filed a complaint of discrimination or because you aided in an investigation. Team members who reside in Massachusetts have the right to file a complaint to the Massachusetts Commission Against Discrimination (MCAD): 1 Ashburton Place, Suite 601, Boston, MA 02108, tel: (617) 994-6000, TTY:(617) 994-6196. Nondisclosure or Nondisparagement Agreements Under this policy, a nondisclosure agreement is any agreement by which one or more parties agree not to discuss or disclose information regarding any complaint of work-related harassment, discrimination, or sexual assault. A nondisparagement agreement is any agreement by which one or more parties agree not to discredit or make negative or disparaging written or oral statements about any other party or the company. A no-rehire provision is an agreement that prohibits a team member from seeking reemployment with the company and allows a company to not rehire that individual in the future. The company will not require a team member to enter into any agreement if the purpose or effect of the agreement prevents the employee from disclosing or discussing conduct constituting discrimination, harassment, or sexual assault. A team member claiming to be aggrieved by discrimination, harassment, or sexual assault may, however, voluntarily request to enter into a settlement, separation, or severance agreement which contains a nondisclosure, nondisparagement, or no-rehire provision and will have at least seven days to revoke any such agreement. Time Limitations Nothing in this policy precludes any person from filing a formal grievance in accordance with a collective bargaining agreement [if applicable], the Bureau of Labor and Industries\u2019 Civil Rights Division 800 NE Oregon St., Suite 1045 Portland, OR 97232, tel: (971) 673-0761, TTY Relay 711, or the Equal Employment Opportunity Commission. Note that Oregon state law requires that any legal action taken on alleged discriminatory conduct (specifically that prohibited by ORS 659A.030, 659A.082 or 659A.112) commence no later than five years after the occurrence of the violation. Other applicable laws may have a shorter time limitation on filing. Team members who reside in Rhode Island have the right to file a complaint with the Rhode Island Commission for Human Rights located at 180 Westminster St., 3rd Floor, Providence, RI 02903. Phone: (401) 222-2661, Voice Relay: 7-1-1. If the a team member who resides in Vermont is dissatisfied with this employer\u2019s action, or is otherwise interested in doing so, they may file a complaint by writing or calling the Vermont Attorney General\u2019s Office, Civil Rights Unit, 109 State Street, Montpelier, VT 05609, ago.civilrights@vermont.gov, tel:(888)745-9195 (Toll Free VT) or (802)828-3657 (voice/TDD). Complaints should be filed within 360 days of the adverse action. We are continuously gathering country specific references to review regulation and obtain guidance on the management of harassment or misconduct at work. Here are a few authorities we referred to in the creation of this policy:"
    },
    {
        "title": "GiveLab Volunteer Initiatives",
        "url": "https://handbook.gitlab.com/handbook/people-group/givelab-volunteer-initiatives/",
        "content": "GiveLab is GitLab\u2019s Team Member Volunteer Program. The GiveLab Program lives under the ESG Team and is a part of GitLab\u2019s overall ESG strategy and program development. The term GiveLab encompasses all Team Member Volunteering initiatives at GitLab. GitLab encourages team members to take part in volunteer initiatives that support their local communities, participate in virtual volunteer activities, and organize volunteer activities as part of team events and get togethers. To learn more about GiveLab, please visit the ESG handbook page. The first GitLab Donation Drive in 2020 started as an internal challenge to GitLab team members to donate 5,000 meals to US Food Banks over the course of a week. This initiative quickly gained traction and saw over 100,000 meals being donated across 19 countries. 2021\u2019s campaign expanded to include any type of donation, including donations of time as part of Global Volunteer Month. Having identified a talent gap in both the technology and the university system which speaks predominantly to Underrepresented Groups, the Upstream Diversity Working Group was established. Geared toward knowledge sharing, the recently piloted program sees GitLab team members extending their technical skills and time to those in Underrepresented Groups (URGs) with a view to creating future career opportunities for them within the technology sector.  The program mobilises GitLab team members to serve as coaches in partnership with Latinitas; FreeCodeCamp and re:Learn. As a pioneer in the all-remote space, GitLab is uniquely leveraged to prepare youth around the globe for the future of work. Recently, GitLab Alumni Jean du Plessis, in collaboration with Trusted Interns as part of The Knowledge Trust which places a focus on making jobs more accessible to South African Youth, presented a webinar around Preparing for your First Remote Job. This was a springboard for around 650 South African Youth from within the Trusted Interns program to complete the GitLab All-Remote Certification. On multiple occasions, GitLab has supported Rails Girls an organisation geared toward providing tools and creating a sense of community for women in the technology space - enabling them to grow their knowledge base and build out their ideas.  The most recent event supported was the Rails Girls Kumasi Ruby on Rails Workshop - be sure to check out this GitLab Unfiltered video to see our very own Abubakar Siddiq Ango, Developer Evangalism Program Manager in action! GitLab encourages team members to set time aside to take part in local volunteer initiatives within their respective communities.  Here are a few of the of projects our team members have lent hands or resources to of late: Operation Warm providing warmth, confidence and hope to children in need through the gift of brand-new winter coats. Over the last 20 years, Operation Warm and our partners have used the coat as a bridge for families in need to access everything from flu shots to new books. Fontanus Research Center which aims to create new, efficient and interdisciplinary educational methodologies. National Charity League a multi-generational philanthropic organization of mother and daughters who volunteer close to three million hours annually to over 6,000 charities in the United States. Hack for She, a completely virtual hackathon aimed to find solutions to Women\u2019s problems. Return to the People Group Handbook."
    },
    {
        "title": "Hiring & Talent Acquisition Handbook",
        "url": "https://handbook.gitlab.com/handbook/hiring/",
        "content": "At the core of our team\u2019s vision, mission, and strategy is our ability to impact GitLab\u2019s overarching mission: to make it so that everyone can contribute to and co-create the software that powers our world. When everyone can contribute, users become contributors and we greatly increase the rate of innovation. As a Talent Acquisition team, we have an outsized impact on GitLab\u2019s ability to make this mission a reality, by connecting top talent to profound careers from wherever they are in a truly distributed, remote workforce. To create globally inclusive access to opportunities so that everyone can contribute to and co-create the software that powers our world. It is the Talent Acquisition Team\u2019s mission to predictably build distributed, representative teams that enable team members to co-create the future of software. As we set out to achieve this vision, we will continue to rely on core guiding principles to define how we build toward the future. We strive to be as transparent as possible, but these sections are only available for our GitLab team members.\nTalent Acquisition Strategy Please find pages for potential and active applicants below. Please note that the names of stages is important, and we should only have stages with the names listed below. Anything outside of these stages will not appear on reporting. Scorecards are required in all stages that require interviews. Confidential, personal information and disclosures about being part of a protected class are never to be written in scorecards. Recruiters can add salary information into Private Notes outside of the scorecard to maintain confidentiality. There are no perfect or required ways to set up your Greenhouse notifications, but these are some of our recommendations. Emerging Talent Remote.com: remote.com onboarding timeline Global Upside: Papaya Processing for the United Arab Emirates could take up to a month, so we recommend start dates at least 6 weeks after the offer is generated. Congratulations and welcome to the GitLab team! We\u2019re excited to have you on board as you start this exciting new chapter in your engineering career. Our comprehensive ongoing development program is designed to support you every step of the way - from your first day, to your first merge request, and beyond. You\u2019ll have support from your manager, onboarding buddy, and the Talent Development team; don\u2019t ever hesitate to reach out."
    },
    {
        "title": "Diversity, Inclusion & Belonging",
        "url": "https://handbook.gitlab.com/handbook/company/culture/inclusion/",
        "content": "Diversity, Inclusion & Belonging is fundamental to the success of GitLab.  We include it in every way possible and in all that we do.  We strive for a transparent environment where all globally dispersed voices are heard and welcomed.  We strive for an environment where people can show up as their full selves each day and can contribute to their best ability.  And with over 100,000 organizations utilizing GitLab across the globe, we strive for a team that is representative of our users. Diversity complements our other values, specifically Collaboration, Efficiency and Results.\nAnd diversity in our leadership supports innovation, promotes better decision making and improves financial results. Vision: The Diversity Inclusion and Belonging value empowers everyone to contribute. The phrase \u201cDiversity, Inclusion & Belonging\u201d (or DIB) refers to the terminology for the initiative to create a diverse workforce and an environment where everyone can be their full selves. Diversity refers to characteristics of the people who make up GitLab and how they identify. Race, gender, age, ethnicity, religion, national origin, disability, sexual orientation are some examples of how the data might be categorized when looking at GitLab\u2019s diversity.\nSometimes we can see things that make us diverse and sometimes we can\u2019t. We believe that a company composed of a diverse group of people may lead to diverse opinions and ideas which, if productively engaged with, can build innovation. GitLab uses the term \u201cunderrepresented\u201d and it is meant to be a way of recognizing that we need more of what we do not have so that we can be at our best. The context is \u201cat GitLab\u201d or \u201cin a specific department or team at GitLab.\u201d\nThis term is generally used in the context of reporting on how GitLab is working on understanding and improving the sourcing, interviewing, hiring, and retention of those who either want to work or currently work at GitLab.\nInstitutes like the National Science Foundation use the word \u201cunderrepresented\u201d when discussing research around diversity so we have chosen to use it as well in order to be able to set goals around the data we have and understand where we need to work harder. For additional information about how GitLab uses this data to make progress, please see \u201cselect underrepresented group\u201d Inclusion is the ability to recognize, respect, and value differences in those around us.  It focuses on the action and understanding of what makes us diverse and working towards building a diverse team and creating welcoming workplace. It requires skills such as empathy, openness, listening, etc.  This lays the foundation of an inclusive mindset.  The foundation of understanding gives way to the actions and being intentional about creating policies and practices that embrace diversity that in the end change the overall company culture to create an environment of inclusion. Inclusion also means being aware of both positive and negative biases and how those biases impact who we hire, work with, and retain. GitLab believes that many perspectives coming together creates a more innovative environment to work in with more satisfied teammates, leading to a better product and increased profitability. Belonging is a feeling that your insights and contributions are valued. It goes back to team members feeling they can bring their full selves to work. It\u2019s not enough to simply include people to have a \u201cseat at the table\u201d, but it\u2019s important to amplify everyone\u2019s voices, remove barriers and appreciate each others for their unique backgrounds.\nEmbracing inclusion may increase the sense of belonging. Team members become more engaged and are invested in the work they are doing, because they are able to see themselves in the work being accomplished with the company overall. We believe in empowering team members to get their work done efficiently and collaboratively by establishing clear DRIs for all our work. DRIs do not owe anyone an explanation for their decisions, but DRIs can still acknowledge input by closing an issue and marking it Won't Do or commenting on an issue acknowledging that they have read all the comments. All team members don\u2019t have to agree on the best course of action- we can disagree, commit, and disagree- but everyone can contribute and it is on the DRI to acknowledge those.\nSome other ways we actively cultivate a sense of Belonging at GitLab include creating and cultivating allies, welcoming family members in the background of a call, and sharing negative feedback in 1-1 settings. A good way to look at Diversity, Inclusion & Belonging is: An underrepresented group describes a subset of a population that holds a smaller percentage within a significant subgroup than the subset holds in the general population. The accepted definition of \u201cunderrepresented minorities\u201d from the National Science Foundation and other major research institutions focuses on racial and ethnic groups whose representation in a profession is significantly below their representation in the general population.  Populations whose representation in tech roles has been historically low.  Tech roles are based on Federal Employer Information Report EEO-1 skill designations. At GitLab, this includes all technical roles across the company, such as Engineering & Product. At GitLab, we consider the following groups to be underrepresented groups: **Due to data and or legal limitations, this is not an exhaustive list of all of our underrepresented groups. Those with disabilities, those that identify as LGBTQIA+, those who choose not to disclose as well as underrepresented ethnicities outside of the US, etc. The DIB Team is actively working on finding data sets outside the US and inclusion metrics for underrepresented groups we cannot report on as team member representation. Of Note: Management refers to Team Members who are People Managers, whereas Leadership denotes Team Members who are in Director-level positions and above. Source: GitLab\u2019s People Analytics Team, WorkDay Inclusive teams are naturally more engaged, collaborative and innovative.\nWe aim to align our values to be reflective of our company wide commitment to fostering a diverse and inclusive environment. In addition, the very nature of our company is to facilitate and foster inclusion.\nWe believe in asynchronous communication, we allow flexible work hours. GitLab team members are encouraged to work when and where they are most comfortable. The GitLab team is fully distributed across the globe, providing our team the opportunity to connect with each others cultures, celebrations and unique traditions.\nWe collaborate professionally and connect personally! Our unique all-remote team opens our door to everyone.\nCandidates are not limited by geography and we champion this approach, to the extent that it\u2019s possible, for all companies! By having no offices and allowing each GitLab team member to work and live where they are most comfortable, GitLab offers a uniquely inclusive culture. Learn more about GitLab\u2019s all-remote culture. Please see our identity data. A DIB roundtable is a great way to build deeper connections with team members and develop safe spaces to discuss DIB related issues. The DIB roundtable will ask team members to share stories and anecdotes as well as challenge team members to think about how they personally and collectively can positively impact DIB. This page outlines the process of DIB Roundtables. These can be self-organized or organized by the DIB Team. This page provides an overview of our Diversity, Inclusion & Belonging Talent Acquisition initiatives. This page provides an overview of our Diversity, Inclusion & Belonging Engineering initiatives This page provides and overview of Diversity, Inclusion and Belonging Initiatives within Sales Sales Sponsorship Program #IamRemarkable is a workshop created by Google. The initiative aims to empower women and other underrepresented groups to celebrate their achievements in the workplace and beyond, and to challenge perceptions around self-promotion. At GitLab we launched the #IamRemarkable workshop in April 2021, and aim to continue with two workshops per quarter on an ongoing basis. Before the start of each quarter, a quarterly workshop planning issue will be opened where team members have the opportunity to volunteer to participate. Slots will be allocated on first come first serve basis. Our pilot workshop was for team members who are a part of our Women\u2019s TMRG. Our Q2 workshops will be open for any member of an underrepresented group, from Q3 moving forward, we will also have three slots/session for allies to attend the workshops. The workshops are kept to a max of 15 team members to generate more comfort and psychological safety within the group, in addition to providing everyone with an opportunity to share and contribute to discussion. Each workshop is two hours in duration. Due to the personal nature of the workshop, we do not record #IamRemarkable sessions. Currently, we have three GitLab team members who are certified to facilitate the #IamRemarkable workshop: In order to more efficiently scale this initiative at GitLab, we would love to have more facilitators join us! Anyone can register to become a facilitator. As soon as you have been certified, feel free to add your name to the list of facilitators above. The stay interview with Black Team Members pilot program was developed as part of feedback from the Reverse AMA discussions with Sid. It was mentioned that \u201cstay\u201d interviews might be helpful in determining retention indicators for underrepresented groups. We list our Pregnancy & Maternity Care publicly so people don\u2019t have to ask for them during interviews. In addition GitLab offers an Employee Assistance Program to all team members via Modern Health, a one-stop shop for all tools related to mental well-being and self-improvement. In our GitLab Values we list: \u2018Use inclusive language. For example, prefer \u201cHi everybody\u201d or \u201cHi people\u201d to \u201cHi guys\u201d. And speak about courage instead of aggression. Another example is to avoid terms like \u201cgossip\u201d that have negative gender connotations. Also see the note in the management section of the leadership page to avoid military analogies. We have created several TMRGs and welcome interest in creating new ones. Would you like to sign up for an Team Member Resource Group, start an TMRG, or just learn more?  See our TMRG Guide. GitLab welcomes military veterans from around the world, as well as military spouses, to learn more about life at GitLab and to apply for vacancies. We recognize the values gained from military experience, and we foster an inclusive atmosphere to thrive in when returning to civilian life. Our all-remote culture provides an ideal work environment for military veterans and spouses. By empowering team members to live and work where they are most comfortable, veterans and spouses can work in a safe, nurturing environment that they choose and design. We encourage military veterans and spouses to read testimonials from GitLab team members to understand the benefits of all-remote when joining the workforce following military service. We are committed to our Military Leave policy. GitLab is actively iterating within Diversity, Inclusion & Belonging and Talent Acquisition to ensure that additional underrepresented groups are pursued, embraced, and positioned for success. GitLab welcomes all types of team members, including any that may choose to identify as ones that currently have or were previously diagnosed as having a disability. In our HRIS (Human Resource Information System) Workday, on the Job tab page, in the Equal Employment Opportunity section, we have a field titled Disability Status that we ask our team members to complete during the onboarding process. The reason we ask is because it is a legal requirement in the United States for us to request this information. We encourage GitLab team members to self-disclose in our HRIS without any fear of judgment or negative consequences, even if you are not in the United States, but it is always optional. All disability data is completely confidential, and only requested for mandatory reporting purposes. The options of this field are: If you are unsure how to answer, please review our Individual with Disabilities Policy. At GitLab, we are proud to make reasonable accommodations to the known disability of a team member. Please review the reasonable accommodation handbook section if you need a reasonable accommodation due to your disability. Find more information on GitLab Inc\u2019s Individuals with Disabilities policy. The United States Office of Federal Contract Compliance Programs (OFCCP) enforces the affirmative action provisions of the Vietnam Era Veterans\u2019 Readjustment Assistance Act of 1974. This law, sometimes referred to as VEVRAA, requires employers doing business with the United States Federal Government (such as our GitLab Federal entity) to take steps to recruit, hire and promote protected veterans. It also makes it illegal to discriminate against protected veterans when making employment decisions on hiring, firing, pay, benefits, job assignments, promotions, layoffs, training, and other employment-related activities. Under VEVRAA, a veteran who served on active duty in the U.S. military and was discharged or release from service under conditions other than dishonorable may be classified as one or more of the four Protected Veteran categories: In our HRIS (Human Resource Information System) Workday, on the Job tab page, in the Equal Employment Opportunity section, we have a field titled Protected Veteran Status that we ask our US-based team members to complete during the onboarding process. The reason we ask is because it is a legal requirement in the United States for us to request this information. We encourage GitLab team members to self-disclose in our HRIS without any fear of judgment or negative consequences, but it is always optional. All veteran status data is completely confidential, and only requested for mandatory reporting purposes. The options of this field are: Above this field, we have a section titled Veteran Status that we ask our US-based team members to review and also complete during the onboarding process, if it applies to them and if they so wish. The reason we ask is because it is a legal requirement in the United States for us to request and document this information. We encourage our US-based GitLab team members to self-disclose their Veteran Status in our HRIS without any fear of judgment or negative consequences, but it is always optional. Again, all veteran status data is completely confidential, and only requested for mandatory reporting purposes. If you are a team member on a GitLab Inc or Federal contract and a disabled veteran you may request a \u201creasonable accommodation.\u201d A reasonable accommodation is one that allows you to perform your job, and must be provided by GitLab unless doing so would cause GitLab significant difficulty or expense. A reasonable accommodation does not change essential job functions. GitLab can choose the type of reasonable accommodation that will be made available; however, the accommodation must be effective. More information on how to request a reasonable accommodation is available here. Please review the reasonable accommodation handbook section if you would like an accommodation due to your veteran status. Team members who might use this process include: DIB and L&D team members, managers creating training for their teams, departments creating required compliance training, team members creating training for their peers or community, Developer Relations creating training for the wider GitLab community GitLab team members are distributed across the globe, giving us access to an array of opportunity.\nWe encourage collaboration with global organizations and programs that support underrepresented individuals in the tech industry.\nGitLab also provides additional support through the GitLab Diversity Sponsorship program.\nWe offer funds to help support the event financially, and if the event is in a city we have a GitLab team member, we get hands-on by offering to coach and/or give a talk whenever possible. We encourage organizers of events that are supported through our GitLab Diversity Sponsorship program to share this sign up link with attendees. Everyone can contribute. When measuring diversity-focused performance indicators, we focus on top-of-funnel metrics, like pipeline, because they\u2019re leading indicators which are better measures of where we are heading.\nIt also helps reduce risk that we hire to the performance indicator, instead of hiring the best candidate. Like all performance indicators, our Diversity Performance Indicators are on the People Success Performance Indicator Page."
    },
    {
        "title": "Labor and Employment Notices",
        "url": "https://handbook.gitlab.com/handbook/labor-and-employment-notices/",
        "content": "Since GitLab is an all remote company we don\u2019t have a physical worksite or breakroom wall upon which to post important labor and employment notices, so this page is our version of that."
    },
    {
        "title": "Leadership",
        "url": "https://handbook.gitlab.com/handbook/leadership/",
        "content": "This page contains leadership pointers.\nThe first couple of headers indicate which group they apply to, using the groupings\ndefined on our team structure page. In an all-remote organization, we want each team member to be a manager of one. A manager of one is an attribute associated with our Efficiency value. To be successful at GitLab, team members need to develop their daily priorities to achieve goals. Managers of one set the tone for their work, assign items and determine what needs to get done. No matter what role you serve, self-leadership is an essential skill needed to be successful as a manager of one. In the CEO Handbook Learning Session above, GitLab CEO Sid Sijbrandij gives more context on individual contributor leadership and managers of one. We want leadership from everyone at GitLab. Since we are remote, there is a high expectation to do your work without direct supervision. It means that every team member is responsible for communication, structuring decisions, and managing your workload individually. In some cases, a individual in the Management group, Director group, S-group, or even E-group may have an \u201cInterim\u201d or \u201cActing\u201d title. In either case, they will be fulfilling the full responsibilities of the role. If you have any questions, about the future of the role, please ask them or their manager. Individual departments will have their own criteria for who is eligible to occupy these roles, so please check the career development page for your department. Please see the Making Decisions Leadership page. Most companies communicate from top to bottom through a chain of command. This communication flow often empowers managers, but it also introduces inefficiency as team members are not able to connect directly with the people they need to communicate with in order to get their work done. At GitLab, every team member is encouraged to reach out to whoever is the correct person (or people) to quickly unblock issues, solve problems or support in other ways. Do be courteous of your direct manager and copy them on the request. We don\u2019t encourage unnecessary friction in asking team members to escalate through managers and wait for responses to come back. What matters is efficiency in getting to results. Slack the CEO, Slack a VP, or Slack a peer. Do what you need to do to make GitLab successful. Managers should not be bottlenecks or silos for communication.\nAnyone should feel comfortable reaching out to anyone else with the best information they can to solve a problem.\nThis is a more efficient, transparent, and collaborative way to work. Giving regular feedback is extremely important for both managers and team members. Feedback can take the form of coaching sessions, separate from 1-to-1 meetings. Giving feedback is also about being prepared and, depending on the situation, you should create separate agendas and structure them as follows: Sometimes when performance dips, the best way to tackle it is to try to determine the root cause. This is easier said than done. There is a great tool that CEB (now Gartner) created to help with this called performance issue root cause diagnostic. It may not always be possible or appropriate to determine the root cause, so the underperformance process should be followed. As a leader, the way you respond to negative feedback makes a significant impact\non your team. Remember that it can be difficult for people to approach someone\nin authority with concerns and respond with sensitivity and appreciation. In particular, we\nrecommend that you keep the following in mind: Please see 1-1. Please see skip-levels. A team member\u2019s README page is intended to help others understand what it might be like to work with them, especially people who haven\u2019t worked with them before. It\u2019s also a well-intentioned effort at building some trust by being intentionally vulnerable, and to share your ideas of a good working relationship, to reduce the anxiety of people who may be on your team, now or in the future. READMEs provide a genuine report on how a person works, reducing bias/assumption and enabling people to work together based on a common framework. As part of GitLab\u2019s transparency value, we encourage each GitLab team member to consider creating their own README. GitLab division README pages are linked below for context. Reading other READMEs is an important way to get ideas on what you can include in yours. Let these serve as a guide and inspiration to you. Alternatively you can create your README dogfooding GitLab\u2019s README profile customization feature. Follow documentation on how to add details to your GitLab profile with a README. Do not forget to add your profile\u2019s link to you division\u2019s holding page. Once your README is created, consider adding a link to it from following places: This provides maximum visibility to others, so that they may read your README in advance of working with you. This allows them to take your working style and communication preferences into account, ideally increasing the overall level of empathy expressed. READMEs are particularly powerful when working with those outside of GitLab, who may be unfamiliar with our values. A README is a beacon of transparency, and helps set the tone for any working relationship. Coaching is about helping others help themselves. It is not about giving advice, instruction, or telling someone what to do. Coaching is about focusing on the future and identifying where the coachee wants to be and what they want to achieve. At GitLab, we\u2019ve defined coaching as a conversation that helps people think for themselves, find their own answers, and commit to action they design. As a coach, your role is to clarify the pathway from the current state to the future. Coaches do this by enabling the coachee to make informed choices based on deeper insight. Please see no-matrix-organization We want to promote organic cross-functional collaboration by giving people stable counterparts for other functions they need to work with. For example, each Strategic Account Executive (SAE) works with one Sales Development Representative (SDR). With our categories every backend team of developers maps to a Product Manager (PM) and a frontend team. Giving people a stable counterpart allows for more social trust and familiarity, which speeds up decision making, prevents communication problems, and reduces the risk of conflicts. This way we can work effectively cross functionally without the downsides of a matrix organization. We want the best combination of a factory and a studio. The studio element means anyone can chime in about anything, from a user to the CEO. You can step outside your work area and contribute. The factory element means everyone has a clearly assigned task and authority. Team members should feel comfortable escalating issues when help is needed to resolve unexpected challenges. Effective escalations are good, because they speed up decision making. When team members escalate an issue, another person is brought in as a decision maker or adviser as other team members disagree or need help with alignment or a serious trade-off is needed. Escalation can offer clarity and a path forward, and can be a sign of seniority for the person initiating the escalation when they know what, how, and when to escalate. As noted in this medium article, explicit esclatation should answer these four questions: Folks who are escalating an issue should avoid surprising folks in the management chain. This means that other relevant team members should be aware that an escalation is occurring. For example, in E-Group, members agree that they will not go to the CEO with an escalation without first notifying other relevant members that this is happening. There may be some exceptions to first notifying managers or peers. For example, a team member feels unsafe in voicing a concern to a manager or their peers and feels that they can\u2019t effectively escalate with standard notification without retribution. While exceptions may be appropriate, they should be rare. After a team member escalates an issue, it is OK if they disagree, commit, and advocate with the decisions made by the person they escalated to. Process has a bad reputation. It has that reputation for things that we try to avoid doing at GitLab. When you have processes that are not needed it turns into a bureaucracy. A good example are approval processes. We should keep approval processes to a minimum, by both giving people the authority to make decisions by themselves and by having a quick lightweight approval process where needed. But process also has good aspects. Having a documented process for how to communicate within the company greatly reduces time spend on on-boarding, increases speed, and prevents mistakes. A counterintuitive effect is that it also makes it easier to change processes. It is really hard to change a process that doesn\u2019t have a name or location and lives in different versions in the heads of people. Changing a written process and distributing the diff is much easier. Managers have an tremendous responsibility around talent acquisition and retention of team members. GitLab leadership and management approach was built using principles covered in the book \u201cHigh Output Management.\u201d Please see High Output Management to learn more. Building a team to deliver results is a very important aspect of improving efficiency and iteration. A high-performing team will always deliver results. As a leader at GitLab, your role is to develop a high-performing team to reach the desired level of performance and productivity. There are certain traits that high-performing teams display at GitLab: Watch the replay of our conversation with Jeb Hurley, Co-founder and Managing Partner Brainware Partners where we discussed: Skills and behavior of building high performing teams competency for Managers: The Drexler-Sibbet Team Performance Model is an excellent tool to help build high performing teams at GitLab. The model provides a roadmap for a team and a common language. It is a simplified description of how a team works together that highlights the most important things the team needs to focus on to reach high performance. At GitLab, we can use it as a frame of reference to developing high performing teams. It can help Managers ensure new and existing team members know the mission and direction of the team by the following: 7 Stages to developing high performing teams: Manager Resource: Identifying & Addressing Burnout Building and maintaining high performance includes staying mindful of team well-being and potential burnout. With GitLab\u2019s results-driven culture, the demands of product innovation around AI, the fast-paced and ever-evolving business environment, our organization recognizes the crucial balance between achieving ambitious goals and maintaining the well-being of our team members. Everyone can access this handbook resource designed for managers to identify & address burnout. This has an ongoing impact on team performance. M-teams are management support groups made up of 3 to 6 managers who are in timezones that allow for sync meetings among members. M-teams should set up a regular meeting on a cadence agreed by the members with the agenda being \u201cwhat\u2019s challenging this week?\u201d. Decide who will facilitate and each person will get a chance to have their challenge discussed in the meeting. When it\u2019s your turn, you talk a little about what you\u2019re struggling with. M-groups agree to a level of confidentiality so that group members are willing to be vulnerable; vulnerability leads to trust and better outcomes for the group. If you\u2019re interested in starting or joining an m-team meeting, reach out to other managers in the #managers Slack channel. Books in this section can be expensed. Notable books from the E-Group Offsite Book Selections may be added to the list below. We sometimes self-organize book clubs to read through these books as a group. When you give leadership training please screen share the handbook instead of creating a presentation. Feel free to reach out to anyone in the People Group for further support on leadership development topics. You can find us on the team page, using the People Group dropdown. The team may also be reached via HelpLab. Learn more on GitLab\u2019s view of being a public company. We have a page which documents our Mitigating Concerns. Many of our values help to mitigate some of these concerns. Maintaining an effective and efficient agenda is important to get the best out of the 1-1 (read as: one to one) meetings you have with your team members. Furthermore this page will take you through other tips and tricks to conduct an effective 1-1 meeting. We recorded a training about 1-1s which you can find here: We believe that the market opportunity for a complete DevSecOps platform designed as a single application for the software development lifecycle is several billion dollars and expanding. There are three primary trends outlined below that we have identified as the most significant to supporting the long term success of our business.\nWe also have a Mitigating Concerns page. Digital Transformation From time to time, we run internal book clubs on a book from one of our resource lists. All are welcome! However,\neach club has a suggested audience to indicate roles to which the content is tailored. To propose a new book club, create an issue in the book clubs project. Individual book clubs which need a dedicated project can create on in the book-clubs group (example). This book club was internal-only. At GitLab, we use coaching to: Coaching conversations are fluid, dynamic acts of co-creation where the coach and the coachee are equal partners. People leaders and individual contributions alike use coaching at GitLab during our 360 review process, giving and receiving feedback, throughout stages of career development, and more. Conversations with regards to compensation are an important part of being a people manager. This page will take you through information and recommendations to effectively manage and guide these conversations. If you\u2019re ever in doubt or have a question, don\u2019t hesitate to reach out to your aligned People Business Partner. For more information for managers on the FY25 Annual Compensation Review Cycle, please refer to the Manager Information Guide The purpose of this section is to give you the following: Delegation is the assignment of responsibilities to another person for the purpose of carrying out specific job-related activities.  Delegation is a shift of decision-making authority from one team member to another. At GitLab, we place a high level of importance on interpersonal skills for workplace effectiveness. Employee interpersonal skills have an impact on productivity, morale, engagement, performance, and help us live up to our values. Whether you are a People Manager or an Individual Contributor, being skilled in \u201cemotional intelligence\u201d (also referred to as EQ) is a key attribute to interpersonal effectiveness. One of the most important factors in people\u2019s decisions to stay or leave a job is the quality of the relationship they have with their immediate boss and their coworkers. There are practical ways to learn and apply interpersonal skills in a remote environment. In this section of the handbook we review the key characteristics of emotional intelligence (EQ) and how to improve your interpersonal skills professionally and personally. You\u2019ll learn how to work more effectively with others. GitLab Onsites noun Dedicated time for all-remote teams to come together in person to build trust As a leader in all-remote work, it\u2019s important that we recognize the value and impact of time spent in the same location. Meaningful time spent together influences the trust and results our teams build. Co-located companies often gather for offsites to connect in a new location. In our all-remote environment, we call in-person team meetings onsites. At GitLab, one of our favorite books is, \u201cHigh Output Management\u201d by Andrew Grove. The book provides a comprehensive overview of a manager\u2019s role and purpose. Our CEO, Sid, applied many of the concepts covered when partnering with the People team to design management and people practices for GitLab. On this page, we will cover some of the key topics covered in the book and what they mean for people leaders. With GitLab\u2019s results-driven culture, the demands of product innovation around AI, the fast-paced and ever-evolving business environment, our organization recognizes the crucial balance between achieving ambitious goals and maintaining the well-being of our team members. The World Health Organization defines Burnout as \u201ca syndrome conceptualized as resulting from chronic workplace stress that has not been successfully managed. It is characterized by three dimensions: feelings of energy depletion or exhaustion; increased mental distance from one\u2019s job, or feelings of negativism or cynicism related to one\u2019s job\u201d On this page, we have outlined how we make decisions at GitLab. GitLab\u2019s values are the guiding principles for our business. They inform hiring, performance management, and promotion assessments. They also guide other decisions that we make. At times, values may be in conflict. To address this, GitLab has a values hierarchy. At the top of this hierarchy is \u201cresults\u201d. While items higher in the hierarchy don\u2019t always override items lower in the hierarchy, this structure guides team members as they weigh decision making alternatives. In this section, we will review the definition of conflict, the different causes of conflict, different methods for addressing conflict, steps in the conflict process, and some do\u2019s and don\u2019ts of workplace conflict. Conflict in the workplace is inevitable when you have team members of various backgrounds and different work styles all working towards the same goals and OKRs (Objectives and Key Results). Conflict should never just be avoided, conflict should be managed and resolved. The first step is for the team members who experience conflict to work to address the situation to work towards a resolution. If a resolution is not possible, the manager should work with the team members and their assigned People Business Partner to help foster a resolution. On this page, we will give an overview of how GitLab operates as a no matrix\norganization. \u201cNo matrix organization\u201d means that everyone reports to exactly one person. At\nGitLab we have a simple functional management hierarchy. Technical leadership at\nGitLab is leadership without a formal reporting line, based on project roles and\nexperience. Who better to learn how GitLab enables a functional organization structure than our leadership. As part of the CEO Handbook Learning Sessions, the L&D team facilitated a discussion with executives during a E-Group offsite, to discuss no-matrix organization and GitLab organization design. A skip-level meeting is a meeting during which a manager\u2019s manager meets directly with team members without the direct manager present. While 1-1s facilitate communication between a team\nmember and their manager, skip levels should facilitate communication between the leader\u2019s whole team, not just their direct\nreports. The CEO conducts quarterly skip-level meetings with all indirect reports. The goal of this meeting is to help the CEO be a better manager of him/herself, of the report of their function, and the rest of the executive team. What is going well, what needs improvement, how can the CEO help, and what should the CEO focus on when coaching the report?"
    },
    {
        "title": "Learning & Development",
        "url": "https://handbook.gitlab.com/handbook/people-group/learning-and-development/",
        "content": "Why we exist: GitLab Talent Development (commonly referred to as \u201cLearning & Development\u201d) exists to enhance team member performance, expand capabilities, and further develop skills that make GitLab team members the top talent in the industry. We strive to foster a culture of continous growth so that GitLab remains a great place to work. Positive impact on team member experience leads to a positive impact on results, which leads to a positive impact on GitLab customers. Where are we going: GitLab seeks to be recognized as a top organization for remote learning & development. We aim for a future where everyone contributes to a culture of curiosity. What we do: We empower individual contributors and equip leaders through self-service learning. We accomplish a culture of development by: Performance indicators We are a small team, but we\u2019ve got a big role to play at GitLab! The Learning & Development team has a number of resources to help team members learn new skills. Click the button(s) below to learn more about each one: Multiple teams across the company contribute to learning and development of our team members. Below is a list of some teams we partner with and how we collaborate. The work with us page outlines issue templates and processes that are managed on our Learning and Development issue board. We review and classify requests based on the scalability and possible organizational impact. Learning solutions that can be applied and used company-wide take priority. Our process includes: All material in the handbook is considered training and we build handbook first learning content. One of L&D\u2019s primary responsibilities is to ensure that content lives in the appropriate section in the handbook. In the below video, Sid, explains how the content of courses is not separated from the handbook to the L&D team. The L&D team uses GitLab issue boards to track priorities, organize collaboration, and set due dates based on three-week sprints. Additional planning and notes around the sprint board can be found in this issue. If you want the wider L&D team to be aware of your MR, please apply the ld-handbook-update label to the MR. This will trigger a Zapier automation that posts the MR title and link to the #learning-team Slack channel. The L&D team freqently uses the following tools for creating and communicating learning opportunities at GitLab. In July 2024, GitLab published the first iteration of our Learning Content Accessibility Guidelines. We ask that team members who create both internal and external learning content: Adults learn differently in the workplace than in traditional learning environments or how they learned growing up. If you are developing training, consider applying principles related to Adult Learning Theories, those include: Add learning objectives to the beginning of the content to state a clear training outcome. A clear learning objective describes what the learner will do upon completion of a learning/training activity. Good learning objectives are what you want team members to learn or achieve. Steps to creating learning objectives: Sample learning objectives: Please let us know how you would prefer to learn by filling out this form! The launch of the GitLab Learn LXP was awarded a Silver Excellence in Learning by the Brandon Hall Group for the Best Launch of a Corporate Learning University.  Welcome to the Learning & Development (L&D) page at GitLab! L&D is an essential part of any organization\u2019s growth, success, and overall business strategy. We want to support the growth of our GitLab team-members\u2019 competencies, skills, and knowledge by providing them with the tools they need and the opportunities to progress their own personal and professional development. GitLab has several compliance courses and resources. Explore the chart below to learn more. Use the links below to navigate to each Elevate program. Here is a useful guide to ensure you\u2019re choosing the right program: Not a GitLab People Leader? We\u2019ve put together a Level Up course available to all GitLab Team Members, to share the self-paced training content for each Elevate module. You can check it out here: Elevate Learning Materials. Welcome to the GitLab 101 page! Here you will find some basic info on how to use GitLab. Everyone at GitLab needs to know how to use GitLab and be technical to some level. This training is geared toward GitLab team members who are in non-engineering roles (i.e. talent acquisition, peopleops, marketing, finance, etc) and/or have not used a DevOps tool like GitLab before. This can also be helpful for non-engineering people outside of GitLab wanting to learn how to use GitLab for personal projects. Welcome to GitLab 201. This is a set of reading material and video tutorials for GitLab team members who are in non-engineering roles (i.e. talent acquisition, peopleops, marketing, finance, etc) and/or have not used a DevOps tool like GitLab before. This can also be helpful for non-engineering people outside of GitLab wanting to learn how to use GitLab for personal projects. Epics let you manage your portfolio of projects more efficiently and with less effort by tracking groups of issues that share a theme, across projects and milestones. Epics are great for project management as they help to better enhance your workflow. The L&D Listening Tour will identify opportunities at GitLab where training solutions can build and develop great teams to deliver on key business results. The GitLab L&D team is hosting a listening tour to: As GitLab\u2019s talent needs evolve, there is an opportunity for our L&D team to shift to a proactive, business-aligned resource. Managers across GitLab can leverage this to get ahead of talent challenges and upskill team members to meet the rapidly changing demands of our talent market. We also see a clear opportunity to re-inforce the values at GitLab through intentional resources as well as help new and existing team members learn our \u201cways of working\u201d.\nOur prediction is that, upon the end of the L&D Listening Tour, our team will have a clear vision of the highest impact area that L&D can influence in FY25. This handbook page is meant to support both learners and administrators in Level Up. Thought Industries is the provider of the Level Up platform and is mentioned often in this documentation.  At GitLab, everyone can contribute. Read below about how to contribute to Level Up. If you\u2019d like to explore the content creation options in Level Up, check out this Demo Course. Please note that the next Manager Challenge has been paused until further notice. Team member can reach out in the #learninganddevelopment Slack channel with any questions about upcoming manager training or utilize their Growth and Development benefit for external training opportunities. You can learn more about our current manager development program on our Elevate handbook page. Developing managerial skills is no small task. While taking on a new or expanded role as a manager brings great rewards, it also introduces new challenges. To be successful as a manager it requires management training that develops your ability to lead a functioning team while implementing management skills and abilities such as adaptive leadership, building trust, psychological safety, and conflict resolution. Mentorship is an opportunity to learn from personal experience, background, and perspective. Mentorship builds trust, provides a safe space to make mistakes, and encourages growth for both the mentor and mentee. Reach out in the #mentoring Slack channel with questions or feedback. The Power of Mentoring Team members have multiple options to participate in mentorship at GitLab. While our team loves making learning and development content for the rest of the organization, we also love learning and growing ourselves. This page is meant to serve as a resource for the L&D team to explore, learn, and grow. We encourage all L&D Team Members to add to this page as you find additional resources. The content should be accessible at no cost but anything requiring payment can be reimbursed following the GitLab Growth and Development policy.  Visit the Team Workshops Level Up page to get started! Team Workshops are customized, group learning opportunities for teams at GitLab. Workshops are interactive, collaborative, and led by expert facilitators. They are designed to address specific skill gaps, create space and time for building connection and trust, and developing shared best practices. The program is available to all teams at GitLab, including teams of individual contributors and people leaders. Workshop duration is varied. Your first few months as a manager at GitLab can be exhilarating. They can also be challenging, especially when you need to quickly identify what is important for your success.\nSome of the challenges you might face are: Research by HR consultancy DDI has shown, that your transition may be one of the most demanding life experiences that you will ever endure. However, the satisfaction of leading teams to success makes that journey worthwhile and inspiring. Over the second half of FY24, the Talent & Engagement team (in partnership with the Chief of Staff and People Business Partner team) will conduct a series of group discussions about our values and operating principles with high performers and values ambassadors across the organization. The objective of these group discussions is to determine where we may be able to streamline and simplify the operating principles associated with each value to make our values system more memorable and manageable. The Learning and Development team is available to support GitLab teams in the following capacities. Requests will be evaluated as they come in based on team\u2019s capacity for support, business impact, correlation to company OKRs, and number of impacted users. We work closely with leaders across GitLab to develop landing pages for learning material that is tailored to specific departments and teams. By creating learning hubs in Level Up, teams can contribute, curate, organize, and suggest professional development opportunities for their team members. Some scenarios where you might want to build a Channel include:"
    },
    {
        "title": "GitLab Onboarding",
        "url": "https://handbook.gitlab.com/handbook/people-group/general-onboarding/",
        "content": "Onboarding is incredibly important at GitLab. We don\u2019t expect you to hit the ground running from day one. We highly recommend taking at least two full weeks for onboarding and only in week three starting with team specific onboarding and training. Please feel free to participate in your team\u2019s work in your first two weeks, but don\u2019t feel like you have to contribute heavily. All onboarding steps are in the onboarding issue template which is owned by the People Connect team. The onboarding process for the new team member is self-driven and self-learning, whilst also remaining as asynchronous as possible settling into the remote life at GitLab. At GitLab we take great pride in dogfooding our own product, that is why all onboarding tasks are completed in a GitLab issue. First of all, what is an issue? You can learn more about what an issue is here. The People Connect Specialist assigned to the team members specific onboarding will open the onboarding issue at least 4 days prior to the hire date. Each onboarding issue has a main section that contains tasks relevant to all GitLab team-members and a due date of 30 days. Below the main section are department and role-specific tasks. Some roles and departments have tasks that link to a supplemental issue template or an additional onboarding page.  Reach out to your onboarding buddy or other GitLab team members if you need help understanding or completing any of your tasks. Through onboarding issues, you should gain access to our team member baseline entitlements. On Day 2 of onboarding an Access Request will be generated, if a template has been created for the role. Access requests are owned by the IT team. If you have any access requests related questions, please reach out to #it-help in Slack. In certain instances, the People Connect team may not be able to assist with onboardings due to a national holiday or Family and Friends Day. These specific dates are documented in the People Connect team availability. The People Connect team hosts a pre-onboarding call known as the Ta-New-Ki call (a play on the abstract Tanuki i.e. Japanese raccoon dog you will find in our logo). The purpose of this call, which is hosted in Zoom, is to give soon to onboard team members the chance to meet / socialise and to provide an opportunity to ask any lingering questions ahead of their start date. Internally we refer to this as an AMA (Ask Me Anything) call. This call is open to all current team members, hiring managers. This call occurs every two weeks on Thursday at two times to account for timezones. 11:00/23:00 PM PT 08:30 AM PT For current team members: To add the invite to your calendar, review the GitLab Team Meeting Calendar. For future team members: You will receive an email with the future dates. Please note that this call will take a place a week or two before your actual start date. General Topics Covered By default, all new team members are added to the below Slack channels from day 1 to ensure that they are able to ask any questions or for assistance in the correct channels upfront: An issue is created for new team members at least 4 business days prior to their start date. The Manager and a People Connect Team member will be assigned to this issue. Managers, People Connect and IT Ops all have tasks that need to be completed prior to the start date to ensure a smooth and successful onboarding process. For questions or help with any of these tasks feel free to reach out in the issue or by creating a request via HelpLab. The Senior People Connect Specialist completes a monthly audit of all open onboarding issues to ensure that the new team member, manager and People Connect team tasks are completed. More importantly, there are certain tasks which need to be completed  in line with our company compliance (security, payroll, etc). If any tasks are still outstanding, the People Connect Specialist will ping the relevant members on the issue requesting action on the items or checking whether the issue can be closed. It remains the responsibility of the People Connect Specialist to close the issue and remain compliant. The employment bot will automatically close any onboarding issues still open after 60 days. First of all, what is an issue? You can learn more about what an issue is here. To ensure a successful completion of the onboarding issue, it is important that all tasks are checked off, whether the task is applicable to the onboarding team member or not. Checking the box indicates one of the following: These templates are used by the People Connect team to onboard new team members. All onboarding related employment templates (country and role based) can be found in the public repository The People team is not involved in the process for hiring, onboarding, or offboarding temporary service providers. You can work with the Procurement team on these onboardings and review the temporary service provider internal handbook page for templates and other helpful information."
    },
    {
        "title": "GitLab Offboarding",
        "url": "https://handbook.gitlab.com/handbook/people-group/offboarding/",
        "content": "The offboarding process is facilitated by the People Connect team who collaborates throughout the process with various other stakeholders such as Team Member Relations, IT Operations and Payroll. If you have any questions around the offboarding process, please be sure to review the Offboarding FAQs handbook page. Note: Departing team members will receive a comprehensive email prior to their final date of employment with information such as the impact on benefits coverage, final pay, arranging for a laptop wipe and stock administration. For system access questions and laptop wipes related to offboarding, send an email to itops@gitlab.com. For payroll questions or outstanding expense claims, please reach out to either uspayroll@gitlab.com or nonuspayroll@gitlab.com. For any other offboarding questions from active team members please reach out to People Connect via HelpLab or send an email to people-connect@gitlab.com if your access has already been terminated. Note: If a termination date changes, please reach out to People Connect via HelpLab. The team will update Workday.  The notice is used as supporting documentation of the change and is saved in the team members Workday record. If the team member is employed via a PEO, they will also be notified by People Connect. Team Members resigning in France should also email a copy of their resignation letter to legal-employment@gitlab.com. Team Members located in Singapore who are resigning and are not Singapore citizens need to complete a Letter of Undertaking document and send it to payroll via HelpLab in order to process this with the local provider/partner. Please download or make a copy of the document in order to complete. Note: Involuntary terminations are only facilitated by Team Member Relations (TMR) who will initiate the process in Workday.\nInvoluntary offboarding of any team member is never easy. We\u2019ve created guidelines and information to make this process as humane as we can. Beyond the points outlined below, make sure to refer to our guidelines on underperformance, as well as the offboarding issue. The manager and the team member should have walked through the guidelines on underperformance before reaching this point. After the involuntary offboarding call has taken place and the last working day has been determined, team members will have no access to GitLab systems and may not be required to do any work on GitLab\u2019s behalf. If they are on \u201cGarden Leave\u201d they will still be active on payroll through the termination date. When determining the timing of the involuntary offboarding call and termination date it is important to consider any effect this might have on ongoing tasks and responsibilities of the team member. As a manager, in collaboration with the Team Member Relations Specialist (TMR) and/or the People Business Partner (PBP), we recommend to avoid scheduling the involuntary offboarding call while a team member is scheduled for any sensitive customer meetings or is on-call. If this is unavoidable, the manager is responsible for ensuring a transition/remediation plan. People Engineering automations will generate the offboarding issue at the end of the team member\u2019s last working day, as per notification from the Team Member Relations Specialist (TMR) and the People Business Partner (PBP). Once the Last Working Day or Garden leave expires the team member will be officially offboarded from GitLab.  Prior to the offboarding issue and the overall process for the term listed below. If appropriate (to be determined by conversation with the manager, the Group Executive, and People Ops), use the following offboarding memo, which is provided here as an openly viewable Google Doc, but of course needs to be personalized and tailored to each individual\u2019s situation.\nAs written, it is applicable to US-based employees only. Separation and Release of Claims Agreements do not apply for all offboardings. To review in which cases they do/do not apply, please reference the Severance Eligibility document accessible by People Connect Team and PBPs. In the case that a severance agreement is applicable, the steps below should be followed: Important Notes: For team members who will be placed on leave during an investigation please follow the process below: The People Connect member in the relevant rotation will complete a weekly audit of all offboarding issues opened within that specific week and check that all People Connect tasks have been completed and that the label peopleops::done has been added. All offboarding tasks by all Departments need to be completed within 5 days of the offboarding date. For systems that are more critical and time sensitive, these will be completed within the first 24 hours (example 1Password, Slack) by the relevant Departments. Information about application & system deprovisioners can be found on the Tech Stack Applications handbook page. To ensure a successful completion of the offboarding issue, it is important that all tasks are checked off, whether the system/tool is applicable to the offboarding team member or not. Checking the box indicates one of the following: All voluntary exits are eligible to be added to the Slack channel #gitlab-alumni, unless otherwise noted. Involuntary exits are not eligible for the alumni channel, unless otherwise noted by Team Member Relations.\nThe offboarding details provided by the terminatino transaction in Workday is how eligibility is determined and later shared with IT. The purpose of this channel is to network and socialize with team members. Joining the channel is voluntary and subject to GitLab\u2019s Code of Conduct. GitLab, the company, monitors the channel and can remove people from it at their sole discretion.\nThe GitLab Code of Business Conduct and Ethics is enforced in the channel. Our goals in communicating offboardings are transparency, and to provide an opportunity for team members to say goodbye. We understand that different individuals are comfortable with different levels of communication and that each offboarding situation has different situations and nuances. For this reason and out of respect for individuals, we have a couple of key guiding principles for communicating offboarding: Depending on the team members\u2019 role, timing of communication may vary (e.g. direct team, key stakeholders, etc.), and managers have discretion to determine who should be informed most immediately. The typical order followed for communicating departures is: The \u201cdirect team\u201d is typically the team member\u2019s peers within their immediate team (I.E. reporting to the same manager and/or in the same functional group, etc.) and is typically a relatively small group of people. In most cases, team members communicate their departures to their direct team, though messaging should be cross-checked with their manager for consistency. Key stakeholder communication can be done through 1:1 notifications, and/or by posting the update in team-specific channels for general awareness. Key stakeholders are individuals that departing team members work very closely with (typically in their day-to-day work) that will feel the impact of the team member\u2019s departure in their work. Managers of key stakeholders should also be looped into communication to ensure awareness. It is essential that key stakeholders are looped in to offboardings to: Departures should be communicated with stakeholders as soon as possible, with a maximum timeframe of 2 business days after the team member\u2019s departure. Where possible and appropriate, we also encourage managers to work with departing team members to align on transitions plans to transition as much of the departing team members\u2019 work as possible before their departure. In most cases, managers communicate team member departures to key stakeholders. As explained briefly in the offboarding issue, GitLab is not always able to provide full context on why people are leaving when they do. However as mentioned in the procedures, for voluntary offboarding, the team member can work with their manager on messaging to share a company-wide message about their departure. Once the news has been shared with the team member\u2019s team and other stakeholders, and messaging is agreed upon between the departing team members and their manager, the departure message should be shared in the #team-member-updates Slack channel.\nManagers and team members can optionally leverage this template as a guide on how to communicate a team member\u2019s upcoming departure: There will be situations in which team members prefer to share their offboarding message, and situations in which managers prefer to do so. Either is ok, so long as team member and manager have reviewed the messaging together prior to posting. If someone is let go involuntarily, this generally cannot be shared since it affects the individual\u2019s privacy and job performance is intentionally kept between an individual and their manager. If you are not close to an employee\u2019s offboarding, it may seem unnecessarily swift.\nPlease remember that these decisions are never made without following the above process to come to a positive resolution first - we need to protect the interests of the individual as well as the company, and offboarding is a last resort.\nAccording to our values negative feedback is 1-1 between you and your manager and we are limited in what we can share about private employee issues.\nPlease discuss any concerns you have about another employee\u2019s offboarding with your manager or your People Business Partner. Given the expectations and responsibility that come with a VP and above position, when there is an involuntary offboarding for one of these positions, additional context for the personnel change can be provided to the organization. Managers should consider cross-posting the message in #team-member-updates to inform the wider Department of the departing team member. We strive to maintain personal information regarding all team members private, this includes information regarding a team members voluntary or involuntary departure from GitLab.\nHowever, a manager with the consent and approval of the departing team member can share more details with the GitLab team regarding the decision to leave GitLab. If the departing team member gives their manager permission to share that information then the manager will share while making the departure announcement on the team call. Regarding involuntary offboarding, certain information can also be shared with the GitLab team regarding the departure. The departing team member may work with their manager to author a goodbye message for voluntary offboarding: In some instances there will be no further clarification on why a team member has departed, if there are concerns you can address those with your manager.\nDifferent levels of transparency will exist based on maintaining respectful treatment for all departures. Having team members leave may be a learning opportunity for some, but should not be a point of gossip for anyone. Managers will need to balance the opportunity for learning with the expectation of privacy and consult their People Business Partner should they have questions. Transparency is one of our values. In the case of offboarding, we opt to share the feedback only with peers and direct reports as needed, since we balance transparency with our value of collaboration and constructive guidance shared 1-1. GitLab\u2019s turnover data is only viewable internally. To track all tool deprovisioning, please open an offboarding issue following the offboarding standards. As part of offboarding, any GitLab property valued above 1,000 USD needs to be returned to GitLab. For laptops, please check and refer to the Laptop Buyback Policy which states that team members may, at GitLab\u2019s discretion, have the option to keep or buy back their existing laptops either when it gets refreshed for a new one, or when the team member is offboarding.  However, the option to purchase or keep a laptop at no cost may be voided where the team member is involved in cases of investigation, misconduct, termination for cause of any violation of GitLab\u2019s Code of Business Conduct & Ethics, or other legal or security related inquiries. To return your laptop to GitLab, please contact itops@gitlab.com immediately upon offboarding. This section of the Accounting Department. To remove someone from Navan Expense Log in to Navan Expense and go to \u201cSettings\u201d in the left sidebar.\nSelect the right policy based upon the entity that employs the team member. Select \u201cPeople\u201d in the left menu.\nSelect the individual\u2019s name and click \u201cRemove\u201d.\nIf the person has a Corporate Credit Card assigned to them, please notify Accounts Payable before un-assigning it. For involuntary offboardings it is optional to do a retrospective on the hiring, onboarding and coaching/communication of the departing team member. As a manager, you can use this template for a retrospective. Please share the filled out template with your manager as well as the People Business Partner for your group. Within the Engineering division this is a required process because it causes hiring managers to reflect on what led to the ultimate decision of parting ways with the team member, and how that might be prevented during future hiring processes. In the United States, Unemployment Insurance provides benefits to GitLab team members who have lost their jobs through no fault of their own. The purpose is to provide temporary financial assistance to employees who meet certain requirements. Unemployment insurance is administered at a state level and in compliance with Federal Law. Each state establishes its own eligibility criteria and regulations surrounding Unemployment Insurance with respect to the amount allocated, duration and eligibility for Unemployment Insurance. Eligibility criteria include meeting the state specified requirements in terms of both earnings and time worked during the base period. In some instances the state may require additional supporting information particularly more extensive wage related details surrounding a claim. Unemployment Insurance is funded through employer contributions and most states will have State Unemployment Taxes that apply however many employers typically pay the State Unemployment Taxes too. If you are a full-time team member and you are contacted by your state\u2019s Unemployment Commission to discuss your request for Unemployment Benefits, you may be a victim of Unemployment Claim Fraud. Before giving out any information to the caller, please confirm that you are speaking with an agency employee. If you confirm with your state\u2019s Unemployment Commission that there is a fraudulent claim, please report it via HelpLab to the People Connect team. Additionally here is a link to the U.S Department of Labor Contact Particulars to report Unemployment Insurance Fraud."
    },
    {
        "title": "Spending Company Money",
        "url": "https://handbook.gitlab.com/handbook/finance/spending-company-money/",
        "content": "All team members and contractors must protect our Company assets, such as equipment, supplies, cash, and information. Treat Company assets with the same care you would if they were your own. No team member or contractor may commit theft, fraud or embezzlement, or misuse Company property. This table captures all of the links for different policies that are documented around using Company money. This includes information of when to use our expense tool Navan, when to use a virtual credit card and when to get a PO from Zip."
    },
    {
        "title": "Talent Assessment",
        "url": "https://handbook.gitlab.com/handbook/people-group/talent-assessment/",
        "content": "The purpose of the Talent Assessment Program is to identify and retain team members who drive the success of our organization. This is a top priority and strategic process for people managers at GitLab. Our Talent Assessment Program (which is a critical piece of our overall Talent Development Program serves as a mechanism to help mitigate a couple of our biggest concerns: lack of performance management and losing key people. Additional key benefits of the Assessment Program include: We use Workday to complete our Talent Assessment. You can review an overview of Workday Talent here. Please reach out to your People Business Partner if you have any questions.\nYou can also review the following guide which mirrors what is included in the Workday Talent Assessment template to prepare you prior to the tool being launched. There are many talent assessment options, and we have opted to use a Performance/Growth Potential Matrix (commonly known as \u201c9-Box\u201d in the US) and annually review Key Talent. GitLab\u2019s Performance/Growth Potential Matrix is a type of talent assessment that forms part of our Talent Development Program. The FY5 talent assessment should consider performance from the period FY25Q1 - FY25Q4 In addition to assessing Performance/Growth Potential, we annually review Key Talent aligned with the criteria outlined below on this page. The combination of Performance/Growth Potential and Key Talent assessments allow us to identify team members who drive the organization\u2019s success and use our engagement tools to retain them. For team members with a tenure up to three months to the launch of the Talent Assessment Program will be designated as \u201cToo New to Rate\u201d. Also in some cases a \u201cToo New to Rate\u201d designation might be applicable for newly promoted or transferred team members. More about that designation can be found below. This matrix is an individual assessment tool that evaluates both a team members current contribution to the organization and their potential level of contribution.\nIt is commonly used in succession planning as a method of evaluation an organization\u2019s talent pool, identifying potential leaders, and identifying any gaps or risks.\nIt is regularly considered a catalyst for robust dialogue (through a calibration process) and is considered more accurate than one person\u2019s opinion.\nThe performance/growth potential matrix can be a diagnostic tool for career development. The matrix serves as a tool to help managers assess, develop, and coach their team members - ultimately resulting in an ability to more effectively and efficiently lead teams. Performance includes both results and behaviors, and is broken into three areas: Developing, Performing, and Exceeding. Please note that Developing should not be automatically associated with underperformance. As highlighted below, Developing can also be used for new hires or newly promoted team members that are still ramping up in their new roles. Your manager will provide example and detail to ensure the rationale behind the Developing rating is communicated. Based on the Job Family responsibilities, values and remote working competencies, team members in this category are not meeting all of the expectations. There is still more to learn and improve on in the current position to achieve the desired results. This may be due to the following: Examples: Based on Job Family responsibilities, values and remote working competencies team members in this category are \u201con track\u201d and meeting all expectations. They can independently and competently perform all aspects of the Job Family responsibilities in a way that is aligned with our values and competencies. Their performance consistently meets the requirements, standards, or objectives of the job, and they can occasionally exceed expectations. They deliver results in a timely and accurate fashion. This performance may be expected as a result of: Examples: Team members that are exceeding consistently surpass the demands of their current position. They demonstrate unique understanding of work beyond the assigned area of responsibility. They contribute to GitLab\u2019s success by adding significant value well beyond Job Family requirements, values, and remote working competencies. This performance may be expected as a result of: Examples: Please note that an Exceeding assessment for the performance factor does not guarantee a promotion. While the performance factor is a consideration, there are several considerations that are reviewed when evaluating promotion readiness. Please work with your manager to align expectations. Note that this is an expected distribution, not a forced distribution. The bell curve distribution aligns with what is most commonly used as a benchmark in the industry and serves as a baseline for us to review and calibrate against. There may be exceptions that are justified that can be discussed and reviewed during calibration. Where deviations from the expected distribution occur, managers should use this as a data point to further review and work with their leadership to ensure appropriate growth plans are in place, proper role fit exists, hiring plans are adjusted, that we are promoting at a fair and accurate rate. We expect roughly ~5% of team members to be assess as TNTR (Too New To Rate).\nPerformance: Growth Potential: Remember that \u201cDeveloping\u201d for Performance and Growth Potential should not be automatically associated with underperformance, and that many newly promoted team members and new hires fall into this category. While the primary objective of the performance axis of the Performance/Growth Potential Matrix is to calibrate team member performance, this axis of the matrix also directly impacts the Performance Factor, which is a determining factor in the annual compensation review. Please reference the Total Rewards Performance Factor page for more detail on compensation impact. How can managers determine whether their team members are Developing, Performing, or Exceeding? \u201cThe Performance Factor\u201d is determined from several components outlined below. It is optional to use The Performance Factor Worksheet for weighing the different Performance Factors. Performance against Job Family responsibilities, requirements, performance indicators, and functional competencies (if applicable) should be weighted at 60%. For management roles, please also review and consider the levels outlined in the Organizational Structure. Performance against these competencies should be weighted at 40%. When completing the talent assessment form, team members and managers should reflect on the applicable competencies and job frameworks when filling out the achievements, strengths, and opportunities section.  Given GitLab\u2019s CREDIT values should be lived, with each day representing a new opportunity to refamiliarize oneself with said values and strive to implement them in every professional interaction, there is an opportunity for team members and managers to rate how a team member demonstrates each of the CREDIT values.  The following rating scale is used for each value: Use the comment box at the end of the CREDIT values section to provide examples to support the ratings selected. While performance is focused on the past and present, growth potential is focused on the future. Because of the nature of the future-focus associated with growth potential, it is more difficult to measure than performance, and inherently more qualitative than quantitative. A key element in determining growth potential is the manager and leadership observation and experience working with team members. Managers can gauge team member growth potential against the expectations in their current role or their growth potential to take on different roles across GitLab. Growth potential refers to the ability and desire of a team member to successfully assume increasingly more broad or complex responsibilities and learn new skills, as compared to peers and the roles\u2019 responsibilities outlined in their respective Job Family. This could include the growth potential to move up to the next level in their job family, and/or a lateral move. The Growth Potential assessment helps managers determine the best growth trajectory for their team members. The growth potential assessment will be used as input to leverage our engagement tools, offer lateral and upwards career opportunities, and do succession planning. Growth Potential can change over time as team members develop new interests, as new opportunities for growth arise, and as team members continue to broaden their knowledge, skills, and abilities. There are four primary pillars to consider when measuring growth potential: Under each pillar there are a few questions that managers should consider when assessing team member growth potential. Please note that the answer to all of these questions does not have to be yes to determine a team member is \u201cexceeding\u201d growth potential, the questions are here to help guide managers through the thought and evaluation process. After assessing team member growth potential based on the four pillars outlined above, managers can determine whether team member growth potential is currently developing, growing, or exceeding. \u201cDeveloping\u201d growth potential generally refers to a team member who is not working at full growth potential against the roles and responsibilities outlined in their Job Family. There could be a variety of reasons for this, including: Please note that \u201cdeveloping\u201d growth potential does not equate to \u201cdeveloping\u201d performance, but correlates with the pillars of growth potential outlined in the \u201cmeasuring growth potential\u201d section below. Examples: \u201cGrowing\u201d growth potential generally refers to a team member who is growing in their current role and demonstrating interest in advancing (up or laterally) and they exhibit knowledge, skills, and abilities that indicate this. Team members with \u201cgrowing\u201d growth potential generally: Example: \u201cExceeding\u201d growth potential generally indicates that a team member will be ready for promotion within the next year (or when an opportunity arises). \u201cExceeding\u201d growth potential team members: Example: The portion of the Performance/Growth Potential matrix that often entails the most significant time commitment is the live calibration session of team members with leadership. The calibration session is very valuable to ensure consistency across the Job Family and level, raise any questions, and provide cross-departmental and/or cross-divisional feedback on team members to capture the assessment of different managers as opposed to the opinion of the direct manager exclusively. Calibration can be done asynchronously or synchronously, and should be done by level (i.e. Manager calibration for their directs, Director calibration for their directs, etc.) so as not to disclose Talent Assessment evaluations amongst peers. For newly onboarded team members, with a tenure up to 3 months, we have implemented a \u201cToo New to Rate\u201d (TNTR) assessment category. This designation will be applied to individuals with a start date within 3 months of the kick off of Talent Assessment as they have not yet had sufficient time to demonstrate their Performance/Growth Potential according to the defined pillars. The introduction of a \u201cToo New to Rate\u201d category is a solution as feedback was raised that being rated \u201cDeveloping\u201d in many cases does not reflect the actual Performance/Growth Potential. Therefore a TNTR designation is to accurately reflect the time to get up and running of recently onboarded team members. This category acknowledges that new hires require a reasonable timeframe to familiarize themselves with the organization, their role, and the expectations before they can be accurately assessed using the Performance/Growth Potential Matrix. While newly onboarded team members do not need to complete the Talent Assessment evaluation in Workday, it\u2019s still important for them to have a check-in conversation with their manager. We recommend that this conversation happens after the team member has completed 3 months with GitLab. We\u2019ve created this template for team members and managers to complete. The goal would be for the newly onboarded team member and their manager to come together to have a conversation reflecting on their first 3 months at GitLab, highlighting their strengths and opportunities, then aligning on any support needed for the team member moving forward. Besides team members with a GitLab tenure up to 3 months (New hire TNTR), the \u201cToo New to Rate\u201d designation will also be available for team members that have just transferred or were promoted to a new role. Please see the Promotions or Transfer During Assessment Cycle section for more details and guidance on how to evaluate and consider performance in these scenarios. If any of the above cases arise it is recommended that you discuss with your People Business Partner to ensure the Too New to Rate designation is consistently applied. The calibration session is one of the most important pieces of the Performance/Growth Potential Matrix process, as it provides time for managers, their peers, and their manager to calibrate. Below are a few communication guidelines to ensure efficiency and fairness during the calibration session discussion. It is likely not necessary to discuss each team member in detail, particularly for larger groups. Calibration sessions typically focus on gaps, outliers and areas that might require additional management attention and/or alignment. As a best practice, we should calibrate outliers. \u201cOutliers\u201d are typically considered to Box 1 (\u201cExceeding Growth Potential\u201d and \u201cExceeding Performance\u201d) and Box 9 (\u201cDeveloping Growth Potential\u201d and \u201cDeveloping Performance\u201d). People Business Partners and business leaders have discretion to expand this threshold as needed, but live calibration for team members in Box 1 and Box 9 should be the baseline across the board. A few additional reasons to consider calibrating beyond Box 1 and Box 9 are: It is absolutely essential that managers complete the required pre-work to ensure that the live calibration session is as efficient and productive as possible. Pre-work includes: While we want to encourage open and transparent conversation during calibration session, there are certain topics that should be avoided to ensure we respect team member privacy. After the calibration sessions the performance and growth potential outcomes can be used as input for the following: Below is the high level timeline for the formal assessment beginning in Q4 FY25 (January). Different departments may have additional due dates built into the high level timeline, so please follow up with your People Business Partner if you have any questions. *Team members who are on Leave of Absence (LOA) on TBD are excluded from the auto advancement of their talent assessment until they return to work. Note: For full details on our Annual Compensation Review (ACR) timeline and cycle, pelase refer to our ACR handbook page. GitLab completes talent assessment at least once per year in Q4, with a recommended informal mid-year check-in. The formal assessment ideally takes place prior to the annual compensation review. Our e-group completes Performance/Growth Potential Matrix multiple times a year for their direct reports. Anyone hired on or before January 31st should receive a Performance and Growth Potential assessment, as they are eligible for Annual Compensation Review. However, if the team member being assessed has been with GitLab for a period of 3 months or less or recently transferred roles or was promoted, please see the Too New To Rate description. It is up to all team members\u2019 discretion if they wish to complete their Self-Evaluation in Workday. While they are volunatary, self evaluations are highly encouraged so the team member\u2019s perspective is captured and shared with their manager prior to the manager\u2019s evaluation and Calibration Sessions. Please review the most current timeline to ensure a timely delivery. The Performance/Growth Potential Matrix typically takes 4-6 weeks to complete from beginning to end. Steps are as follows: Aligned with the timeline, managers can see final assessments for each of their team members in their respective Workday profiles. The cut-off date to determine whether to assess team members as Too New to Rate based on recent promotion/transfer for the FY25 Talent Assessment cycle is based on their time in role prior to the start of the Talent Assessment cycle, 2025-01-27. Guidelines are as follows: It is important to note that because being promoted recognizes high performance both in terms of increased scope/responsibility and monetarily through compensation increase therefore a promotion \u201cresets\u201d the performance factor evaluation. While a recent promotion resets the performance factor evaluation, and a job transfer is internal mobility that may be a lateral job level, there are  soft skills and technical skills that are most likely transferable. When assessing team members who have transferred teams or changed roles throughout the year, managers should gather feedback from the previous manager on performance as well and take that into account when evaluating and documenting performance to reflect performance for the entire year. Managers should also provide the team member feedback on how they\u2019re doing in their current role to ensure they\u2019re set up for success, and aware of feedback moving forward in their current position. In most companies the Performance/Growth Potential Matrix is used exclusively as a management tool and results are not typically shared with team members. In the spirit of our transparency value, we want to encourage feedback with team members. Discussion topics that arise during calibration sessions (or at any other point during the assessment process) are confidential. Please do not share with anyone other than each individual team member. After calibration sessions are done and performance and growth potential factors are determined, it\u2019s time to communicate the final results with team members. Communications can begin after you have been notified that final talent assessment factors have been approved by the E-group. The conversation following the talent assessment process is the most important part; it is a great way to drive alignment with your team members and set them up for success moving forward.  Below are  some of the best practices for communications, but remember, if you are ever in doubt please reach out to your manager or People Business Partner for additional support. The script below is intended to help you structure your Performance and Growth Potential conversation. Personalizing this conversation to reflect your authentic tone will make this a more effective conversation with your team member. \u201cThank you for taking some time today to discuss your Performance and Growth Potential. I wanted to discuss your achievements and strengths, improvement areas, future development, and the final result of the talent assessment.\u201d \u201cI assessed your performance factor as *[Insert Performance factor]:\u201d \u201cI assessed your performance as [Insert Performance Factor] because:\u201d \u201cI assessed your growth potential factor as *[Insert Growth potential factor]:\u201d \u201cI assessed your growth potential as [Insert Growth Potential Factor] because:\u201d If a team member was identified as key talent, please ensure to communicate to the team member during the talent assessment conversation. I\u2019d like to thank you for your hard work as, and I look forward to continuing to work together! Do you have any questions? [Allow team member to ask questions and respond]\nAs a next step, let\u2019s schedule some time to talk more about what you want to do in the future and create a career development plan together OR let\u2019s talk about how this feedback should be incorporated into your Individual Growth Plan. The most important part of the talent assessment discussion is to determine next steps in partnership with your team member. The team member should be the DRI for the next steps with support from you as their manager. Our Career Development handbook page includes a lot of great information and resources on career development including an Individual Growth Plan guide which should help provide structure and a plan for next steps.\nIf you have any questions or concerns about next steps, please contact your manager and/or your People Business Partner. The Talent Assessment involves all team members and managers. Team Members are assessed according to performance and growth potential. Team Members should be prepared to have a conversation with their manager about their performance and growth potential in Q1 each year. Managers assess their team members\u2019 performance and growth potential. Managers attend calibration meetings in which team members\u2019 ratings are discussed and evaluated to ensure consistency and minimize bias. Once the program closes, managers are responsible for communicating Performance/Growth Potential Factor to team members. How does this impact the way I work at GitLab? How does this impact the teams I lead? Who can I reach out to in supporting me during Talent Assessments for my team? As a manager, when reviewing my team members, what is the difference between Developing and Underperformance? Will my Growth Potential assessment impact my compensation? Yes in FY25 both Performance, Growth Potential, and Key Talent Assessment can impact your Total Rewards. If you have any questions, please reach out to your aligned People Business Partner. Can my performance factor be changed? Does this mean I am automatically getting an X% increase in the upcoming Annual Compensation Review?\nThe Performance/Growth Potential Factor is one of the factors considered in the Annual Compensation review. The recommended increases displayed in the handbook are there to ensure company wide consistency. The factors taken into account for the Annual Compensation Review are: When is the next opportunity for my performance to be reviewed? What can I do to change my performance factor in the future? Can my Growth Potential rating be changed? What can I do to change my Growth Potential rating in the future? My team member is currently on a performance remediation plan; how should I handle this? My team member is on a leave (protected leave or PTO) during the Talent Assessment period. How should I handle communication of their assessment? If they will be returning from leave before the due date to communicate Talent Assessment results, please wait until their return from leave to communicate their assessment. If they are returning from leave after the due date to communicate Talent Assessment results, you may email them to offer to discuss their assessment. If they do not reply or prefer to wait until their return, please respect that choice. My team member was on protected leave for a large portion of the Talent Assessment period. How should I factor this in when assessing them? It\u2019s important to ensure you are assessing the team member\u2019s performance for their contributions while working during the assessment time period. There should be no adverse impact on their overall assessment due to being on leave for a portion of the period. During calibration, please remain vigilant to ensure no private details related to their time away are disclosed. Please reach out to your PBP to discuss the specific details related to your team member. My team member is on leave of absence during the Talent Assessment communication window. What happens to their Talent Assessment? Please do not action the To-Do task \u201cMeet with your Employee\u201d if your team member is on leave of absence (LOA). We will exclude team members on LOA from the auto advancement setting on TBD and you can communicate their talent assessment when they return to work. My team member was assessed as key talent last year, and is not for this assessment period. How should I handle communication with them? There is no guarantee that team members will retain their key talent assessment each assessment period. Make sure to explain the reasons why their key talent assessment has changed, including how we assess Key Talent and the definition outlined in the Handbook.\nRemember to end the conversation by discussing what your expectations are of key talent going forward. It\u2019s important not to make promises about future assessments, but to focus on what makes a team member critical to the business, and how you, their manager, will support them. My team member was exceeding performance last assessment, and is not for this period. How should I communicate this change? It\u2019s important to take a look at what may have changed since last year. Is your team member in a new role? On a new team? Did they take on bigger stretch assignments?\nAny of these factors can influence a team member\u2019s performance. Be prepared with specific examples to share which support your performance assessment. The feedback conversation should also focus on what success looks like for the team member in the year to come and how you, as the manager, can support them with their goals. I have just adopted a new team, and the previous manager is no longer at GitLab. How can I assess the performance of my team fairly? You may be able to gather insights from your manager or cross functional stakeholders who have worked closely with the team member in the performance period. You may have access to the recent 360 feedback for each of your team members, as well as their talent assessment from last year to help inform your thinking. If you haven\u2019t already, it\u2019s important to ask the team member to share their own perspective on their accomplishments prior to you taking the role, so you are well prepared for the discussion of your assessment. My team member does not agree with their placement in performance and growth potential. How should I approach this? Remember that this conversation will be most effective if you are well prepared. If you haven\u2019t yet, take an opportunity before the performance and growth potential conversation to understand their own assessment of their results.\nDuring the performance and growth potential conversation, provide the opportunity for a dialogue with your team member. Remain open and curious about their perspective. Engage in active listening, ensuring that you aren\u2019t planning your counterpoints while they are sharing. The expectation is not that the results will necessarily change but the insights they provide may shape how you both think about their growth and development path.\nIf you feel a conversation might be particularly challenging, you may reach out to the TMR team or your PBP to role play the discussion and ensure you are prepared. My team member is exceeding growth potential expectations, how should I be thinking about their ongoing development? Great! At GitLab team members have the opportunity to own their own development, and deserve a great manager (you) to facilitate it. Ask your team member to articulate where they would like to see their skills and career develop. You may have insights that help them refine those goals based on where you see the business going, as they will be most successful in gaining the experience they\u2019re looking for if there are opportunities to align those goals with business goals.\nUsing the 70-20-10 model for learning, help your team member identify experiential and formal learning opportunities, and consider connections you can facilitate that will support their growth.\nThe Career Development handbook page has more ideas to help your team member craft a growth plan, including information on GitLab\u2019s Growth and Development benefit. How should we be communicating Growth Potential to team members who we haven\u2019t communicated this to before? First, ensure the team member understands what we mean when we say we are assessing Growth Potential, including the 4 pillars that you considered when making the assessment. Be prepared with specifics that led to your evaluation.\nRemember, Growth Potential can change over time as team members are promoted, develop new interests, as new opportunities for growth arise, and as team members continue to broaden their knowledge, skills, and abilities. Avoid making promises, but if your team member sees themselves in a higher position, help them understand behaviors you expect to be able to assess them differently next time. I received unexpected feedback about my team member from a cross-functional stakeholder in my calibration session. What should I do? If you receive unexpected feedback during the calibration, ensure you really understand what happened, and what has been discussed with your team member so far. If someone has tried to help this team member in the past, how did it go? Can your peer provide specifics to help you understand the impact of the behaviors? Talk to your peer about the importance of using this feedback to help your team member grow, and make sure you have agreement on how you plan to deliver this message.\nDuring the discussion with your team member, be prepared to gain their perspective on the situation first. Listen actively and consider their point of view. When delivering the message, consider the root cause, focus on impact and alignment with our values, and end with a discussion on future actions that would be more successful.\nIf and when appropriate, check in with your peer on how improvements are going. Be sure to stay close to the situation so you are in a position to deliver more timely feedback if the behavior is ongoing. How do I assess team members in acting or interim roles? For team members who have assumed an Acting or an Interim role, we will assess team members aligned with their permanent positions (i.e. not the Acting or Interim position).\nAs the Talent Assessment impacts compensation, and Acting/Interim periods are not permanent, in the instance that a team member does not end up moving into the Acting/Interim role permanently, we would not want to have their compensation impacted by a temporary position. My team member is performing at a high level in terms of results, but they struggle with behavioral alignment to one or more of our values. How do I take the \u201chow\u201d into account when I am assessing their performance and growth? Review the handbook content on how we measure Performance and how we measure Growth Potential. When a high output/results-oriented team member is struggling with soft skills and/or behavior, this is oftentimes related to improvement areas in terms of alignment to our values competencies, and/or our Growth Potential pillars (particularly, but not limited to, Self-Awareness). Considering our measurement guidelines for Performance and Growth Potential holistically, and be sure that your assessment takes all of our competencies, job family responsibilities, and pillars into account. My team member has the skills to perform, but there are will-based performance issues that are impacting their ability or the team\u2019s ability to succeed. How should I think about this in terms of assessing their performance? First, act early. Do not wait for a formal performance and growth potential assessment conversation to deliver feedback about your concerns. Be specific, and document your conversation. Loop in a TMR specialist for support as these conversations can be challenging. Review the definition of \u201cDeveloping\u201d performance. Note that one criteria that applies to this category is a team member who is struggling to perform in a way that is aligned to our values and competencies. Think about the specific behaviors or impacts of their work or how they are working that have led you to assess that they are not fully engaged. Despite having the skills, if your team member is not contributing at the level they are expected to be, you should consider that a performance issue in the way you would a skill based performance issue. Keep in mind that not addressing these challenges may be affecting your other team members, especially those who may be picking up the slack. We encourage to review the handbook page on Underperformance. Great managers share feedback with team members year-round in 1:1 meetings and ad-hoc. A dedicated Mid-Year check-in is a useful tool to support a  holistic discussion between team member and manager about how things are going as we approach the second half of the fiscal year. During the Mid-Year check in, we assess how things are going from both the team member and managers\u2019 points of view, and share feedback to help inform performance and development plans. Leaning into where things are going well, as well as uncovering blind spots or improvement areas early are the keys to delivering great results. A Mid-Year check in complements weekly, on-going feedback, so we recommend documenting your discussion in your 1:1 doc to support frequent updates on action items and development goals. Goals of the Mid-Year check in are: To participate in the mid-year check in we recommend that team members have at least 3 months of tenure so accomplishments and improvement areas are able to be clearly outlined with examples. Recommended process for our Mid Year check-in will be as follows: Team Member Led: Team member provides a self-assessment on their own performance in their 1:1 document A Google docs template is available to guide the self-assessment process. Team members are encouraged to author a document based on this template, share it with their manager and link it to the top of their 1:1 document. Team members should reflect on their achievements, strengths, and opportunity areas since the last formal Talent Assessment in Q4. It is the team member\u2019s responsibility to provide the self-assessment and bring it to the conversation with their manager to discuss and align on. Linking the document to the 1:1 agenda ensures the self-assessment is available to come back to throughout the rest of the year. The template contains an agenda for the Mid-Year check-in as follows: Achievements List your 3 most significant achievements since the last formal Talent Assessment, aligned with the job responsibilities and expectations of the role. This can include significant impact to the department or company, customer-impact, community-impacting, etc. Feedback can also be included in this section if applicable. Strengths & Opportunities in Role In this area the goal is to determine 2-3 strengths and 2-3 opportunity areas in accordance with your role, job family, and job framework. Include examples when necessary to provide clarity or context.  Ensure there are actionable takeaways. Support Needed A place to outline any support needed from your manager for your ongoing success and development at GitLab. Manager Feedback Managers will provide additional feedback or response to the self-assessment outlined above. Managers should be sure to reference the Achievements (3) and Roles & Responsibilities (Strengths and Opportunities) outlined by the team member above, and to any additional thoughts or feedback (2-3 points). Next Steps A space for the team member and manager to document any relevant next steps stemming from this conversation. This could be a full Individual Growth Plan or a couple of key actions or development opportunities for the individual. Manager Feedback: Team members let their manager know when they have provided their self-assessment overview in their 1:1 document Team members should share their Mid-Year Check In document with their manager at least one week prior to the live discussion to ensure managers have time to review the content, and to add in their own feedback in the Manager Feedback section. Live Discussion Team members and managers use a dedicated 1:1 to discuss the Mid Year check in. Align on actions/next steps Team member and manager align on action items stemming from the conversation to best support team member development and alignment to their goals. You are encourage to leverage our Career Development and Mobility) handbook page for ideas and inspiration. Mid-Year Check In launch: Mid-Year Check In end: We have intentionally provided a longer timeline to ensure different business group priorities are accommodated. Succession planning is an important step in our Talent Assessment process. Completing the Performance/Growth Potential Assessment gives leaders a fresh overview of the top performers and the highest growth team members in their respective organizations. Particularly for individuals in Senior Leadership roles and above (the S-Group and depending on structure the Director-Group, a recommended next step following the Performance/Growth Potential assessment is to do succession planning. Succession planning ensures we are identifying and developing future GitLab leaders to ensure business continuity in the event of an unforeseen change, and providing the current leadership team the opportunity to grow and scale. It may provide an opportunity to diversify our leadership team by developing our internal bench of talent. Note, potential alone does not determine who will be a successor. Strong succession candidates should demonstrate sustained exceeding performance and growth, aspire to have a role at the next level, and be ready for a much larger role in the near term. Questions we should ask ourselves when thinking about succession planning (and the individual(s) identified) are: The succession planning process might vary slightly for different areas of the business depending on size and structure, but at a high level the process should flow as follows: Note that the Emergency Coverage slide in the template above should only be used to if the identified successor could not provide temporary coverage for the current leader in an emergency situation. Key Talent makes up roughly ~10% of the population. Key Talent represents team members who have a significant impact on GitLab\u2019s present and future success. They deliver quality results that are instrumental in moving critical company initiatives forward and do so consistently in alignment with our values. These team members are often recognized as experts in their current role. Team members, at any level, can be considered Key Talent. Team members identified as Key Talent typically have knowledge, skills, and experience that: While not all of the criteria above need to be met for an individual to be designated Key Talent, it is required that Performance and Growth Potential are in a good place and that the team member meets at least one of the requirements above related to business impact. Team members identified as key talent must be assessed at minimum Performing and Growing (Box 4) in the Talent Assessment process. The only exception is for newly promoted individuals that fall into \u201cDeveloping\u201d Performance and \u201cDeveloping\u201d Growth Potential due to time and experience in their new role. Although Performance and Growth Potential are a consideration in the Key Talent selection process, they are not the only criteria used to determine the designation and should not be used in isolation. It is important to look holistically at the Key Talent Criteria outlined above when determining who qualifies as Key Talent on your team. \u201cToo new to rate\u201d team members can be considered key talent but this would be an exception. In order for a \u201ctoo new to rate\u201d team member to be identified as key talent they must have specialized skills that drive a significant impact to business results. Below are a few examples to help managers think through Key Talent designations as they relate to Performance and Growth Potential: Note: Intentionally hoarding knowledge is in direct conflict with our transparency value and is viewed as a performance issue as we measure performance based on alignment with our values. Single Points of Failure (SPOF) refers to a single person whose absence would significantly impact the ability of an area of the company to function. Team members that are identified as Key Talent can also be SPOF, as the definition of SPOF overlaps with a few of the Key Talent Criteria outlined above, however, a team member who is identified as SPOF is not also Key Talent by default. A few key differences between Key Talent and SPOF include: team member\u2019s performance and growth potential, risk mitigation plans, and support/development strategies. Four scenarios exist in the context of our Talent Assessment: To review the SPOF definition in more detail along with a few examples, please review our Organizational Design handbook page. It is important to have a holistic view of all team members when determining who meets the key talent criteria, which is why we require a certain scope when calibrating key talent and making final recommendations in the organization. There are several factors that can help determine the level at which key talent should be assessed, including things like reporting lines and span of control. As a general rule, if a people manager meets the following requirements, key talent calibrations should start at their level: The process to determine Key Talent is as follows: A very small portion of our business (roughly ~10% of the population) is considered to be key talent. As such, a team members\u2019 value in the organization should not be determined based on whether or not they are identified as key talent. While some team members are identified as key talent, this does not mean the rest of our team is not valued and important to our organization\u2019s success. Aligned with our expected performance distribution, approximately 60-65% of our team are core performers (or \u201cperforming\u201d. Core performers are responsible for keeping things consistently moving forward. This group comprises the largest population in companies across the board for a reason and is an essential part of any organization\u2019s success. We want to make sure we use engagement tools to retain Key Talent. A few of our primary engagement tools are: Learning & Development, growth opportunities and compensation. Note that being considered or designated as a key talent one year, does not mean or guarantee that a team member will be considered or designated as a key talent moving forward. Supporting Key Talent at GitLab is a critical element of business scalability and organizational development and growth. Our Key Talent are often individuals that can be looked to for mentorship and guidance by others, but it is also important that we invest in the development of this group and ensure that key knowledge is shared. A couple of key ways we can support our Key Talent is through regular discussions and the development of Individual Growth Plans (IGPs). Below are suggestions for getting started, resources for managers, a Key Talent Engagement Discussion template, and a recommended cadence. One way to set up a structure and regular cadence for touchpoints with our Key Talent population is through Key Talent Engagement Discussions. We recommended these discussion focus areas are: Overall Engagement, Growth/Challenge, and Support Needed. The main goals for check-ins with this group include: Managers can leverage this template to help facilitate consistency in Key Talent Engagement Discussions. Key Talent Engagement Discussions can be a great starting point to start thinking through Individual Growth Plans, which is the recommended next step. Some ideas for our Key Talent population to consider when thinking through Individual Growth Plans (IGPs) include: We recommend that managers perform Key Talent Engagement Discussions twice per year, roughly every 5-6 months. Discussion timing is at manager discretion, as we want to ensure these discussions are held at the most relevant and impactful time for each team member. Key Talent Engagement Discussions are more geared towards stay interview format, and should not replace ongoing informal check-ins, regular feedback, and growth discussions that happen more regularly in 1:1s. A couple of options for Key Talent Engagement Discussions that managers can consider are: In FY'24 Q2, we will begin optional Key Talent Engagement Discussions across the organization aligned with our upcoming mid-year check-in process. For divisions or departments that choose to opt in, the high level timeline would be as follows (exact dates TBD): As mentioned above, Key Talent Engagement Discussions can be done at any point during the year, it is not necessary that they are coupled with our Mid year check-in process."
    },
    {
        "title": "Team Member Relations at GitLab",
        "url": "https://handbook.gitlab.com/handbook/people-group/team-member-relations/#team-member-relations-philosophy",
        "content": "The Team Member Relations team is responsible for facilitiating and resolving all people matter related team member issues. They will also assist in creating and informing team members of policies that are fair and consistent for all GitLab team members. As part of the People group the Team Member Relations team works with both the manager and team member in an intermediary function to understand and help resolve workplace issues. The Team Member Relations team can also help coach and advise managers and team members on policies and processes. Team member relation issues can range from simple coaching questions to serious code of conduct violations. We classify these different level of team member cases by tiers. Example of issues/cases by tier level: Tier 1 Tier 2 Tier 3 All Tier 3 cases will be managed together with Legal and the TMR team. Team members who would like to discuss a private matter should send an email requesting support from our Team Member Relations team to teammemberrelations@gitlab.com.  Please include the following in your email: The Team Member Relations team will reach out within 24 hours from when the request was sent via email during the business week. GitLab also offers a Harassment Complaint Form that any team member may use to document any instance of any type of workplace harassment. Simply copy the form, fill it out with your information and send it to our Team Member Relations Specialist at teammemberrelations@gitlab.com. Team members and the TMR should both respond to questions or queries via slack or email within 24 hours to continue making progress on the issue and get to a timely resolution. For urgent requests that need immediate attention please ask for urgent assistance by sending a message marked URGENT to teammemberrelations@gitlab.com. If you do not receive support in a timely manner, below is the escalation path: An urgent request would be something that needs immediate attention like team members safety or a code of conduct violation. GitLab believes in preserving the dignity of each team member and expects everyone to treat others with fairness, respect, and transparency.  We encourage mutual responsibility for constructive work relationships and communication, information sharing, problem solving and a safe neutral process through which differences can be resolved.  Direct and honest communication is strongly encouraged between all team members regardless of title or level and per our values we do not pull rank. Such communication is likely to enhance understanding, avoid misunderstandings and create rapid solutions to concerns. We have built this philosophy to focus on these 4 pillars in line with our values: To support our team members, GitLab has established a Team member relations group to assist team members and their leaders with resolving work related issues.  The Team Member Relations team (TMR) respects the privacy of all team members and treats discussions with the fullest degree of confidentiality possible.  We have incorporated our Values and the Code of Business Conduct and Ethics into our team member relations practices and philosophy.  We believe that by communicating with each other directly and transparently, we can continue to resolve any difficulties that may arise and continue to make GitLab a great place to work. The team member relations function provides all GitLab team members an avenue to express workplace concerns and to resolve conflicts in a safe and unbiased forum. Team member relations provides guidance to managers in their efforts to improve team member performance or to correct unacceptable personal behaviors.  Managers are responsible for setting priorities and motivating their team members.  They are also responsible for ensuring the care of their team members as well as meeting GitLab\u2019s goals.  These two things can be done simultaneously.  As managers it is considered one of your primary responsibilities to understand GitLab\u2019s Code of Business Conduct and Ethics, Values and People Group policies and processes.  People managers are responsible for upholding compliance on the their teams and considering the best interest of the business.  If a manager is made aware of a situation that potentially runs afoul of the Code of Conduct, Values and People Group processes or policy they should immediately reach out to the team member relations specialist.  If uncertain about a specific policy or procedure, the manager should reach out to a leader, their aligned PBP or the Team member relation specialist for further clarification.  When in doubt, it is always best to ask. A critical responsibility within the role of a GitLab leader is to spend the time required to truly understand the causes of the performance issue and how to address them properly.  GitLab managers will determine if the performance concerns are skill-based or behavior (will)-based to determine next steps.  Below are the definitions of both skill- and will-based performance concerns. Sometimes skill-based issues appear as a will-based or behavior concern.  However, after delving into the cause for the behavior, the leader may find a skill-based gap causing the disruptive behavior.  The team member may be embarrassed or concerned about their ineffectiveness or ability to perform their role and may react in a way that is inappropriate. The following are a few recommendations for a manager to address skill-based performance issues: If the team member is still not making progress after the manager has provided additional resources or coaching please review the underperformance page in the handbook for next steps. Will-based issues are described as undesirable behavior that impedes the success of the Team Member, the Team, and/or GitLab as a whole.  The leader may hear about the behaviors from others or experience the undesirable behavior directly.   It is important that the manager address the concerns right away.  While \u201cwill\u201d issues can be disruptive, there are different levels of severity which must be considered when determining next steps.  The tiers below are examples and are not exhaustive, and should be used for comparision purposes to determine the impact to GitLab. Tier 2 - Misconduct resulting in limited material risk to GitLab For Tier 2 level concerns, the Manager should reach out and discuss with the team member relations specialist immediately. Tier 1 - Gross misconduct or a violation with serious implications to GitLab. Since situations differ, managers should immediately reach out to a team member relations specialist for guidance before taking any action.  If unable to contact the team member relations specialist directly, please follow the escalation path listed in the handbook Please review the underperformance page in the handbook for further information regarding managing team member performance."
    },
    {
        "title": "GitLab's Guide to Total Rewards",
        "url": "https://handbook.gitlab.com/handbook/total-rewards/",
        "content": "\nWhy: Our Compensation Principle\nWhat: Compensation Calculator Inputs\nHow: Compensation Review Cycle\n Why: Our Compensation Principle What: Compensation Calculator Inputs How: Compensation Review Cycle \nWhy: Our Benefits Principle\nWhat: General Benefits\nHow: Global Benefits Survey\n Why: Our Benefits Principle What: General Benefits How: Global Benefits Survey \nWhy: Why we grant Equity to Team Members\nWhat: What we grant to Team Members\nHow: Accepting, Understand and Exercising Awards\n Why: Why we grant Equity to Team Members What: What we grant to Team Members How: Accepting, Understand and Exercising Awards For feedback or questions relating to compensation, benefits and equity, you can reach out to us via:"
    },
    {
        "title": "Tools and tips",
        "url": "https://handbook.gitlab.com/handbook/tools-and-tips/",
        "content": "This page contains useful tips for working at GitLab and for various tools we use. That\u2019s it! Don\u2019t forget to update your username in the following places: Team members choose to manage their GitLab activities in different ways. Setup your notifications in a way that works best for you. The GitLab team-member resources project has a wiki for sharing among GitLab team-members. It\u2019s for topics like parenting where people may want to share knowledge, but the handbook is not the best fit. @tipyn\u2019s home office equipment and macOS setup Link your GitLab email address to an easily recognizable photo of yourself on GitLab, Slack, and Gravatar.\nIt is company policy to use a photo, and not an avatar, a stock photo, or something with sunglasses for any of your GitLab accounts, as we have a lot of GitLab team-members and our brains are comfortable with recognizing people; let\u2019s use them. Note: If you upload your photo to Gravatar associated with your gitlab.com email, then you can simply not set an image in your GitLab and Slack profiles and they will automatically use your Gravatar photo.\u00a0 If you already uploaded individual photos to your GitLab and Slack profiles, simply removing them will cause your avatar to use the Gravatar photo by default. Mermaid is a tool that allows us to create flowcharts, graphs, diagrams, Gantt charts, etc. within GitLab! Check out the examples in the GitLab docs on how to use Mermaid. A few additional resources that can be helpful when working with Mermaid are: Note: When creating Mermaid charts in the GitLab handbook, you need to type three back tick symbols followed by the word mermaid before the chart, and three back tick symbols at the end of the chart. This will enable Markdown to distinguish between .md and Mermaid. Please reference the example Mermaid charts linked above to see how this looks live. If you are working on multiple GitLab instances and want to have a visual differentiation, you can change the default Navigation theme to a different color. Page counts are determined through a simple two-step process: Part of the maintainer training process is to keep track of Merge Request that have been reviewed and writing down an assessment on the review in the maintainer training issue.\nManual upkeep of the maintainer training issue can be time consuming. There are tools that others have built to help with this task: Note: When using these tools, avoid adding mentions to maintainers in existing comments. There is a known issue where users are not notified by email when mentioned in an edited comment. It only generates a TODO which a maintainer may not use. Refer to the Handbook Development section to learn more about the architecture, structure and how to edit the handbook locally on your desktop. For how to edit the handbook in your browser, refer to the editing handbook page. Portions of the https://about.gitlab.com site lives in the\nwww-gitlab.com repo. The marketing website is maintained by the digital experience team in their GitLab group. The data/*.yml files live in the www-gitlab-com repository, and are used by numerous sites including the marketing website and the handbook. The documentation for the site itself is in markdown documents under the\ndoc folder in the repo. If you are looking to do local development on the site,\ndoc/development.md\nis probably the best place to start. Many of the tips shown in this section require ImageMagick, an image manipulation tool. The installation is described in the ImageMagick section. ImageMagick provides the convert CLI command which can be used to resize images, add drop shadows, edit GIFs, etc. On macOS, install ImageMagick with Homebrew: On Linux, use your package manager: We have a dedicated section for that in the handbook. ImageMagick provides the convert CLI command which can be used to resize images. Our blog images do not need resolutions higher than 1920x1080. This saves bandwidth and makes the website load faster. This example converts an existing image to 1920x1080 resolution and replaces it inline: You can also use percentage values for the -resize parameter. The convert CLI command can do more things explained in the documentation. If you need to convert multiple images, combine the convert command with find. Note that this replaces the images inline. Install ImageMagick and use the convert CLI command to add a drop shadow. The -shadow parameter may need adjustments on the dimension. If 2FA stops working unexpectedly (no new phone or computer) it\u2019s usually because of improperly configured date & time on either device.\nMake sure that \u201cAutomatic Date & Time\u201d is enabled on both devices.\nIf they\u2019re already enabled try toggling them off and on again to force an update.\nIf this doesn\u2019t work, request that IT Ops reset your 2FA setting. Links for finding the settings: For Android there\u2019s no definitive link, since most vendors have different UIs for their settings.\nBut in the Settings-app, look for \u201cDate & Time\u201d and there should be a \u201cAutomatic Date & Time\u201d toggle. Netstat is a command line tool which can be useful to print network connections, routing tables, interface statistics, etc. One of the most common uses for netstat during troubleshooting is to display a list of open ports listening for connections. sudo netstat -tulpn | grep -i listen If you find a port already in use, you won\u2019t be able to successfully start up a service or program that utilizes that same port. Options to resolve are: When the GitLab Development Kit cannot start using the ./run command and Unicorn terminates because port 3000 is already in use, you will have to check what process is using it.\nRunning sudo lsof -iTCP:3000 -sTCP:LISTEN -n -P will yield the offender so this process can be killed.\nIt might be wise to alias this command in your .bash_profile or equivalent for your shell. You may also wish to add a function in your .bash_profile (or equivalent file for your shell) like this: which you can use like so: and it will kill whatever process is currently using port 3000. By adding this small configuration you will be able to view the git branch that you are using currently.\nIf you are not inside a git repository, it only displays the username and the current directory. For Bash: Add the following lines in your .bash_profile Doing the following, makes the changes to get reflected in you current terminal: For Zsh: On macOS Catalina, ZSH is the default shell.\nBy installing Oh My ZSH!, the git plugin is automatically loaded and shows the current git branch. Another option would be: Add the following lines in your ~/.zshrc The changes will show on the next terminal or immediately by running. Use command aliases in your shell to speed up your workflow.\nTake a look at these aliases and others in Sid\u2019s dotfiles project.\nFor example, by adding the following to your .bash_profile or equivalent for your shell, you can just typesto checkout the master branch of this website, pull the latest changes, and open the repository in Sublime Text: After editing, you can just typegcato commit all of your changes, followed bygpto push them to the remote branch. If you are using Oh My ZSH!, you can add custom aliases shown below. You can freely define the file name, only the suffix .zsh is important. An example can be found in Michael Friedrich\u2019s dotfiles project. In order to delete local Git branches which are deleted on the remote server, you\u2019ll need to combine the --prune pull/fetch command with more commands. git branch -vv lists all details of local branches, the followed grep filters for all marked gone in the default remote origin and prints the results with awk. This argument is passed into git branch -d, and executed for all matching results. Note that -d does not delete unmerged branches. -D has more impact but can accidentally delete branches. Run the command without the final deletion command to see the potential affected branches. Note that \\$1 is shell escaped in the alias and needs to be executed as $1. You can use dotfiles to customize your system, and keep all configuration in a central place. The name dot file is derived from Linux/Unix where all configuration files started with a dot, hiding them from the default list view ls. Team member dotfiles projects: Note: you have to pay for these items yourself. WorkFrom is a crowd-sourced resource of coffee shops and other such places that are remote-work friendly. When using unsecured Wi-Fi, consider a personal VPN.\nWe don\u2019t have a corporate VPN but consider purchasing a personal VPN if you travel for GitLab or use unknown networks often. Remember that if your job has restrictions based upon geolocation (for example supporting customers with specific data restrictions and country-based access), a personal VPN may not be the best choice as often the VPN vendor routes traffic through other countries.\nIf this restriction applies to you, consider tethering.\nTethering is when you set up your mobile phone as a hotspot and connect your laptop up to it via Wi-Fi, avoiding the unsecured Wi-Fi network.\nThere is more information here on the subject, and as long as your data plan supports it, you should be good to go.\nDouble check before international travel, as it may be supported but have hidden costs. When connecting to a network with a captive portal, most websites will not load as modern sites use HTTPS, and captive portals interrupt that process.\nYour device will try and compensate for this, but it can be tough to manage manually.\nIf you have trouble, try connecting to http://captive.apple.com/ first, which is intentionally only HTTP and will load the captive portal. FIDO2 is a cryptographically strong 2FA (2-factor authentication) method. It is hardware-based, and is typically deployed via a USB, NFC, or built into a device such as a MacBook\u2019s Touch ID or iPhone\u2019s Face ID. The standard is open and is maintained by the FIDO Alliance. WebAuthn is a component of FIDO2 that supports verification by web applications using public key cryptography. FIDO2/WebAuthn is the preferred method of 2FA and is highly recommended by GitLab\u2019s Security Department. One of the points of 2FA is that while you are authenticating with a username and password for the first factor, a secondary factor should use a separate - or \u201cout of band (OOB)\u201d - communication channel for the authentication. FIDO2/WebAuthn devices certainly meet that criteria, better than all other methods. There are other 2FA methods outlined below. During the authentication process, you enter in your username and your password. On systems with 2FA enabled and using FIDO2/WebAuthn, the hardware token is queried. By pressing a button or tapping a sensor on the FIDO2 device, the FIDO2 device completes the authentication process in a cryptographically strong way. It is generally considered the most secure form of 2FA. It is also more convenient than manually entering codes generated by a TOTP application. During the registration of the FIDO2/WebAuthn device, a public/private key pair is generated, with the public key being registered with the service you will be authenticating with, and the private key is stored on a secure chip in the device. When authenticating, after you\u2019ve entered in your username and password, the device is queried via an encrypted message that can only be authenticated by the private key, so a button or sensor is pressed on the device to allow the query to be completed, and the user is then granted access to the system. YubiKey: The most popular FIDO2/WebAuthn device is Yubico\u2019s YubiKey. There are a wide variety of sizes and styles of YubiKeys. Yubico (along with Google) helped develop the predecessor to FIDO2 standard (U2F) before it was moved to the FIDO Alliance. Most GitLab team members that have WebAuthn devices have a YubiKey. It should be noted that for a long time Yubico\u2019s source code for its firmware was open source, but some of the newer versions of firmware are closed source. This has caused some concern in the security community, particularly those that prefer to use open source whenever possible. YubiKey has been examined by the security industry at large, third party audits and by the Security Team. YubiKey\u2019s are more than suitable for use within GitLab and work fine with FIDO2/WebAuthn-compatible systems. YubiKey has had a number of security issues which are typically resolved quickly. They have a dedicated page for security advisories.\nIn rare cases, a security issue involving a hardware token arises that requires the hardware token to be replaced as a firmware update will not mitigate the issue. This happened with Yubico in 2017. Most of the attack models that impact the FIDO2/WebAuthn tokens require physical access to the token itself. That is, the security advisories involve coding issues that can only be exploited via access to the token or the computer that the token is plugged into. This in itself makes the devices more secure. While there are other hardware tokens that are also decent and will function with GitLab, some have limitations. The recommended solution for team members is Yubico\u2019s YubiKeys. What GitLab team members need to keep in mind is that if you travel with your company laptop - either on a business trip, a trip to visit family and friends in another location but you intend to keep working, or just a trip to the local coffee shop - treat the token with the same level of care as a credit card. Do not leave it where it could be stolen. If you are concerned about potentially losing your hardware token, be sure to add Touch ID and potentially a mobile device as an accepted authentication token. Sites following the FIDO2/WebAuthn standard should support multiple tokens. That way if one is lost or stolen, you can still login use another method. Currently YubiKey\u2019s are limited to one per user, in the case of lost or damaged, please reach out in the #it_security_help Slack channel and we\u2019ll assist you with a replacement. Usage of 2FA is mandatory for GitLab team members. In addition to FIDO2/WebAuthn, there are additional protocols used for 2FA. There is \u201ccryptographic push\u201d, TOTP, and SMS-based authentication (text message). Pluses and minuses to each are listed below. This is usually shortened to simply \u201cpush technology\u201d. It is called \u201cpush\u201d because during the authentication process, after you\u2019ve entered your username and password, the service you are authenticating with automatically \u201cpushes\u201d a secondary authentication via a separate communications channel to a device you possess. This is usually your phone, and it is facilitated via a phone app that is specific to that process. During the registration process a cryptographically-secure key pair is generated, and the app uses that key pair to uniquely identify the Push as coming from the service you are authenticating to. Typically the app then either directly notifies you or you access the app, which will pop up a message asking if you were in fact trying to authenticate. Answer yes and the authentication process is complete. GitLab team members may be familiar with this Push method as it is used by Okta Verify. This method is not quite as secure as a hardware token, as typically those devices stores data securely on the secure chip on the device itself. It is possible that the Push phone app is also storing secret data on the local secure chip on the phone, however the entire process is dependent on the service\u2019s servers being up, and WebAuthn is more self-contained. But note that Push technology is still considered extremely secure, and once configured it is fairly convenient to use. Timed-based One-Time Password is fairly secure. This method involves a rotating value based off of a cryptographic seed that is used to uniquely identify communication between the service and the end user authenticating. The value is (usually) a six digit number that changes every 30 seconds, and during the authentication process after you\u2019ve successfully entered in your username and password, you are asked to enter in the value. GitLab team members should use 1Password to manage TOTP codes. The main problem with TOTP is that during this 2FA process it typically involves the end user entering in all values through a single communications channel (usually a web browser). As this is the case, it is possible that an attacker could send you a fake web page for you to enter in your credentials, including your TOTP value. Granted, the attacker would have to be reading your replies and sending in all of your credential information extremely quickly and get the entire process completed with 30 seconds so the risk is greatly reduced, but it still exists. Both WebAuthn and Push are preferred over TOTP, but as long as you are the one initiating the communication and you are not clicking on a link in email, you should be okay. One of the more popular (and most common) methods of 2FA is SMS-based text messaging. It is similar to TOTP, but instead of using a locally-stored application to calculate the six digit number, the service you are authenticating to sends the six digits to you via an SMS text message. When you set up your account, you provide the service with your cell phone number so they know which phone number to send the six digits to. Due to the number of caveats, SMS is only recommended if there is no other 2FA option available. Here are the main problems with SMS messaging. There may be services that only offer SMS as their 2FA solution, so in those cases it is better than nothing. If this is the case, there are a few things you can do to secure things ever so slightly. Remember the purpose of 2FA - it is a secondary authentication method, invoked after the primary authentication method has succeeded. You should only acknowledge a 2FA request if you personally have just successfully completed the primary authentication. An unsolicited 2FA request means someone has your password, and is in the process of trying to log in as you. This is why 2FA exists, to help protect your user account from attacks involving your password. If you experience any such irregularities, please bring it to the attention of the Security Team. For more information, review the handbook regarding Security Awareness There is a lot of information pertaining to Slack, as it is a critical part of GitLab\u2019s communication. See the Slack handbook page. There is a lot of information pertaining to Zoom, as it is a critical part of GitLab\u2019s\ncommunication. See the Zoom handbook page. The Google Calendar invite is the single source of truth for the Zoom link. Avoid linking the Zoom link in Google Document agendas since those may quickly become out of date. If the zoom link changed around the start of the meeting it is OK to have it in there temporarily. Need a new document or new slide deck quickly? Use shortcuts like http://doc.new or http://slide.new. The full list (not even restricted to Google products) is available at https://whats.new/shortcuts/. See also Live Doc Meetings for more Google Doc tips. Google Analytics (GA) is an essential tool for making data-driven decisions.\nIt receives data from both about.gitlab.com and docs.gitlab.com websites.\nRead through the Inbound Marketing Handbook for more information on GA. For example, you can look at the GA data to analyze how visited is a certain page, in a period of your choice.\nYou can also look at the GA referrals data to understand where the users are coming from and where they go when they leave a certain page. To see the data for a specific page: To find the referrals for a certain page, continue from the steps above. Optional: Set your picture in Google so that your picture will show where you are in a Google document (vs showing just your first intial). This will allow others to more easily follow a discussion when meeting attendees move around in a document. Consider adding a phonetic pronunciation of your name and/or a pronunciation recording in your Google profile. Please make use of the Find a Time tab in Google Calendar, especially when scheduling events with teammates in other parts of the world:  Find a Time presents a new or existing event\u2019s time for all participants, adjusting for time zones as appropriate.\nTo use Find a Time: For meetings spanning across multiple time zones and with external parties, Time & Date Calculator can help determine the best time to schedule. The GitLab Availability Calendar has been deprecated to allow for GitLab to scale effectively.\nWe have created tools and tips for managing your time off. To help other team members to schedule meetings with you, you can set your normal working hours & location in Google Calendar. The preferred times will show up when someone tries to schedule a meeting with you. To set your working hours, go to Settings -> General -> Working Hours & Location. Working location can be set here or on your calendar directly by clicking on the pill in the All day row. In Settings there\u2019s a helpful Copy to all option as well. Since all GitLab Team Members work remotely Home can be an ambiguous choice as folks may travel and it doesn\u2019t provide any context on timezones. If you\u2019d like, you can choose Somewhere else (in Settings) or Edit pencil -> + -> Another location (from the pill) to set this to something such as City, State, Country (GMT-#) and keep it up to date when traveling or timezones shift, which can help folks with planning and understanding timezones. The GitLab Team Meetings Calendar is available to all team members and can be found in your calendars list after it\u2019s added. To add the GitLab Team Meetings Calendar to your list of calendars: Please reach out to a People Connect Team member if you have any questions. NOTE: Please do NOT remove any meetings from this calendar or any other shared calendars, as it removes the event from everyone\u2019s calendar. You can find the details for the Company Calls, Group Conversations, 101s, and other teams\u2019 meetings here, so you can attend a different teams\u2019 meeting and ask questions, learn about what they\u2019re working on, and get to know the rest of the GitLab Departments and teams. These meetings are open to everyone in GitLab. If you are creating a new team meeting, please add it to the GitLab Team Meetings calendar Please reach out to the People Connect Team in the #people-connect Slack channel with any questions, requests or changes to the GitLab Team Meetings calendar. Create your calendar invite Add your Zoom link Add an agenda or relevant content Under Add Guests, add GitLab Team Meetings in addition to anyone else you want invited (if you want the entire company invited please use everyone@). Note: This will appear like adding a room, which is expected  If you are familiar with queries in Gmail, add a filter to remove invites responses from your inbox with the following query: *.ics subject:(\"invitation\" OR \"accepted\" OR \"rejected\" OR \"updated\" OR \"canceled event\" OR \"declined\") when where calendar who organizer You can also create a filter to remove ALL invite responses from your inbox with the following search terms: Then click Create filter: Please click \u2018Guests can modify event\u2019 so people can update the time in the calendar instead of having to reach out via other channels.\nYou can configure this to be checked by default under Event Settings.  You can change the default notification settings by calendar (add or remove notifications for all-day events, add a second default notification to all events\u2026). This is accessible through Settings -> Settings for my calendars -> pick the calendar -> Event notifications and All-day event notifications. If you change the default notifications, all existing events will inherit that as well (unless their notifications have been customized). (This assumes you are using Google\u2019s new Calendar). When you have accidentally deleted something from the Team Meetings calendar, you can recover it by: We recommend enabling the \u2018Show declined events\u2019 setting if you are unable to attend a meeting but will still contribute to the agenda or attendance list asynchronously. Use this setting if it\u2019s helpful for you to see declined meetings in your calendar view for any other reason.  We recommend you set your Google Calendar access permissions to \u2018Make available for GitLab - See all event details\u2019. Team member calendars should not have access permissions set to \u2018Make available to public\u2019 due to the risk of sensitive data exposure and zoombombing. Consider marking the following appointments as \u2018Private\u2019: There are several benefits and reasons to sharing your calendar with everyone at GitLab:  When setting up your Google Calendar be sure to set your working hours. If you\u2019d like to share your calendar with e.g. your partner you can use the \u2018Share with specific people\u2019 feature and set the permissions to \u2018See only free/busy (hide details)\u2019:  Enable speedy meetings to automatically provide a buffer at the end of events you schedule.\nThis thoughtfully allows participants with back-to-back events the opportunity to use the restroom or grab a cup of coffee without being late to their next function.  Add as many time zone world clocks as you wish by, in Google Calendar, going to Settings -> World Clock in order to see team members\u2019 local times.  You can also use sites like TimeAndDate to convert times to/from UTC for example. Check Display secondary time zone and select (GMT+00:00) Coordinated Universal Time (UTC). This enables team members to standardize on a single time zone in communicating when meetings take place.  See the Sandbox Cloud page for a listing of cloud resources and how to gain access to them. We would be remiss if we didn\u2019t start this section off with this IMPORTANT message: Your default storage place for information that needs to persist and be available to others in the company should be ON THE WEBSITE/IN THE COMPANY HANDBOOK and not in Google Drive and Google Apps files!! This is from the top.\nThis is how we operate, because Google Docs/Apps can only be found and contributed to by team members, and not by users, customers, advocates, future employees, Google handbook searches, or developers. Having said that, there is content which doesn\u2019t make sense to be created on the website directly (e.g. large collections of data in tables, spreadsheets for calculations, etc) or for which Google Drive storage makes sense. When directing folks to these files in Google Drive please include name of the file in the handbook so that team members can search for it in Google Drive. If you link directly to the URL, people from outside the organization can request access, creating workload and the potential for mistakes. It is important that we not just throw files into random or general places in the shared Google Drives.\nDoing so makes it harder for others to find and work with the content.\nHere are some guidelines to organizing the Google Drive content: For starters, when your GitLab Google company account is created you automatically get a Google Drive with unlimited storage allocation in your own \u201chome\u201d directory (called My Drive).\nYou can get to it by: This is great for storing your own working files.\nAs already stated, this should never be the final resting place for shared files that are meant to be used by the rest of the company (or beyond). There are a few Google Drive repositories of GitLab shared files (there might be more, please add if not listed here): How do you use these? You don\u2019t have to remember these URL\u2019s.\nTo add these links to your Google Drive My Drive directory, do the following:  To really make your Google Drive easier to access, you can have your Google Drive show up on your Mac Finder as a regular drive.\nWith this it is easier to store and view files such as videos, analyst reports (PDFs), etc. Here\u2019s how to do this:  Use these GitLab branded form templates when creating internal or external surveys or forms.\nMake a copy of the form and only edit the copy; do not edit the template itself. Review what data privacy means at GitLab. Help participants make informed decisions by applying the following guidelines: If you use the archive function, you normally return to your overview.\nWith Auto-advance you can select whether to advance to the next or previous message.\n\u201cAuto-advance\u201d can be enabled from the Advanced section under Settings.\nThis reveals the Auto-advance settings in the General section under Settings.\nThe default setting of showing the previous (older) message is usually preferred. -Set up an email signature which includes your full name and job title so people can quickly know who you are and what you do.\n-It is also an option to add your personal pronouns to your email signature. Note: You can copy and paste the template below to use it in your own signature. Alex Doe (they/them)\nFrontend Engineer | GitLab If you are employed by our German entity GitLab GmbH, you will need to include some additional company related details after your own signature in emails (along with other forms of communication listed on the German entity Handbook page) as follows: Alex Doe (they/them)\nFrontend Engineer | GitLab GitLab GmbH  | Sitz: M\u00fcnchen  | Registergericht: Amtsgericht M\u00fcnchen, HRB 237630  | Gesch\u00e4ftsf\u00fchrer: James John Gladen Certain company details are required to be added as a signature to the forms of communication listed below, where that communication is going from a team member employed by our German entity GitLab GmbH to outside of the company, and relates to GitLab\u2019s business activities: If you are sending such a communication, externally, please look at the setting of the relevant application and add the company details below to the end of the communication. If you are in doubt, please do add the details. If you are unable to add this information for any reason, please alert legal-employment@gitlab.com. If you are employed by our German entity you may have been asked during onboarding to set up your signature wherever it\u2019s required to be used and to include these company details, and if you have not been, please do so now, adding these details to the end of your signature: GitLab GmbH  | Sitz: M\u00fcnchen  | Registergericht: Amtsgericht M\u00fcnchen, HRB 237630  | Gesch\u00e4ftsf\u00fchrer: James John Gladen It might be useful to add a Gmail filter that adds a label to any GitLab notification email in which you are specifically mentioned, as opposed to a notification that you received simply because you were subscribed to the issue or merge request. You can create a Gmail filter that adds a label to any GitLab notification email in which you are assigned as a reviewer: You can create a Gmail filter that adds a label to any GitLab notification email in which an MR has been merged: GitLab issues and merge requests can generate a lot of email notifications depending on your settings and how in-demand your attention is.\nIt can be useful to apply a label to these generated emails and move them out of your immediate inbox. You can learn more about how to use Gmail filters to organize your inbox in Productivity Hack video.\nTo import downloaded filter export go to Gmail => Settings => Filters and Blocked Addresses => Import filters. Keyboard shortcuts only work if you\u2019ve turned them on in Gmail Settings. Steps below: Here are some shortcuts you can use List your inbox and preview mails in one view with this configuration change: To utilitze Gmail to it\u2019s full potential, consider adopting the Inbox Zero strategy. It\u2019s the same way Google employees use Gmail. There\u2019s also an internal training recording about this. It goes into more details and more \u201cpower user\u201d focused, covering keyboard shortcuts, etc. The integration for Google Meet and Google Chat is enabled by default. It can consume too much space in the left menu listing mailbox folders. In order to disable the integration in Google Mail, navigate to Settings at the right top, See all settings, Mail and Chat and select the following: Save the changes and wait for Google Mail to reload. Use this general GitLab Slide Template when creating slide decks for internal and external use.\nMake a copy of the slide deck and only edit the copy; please do not edit the template itself. To avoid potentially editing the source deck, you can go to the Template gallery and click on the GitLab Slide Template vYear-Month to quickly make a copy and begin a new deck. Ensure that all pages in the slide deck are numbered, with the title page always being number 1. Slide decks are available in Highspot in GitLab\u2019s Official Sales Deck Library. Jamboard is a collaborative whiteboarding platform, accessible at https://jamboard.google.com/. The results are persisted in Drive and are shareable like any other object."
    },
    {
        "title": "Engineering",
        "url": "https://handbook.gitlab.com/handbook/engineering/",
        "content": "GitLab has a Three-Year Strategy, and we\u2019re excited to see every member of the Engineering division contribute to achieving it. Whether you\u2019re creating something new or improving something that already exists, we want you to feel empowered to bring your best ideas for influencing the product direction through improved scalability, usability, resilience, and system architectures. And when you feel like you need to expand your knowledge in a particular area, know that you\u2019re supported in having the resources to learn and improve your skills. Our focus is to make sure that GitLab is enterprise grade in all its abilities and to support the AI efforts required to successfully launch AI features to General Availability. Making sure that GitLab is enterprise grade involves several teams collaborating on improving our disaster recovery and support offerings through ongoing work with GitLab Dedicated and Cells infrastructure. Our goal here is improved availability and service recovery. Engineering culture at GitLab encompasses the processes, workflows, principles\nand priorities that all stem from our GitLab Values.\nAll these things continuously strengthen our engineering craftsmanship and\nallow engineers to achieve engineering excellence, while growing and having a\nsignificant, positive impact on the product, people, and the company as a whole.\nOur engineering culture is primarily being carried and evolves through\nknowledge sharing and collaboration. Everyone can be part of this process\nbecause at GitLab everyone can contribute. Engineering excellence can be defined as an intrinsic motivation to improve\nengineering efficiency, software quality, and deliver better results while\nbuilding software products. Engineering excellence is being fueled by a strong\nengineering culture combined with a mission: to build better software that\nallows everyone to contribute. Engineering is the primary advocate for the performance, availability, and security of the GitLab project. Product Management prioritizes 60% of engineering time, so everyone in the engineering function should participate in the Product Management prioritization process to ensure that our project stays ahead in these areas. Engineering prioritizes 40% of time on initiatives that improve the product, underlying platform, and foundational technologies we use. Work in the 40% time budget should be coordinated and prioritized by the Engineering Manager of a team. Use the label Engineering Time for issues and MRs that are done as part of it so we can follow the work and the results across the engineering division. Some of the above examples for the 40% time budget can help in forming a long-term technical roadmap for your group, and determine how best to prioritize your technical work to support overall business goals. In addition to the examples above: Engineering Managers (EMs) are responsible for collaboratively developing their team\u2019s technical roadmap backlog. All items should be documented as epics and issues using the \u201cTechnical Roadmap\u201d label. Global initiatives will be defined and must be incorporated into each group\u2019s roadmap and prioritization (e.g., allocating 40% of front-end capacity for Vue upgrade, completing all Cells issues for a specific area by milestone XYZ). Prioritization of items should align with: Planning Guidelines: Key Steps: This process ensures a balanced approach between feature development and technical improvements, promoting long-term sustainability and efficiency of the engineering organization. We have a 3-year goal of reaching 1,000 monthly contributors as a way to mature new stages, add customer-desired features that aren\u2019t on our roadmap, and even translate our product into multiple languages. Diverse teams perform better. They provide a sense of belonging that leads to higher levels of trust, better decision making, and a larger talent pool. They also focus more on facts, process facts more carefully, and are more innovative. By hiring globally and increasing the numbers of women and under represented groups (URGs) in the Engineering division, we\u2019re helping everyone bring their best selves to work. Strategic hiring is a top priority, and we\u2019re excited to continue hiring people who are passionate about our product and have the skills to make it the best DevSecOps tool in the market. Our current focus areas include reducing the amount of time between offer and start dates and hiring a diverse team (see above). We\u2019re also implementing industry-standard approaches like structured, behavioral, and situational interviewing to help ensure a consistent interview process that helps to identify the best candidate for every role. We\u2019re excited to have a recruiting org to partner with as we balance the time that managers spend recruiting against the time they spend investing in their current team members. As expected, a large part of our focus is on improving our product. For Enterprise customers, we\u2019re refining our product to meet the levels of security and reliability that customers rightfully demand from SaaS platforms (SaaS Reliability). We\u2019re also providing more robust utilization metrics to help them discover features relevant to their own DevOps transformations (Usage Reporting) and offering the ability to purchase and manage licenses without spending time contacting Sales or Support (E-Commerce and Cloud Licensing). Lastly, in response to Enterprise customer requests, we\u2019re adding features to support Suggested Reviewers, better portfolio management through Work Items, and Audit Events that provide additional visibility into user passive actions. For Free Users, we\u2019re becoming more efficient with our open core offering, so that we can continue to support and give back to students, startups, educational institutions, open source projects, GitLab contributors, and nonprofits. For Federal Agencies, we\u2019re obtaining FedRAMP certification to strengthen confidence in the security standards required on our SaaS offering. This is a mandated prerequisite for United States federal agencies to use our product. For Hosted Customers, we\u2019re supporting feature parity between Self-Managed and GitLab Hosted environments through the Workspace initiative. We\u2019re also launching GitLab Dedicated for customers who want the flexibility of cloud with the security and performance of a single-tenant environment. For customers using CI/CD, we\u2019re expanding the available types of Runners to include macOS, Linux/Docker, and Windows, and we\u2019re autoscaling build agents. There are five departments within the Engineering Division: See the Cross-Functional Prioritization page for more information. To maintain high availability, Engineering runs a weekly SaaS Availability standup to: Each week the Infrastructure team reports on incidents and key metrics. Updating these items at the top of the\nEngineering Allocation Meeting Agenda\nis the responsibility of the Engineering Manager for the General Squad in Reliability. For the core and expansion development departments, updates on current status of: Groups under Feature Change Locks should update progress synchronously or asynchronously in the weekly agenda.\nThe intention of this meeting is to communicate progress and to evaluate and prioritise escalations from infrastructure. Feature Change Locks progress reports should appear in the following format in the weekly agenda: FCL xxxx - [team name] A Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The team involved should be determined by the author, their line manager, and that manager\u2019s other direct reports. If the incident meets the above criteria, then the manager of the team is responsible for: If the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development. Direct reports involved in an active borrow should be included if they were involved in the authorship or review of the change. The purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture. Rough guidance on timeline is provided here to set expectations and urgency for an FCL.  We want to balance moving urgently with doing thoughtful important work to improve reliability.  Note that as times shift we can adjust accordingly.   The DRI of an FCL should pull in the timeline where possible. The following bulleted list provides a suggested timeline starting from incident to completion of the FCL.  \u201cBusiness day x\u201d in this case refers to the x business day after the incident. During the FCL, the team(s) exclusive focus is around reliability work, and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must: After the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to: Examples of this work include, but are not limited to: Any work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level don\u2019t affect the end of the FCL. A stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director. The Product Analytics team is responsible for maintaining Engineering Performance Indicators. Work regarding KPI / RPI is tracked using the Product Analytics task intake tracker. We manually verify that our code works as expected.\nAutomated test coverage is essential,\nbut manual verification provides a higher level of confidence that features behave as intended and bugs are fixed. We manually verify issues when they are in the workflow::verification state.\nGenerally, after you have manually verified something, you can close the associated issue.\nSee the Product Development Flow to learn more about this issue state. We manually verify in the staging environment whenever possible.\nIn certain cases we may need to manually verify in the production environment. If you need to test features that are built for GitLab Ultimate then you can get added to the issue-reproduce\ngroup on production and staging environments by asking in the #development Slack channel.\nThese groups are on an Ultimate plan. We follow the below process when existing critical customer escalations\nrequires immediate scheduling of bug fixes or development effort. The DRI can use the customer critical merge requests process to expedite code review & merge. In most cases, a single engineer and maintainer review are adequate to handle a priority::1/severity::1 issue. However, some issues are highly difficult or complicated. Engineers should treat these issues with a high sense of urgency. For a complicated priority::1/severity::1 issue, multiple engineers should be assigned based on the level of complexity. The issue description should include the team member and their responsibilities. If we have cases where three or five or X people are needed, Engineering Managers should feel the freedom to execute on a plan quickly. Following this procedure will: There are some engineering handbook topics that are internal only. These topics can be viewed by GitLab team members in the engineering section of the internal handbook. As GitLab grows, through the introduction of new features and improvements on\nexisting ones, so does its complexity. This effect is compounded by the\ncare and feeding of a single codebase that supports the wide variety of\nenvironments in which it runs, from small self-managed instances to large\ninstallations such as GitLab.com. The company itself adds to this complexity\nfrom an organizational perspective: hundreds employees worldwide contribute in\none way or another to both the product and the company, using GitLab.com on a\ndaily basis to do their job. Teams members in Engineering are directly\nresponsible for the codebase and its operation, for the infrastructure powering\nGitLab.com, and for the support of customers running self-managed instances.\nLikewise, team members in the Product organization chart the future of the\nproduct. Our goal is not merely to launch features, but to ensure they land successfully and provide real value to our customers. We strive to develop a best-in-class product that exceeds expectations across all user groups by meeting high-quality standards while ensuring reliability and maintaining an ease of operation and scalability to meet diverse customer needs. All team members should remain mindful of our target customers and the multiple platforms we support in everything we do. The Cross-Functional Prioritization framework exists to give everyone a voice within the product development quad (PM, Development, Quality, and UX). By doing this, we are able to achieve and maintain an optimal balance of new features, security fixes, availability work, performance improvements, bug fixes, technical debt, etc. while providing transparency into prioritization and work status to internal and external stakeholders so they can advocate for their work items. Through this framework, team members will be able to drive conversations about what\u2019s best for their quad and ensure there is alignment within each milestone. The CTO Leadership Team is composed of the CTO\u2019s direct reports and the Office of the CTO (OCTO). The OCTO is composed of the CTO, the Engineering EBAs, the CTO\u2019s People Business Partners, and the CTO\u2019s Director of Strategy and Operations. This team works to amplify the CTO\u2019s reach, vision, and mission. They work together to deliver programs and results across the entire Engineering Division. This page describes the deployment and release approach used to deliver changes to users. The overall process consists of two significant parts: For more details on the individual processes and how to use them please see the Deployments page for GitLab.com changes and the Releases page for changes for self-managed users. There are three important components of developing one\u2019s career: Team members who are (or want to be) on track for promotion should be engaged in\na career coaching conversation with their manager. Some basic information about\nthis process can be found in the People Ops\u00a0handbook.\nSpecific coaching plan templates are listed here to help start the conversation: We want to build these documents around the career matrix for Engineering. Since this career\nmatrix is still being developed, these documents are currently based on the job family requirements. GitLab Engineering values clear, concise, transparent, asynchronous, and frequent communication. Here are our most important modes of communication: As part of a fully-distributed organization such as GitLab, it is important to stay informed about engineering-led initiatives.\nWe employ multimodal communication, which describes the minimum set of communication channels we\u2019ll broadcast to. The Engineering Divison has a Google Group, engineering@gitlab.com (internal only), that all members of the division should become members as part of the onboarding process. If this is not the case for you, reach out to your manager. As GitLab, the company, primarily communicates via Slack, use this list mainly for Access Control to Google Drive/Docs/Sheets/Slides. Occasionally, it is useful to set up a demo on a regular cadence to ensure cross-functional iterative alignment.\nThis is helpful for high-impact deliverables that require integration across multiple functional teams. This is in-line with the seventh principle of the Agile Manifesto: \u201cWorking Software is the best measure of progress\u201d. For multi-person groups or critical projects, we use a heavier weight grading process: The demo master grades each step during the demo meeting. To make it less subjective, we use a scale that is widely understood and communicated.\nOur scoring definitions are as follows: The handbook is essential to working remote successfully, to keeping\nup our transparency, and to recruiting successfully. Our processes are constantly\nevolving and we need a way to make sure the handbook is being updated at a regular\ncadence. This is measured by Merge Requests that update the handbook contents relate to the Engineering Division overtime. Hiring is a cornerstone of success for our engineering organization, contributing to our growth and our ability to drive results for our customers. As such, it\u2019s not just a responsibility but fundamental to every engineer\u2019s contribution to GitLab. It should be deeply ingrained in every engineer\u2019s role at GitLab, regardless of their seniority. By actively participating in recruitment efforts, engineers help shape their team culture, elevate technical standards, and ensure a continuous influx of diverse perspectives and skillsets. Contributing to hiring efforts allows GitLab to grow responsibly and affects our collective success within Engineering. At GitLab, it is expected that everyone is a manager of one. For Individual Contributors (IC) a new type of challenge begins with the Staff Engineer role. Engineering IC Leadership is an alternative career path to Engineering Management. Just like moving into management, also moving from Senior to Staff changes the day-to-day work and expectations placed on ICs. Engineering IC Leaders exert technical leverage in their scope of influence.\nLike any other leadership role, the focus should be on helping others to improve.\nTheir impact multiplies with every person they help grow, and the company gets more value when they\u2019re not investing time in doing things themselves. At GitLab, we promote two paths for leadership in Engineering. While there is a\nhealthy degree of overlap between these two ideas, it is helpful and efficient\nfor us to specialize training and responsibility for each of: While technical leadership tends to come naturally to software engineers,\nprofessional leadership can be more difficult to master. The PlatoHQ Program has a total of 10 Engineering Managers/Senior IC\u2019s participating. The program exists of both self-learning via an online portal and 1-1 sessions with a mentor. The 7CTOs Program is run with 4 Senior leaders in Engineering. The program exists of peer mentoring sessions (forums) and effective network building. AI Gateway for GitLab Duo features. Scale and develop our diverse, global team to drive results that support our product and customer growth, while maintaining our values and unique way of working. GitLab\u2019s unique way of working asynchronously, handbook first, using the product we develop, and with clear focus on our values enables very high productivity. In delivering on growth, we maintain our values and ways of working while developing team members and increasing the diversity of our team. We focus on constantly improving usability and reliability of our product to reach maximum customer satisfaction. Community contributions and customer interactions rely on efficient and effective communication. We are a data-driven, customer experience first, open core organization delivering one secure, reliable, world leading DevOps platform. A Fast Boot is an event that gathers the members of a team or group in one\nphysical location to work together and bond in order to accelerate the\nformation of the team or group so that they reach maximum productivity as\nearly as possible. Right now, the fast boot is intended for new teams or for teams with a majority\nof new members who need to build their culture of shipping work. If your team\nfits this description, you can propose holding a Fast Boot to reduce ramp up\ntime and establish and strengthen relationships between team members. You can find engineers with expertise in various frontend domains on the engineering\nprojects page under the following sections: You can reach out to these experts to get help on: The frontend group has scheduled weekly calls every Tuesday. Since 2021-06-01, these occur at three staggered, time zone friendly times, repeating every three weeks. During these calls, team members are encouraged to share\ninformation that may be relevant to share with other members synchronously (Eg. new documentation change, new breaking changes added to master). As part of the FY25-Q2 Engagement Survey Results & Action Planning, we identified Team Member Development & Engagement as being an area to focus on. One of the actions we took was to identify a way to provide Engineering get-togethers for increased sense of belonging After looking at different possibilities based on budget we were able to provide a subsidy in FY25 to facilitate these get-togethers, both in an in-person format as well as virtually. GitLab has partnered with Plato HQ for an external Mentoring Program. In this program GitLab team members select Mentors external to GitLab.  Some of the other Mentoring programs we have here at GitLab are internal to GitLab.  Minorities in Tech and Women in Sales are both made up of GitLab Mentors and GitLab Mentees.  The external mentoring is what makes this approach to GitLab unique. For more information on mentoring best practice, visit Mentoring. GitLab consists of many subprojects. A curated list of GitLab projects can be found at the GitLab Engineering projects page. When creating a new project, please follow these steps: Read and familiarize yourself with our stance on Dogfooding. Be aware that as part of a product development organization that builds a tool for people like us, that our default is to add features and tooling to the GitLab project. This is still true when the effort to do so is 2-5x. Despite this, if you still feel you need to create a project outside of GitLab, you must follow this process to document the decision The definition of \u201cincident\u201d can vary widely among companies and industries. Here at GitLab, incidents are anomalous conditions that result in \u2014 or may lead to \u2014 service degradation, outages, or other disruptions. These events require human intervention to avert disruptions, communicate status, restore normal service, and identify future improvements.\nIncidents are always given immediate attention. Incident Management is the process of responding to, mitigating, and documenting an incident. At GitLab, we approach Incident Management as a feedback loop with the following steps, with different teams adjusting them as needed: Our vision is to be a world-class Infrastructure & Tools department that enables GitLab to meet & exceed our customers\u2019 needs. We: Direction is set within the Infrastructure, and the Quality direction pages. With the ongoing consolidation of the departments, separate direction pages will become obsolete. This page provides an overview of the joint R&D OKR workflow. All departments within R&D, which includes the Product and Engineering Divisions, collaborate by following this guidance. For clarifications on the OKR process, team members can post in Slack #product or #engineering-fyi. The OKR process is designed to tie in to the overall OKR process the company uses. That process is driven largely off of the date of the Key Review meetings, so the Product process keys off of that date as well. Dates will not necessarily align with the start of a fiscal quarter as a result. The calculation methodology for GitLab.com Service Availability definition is in the monitoring policy. More details on definitions of outage, and degradation are on the incident-management page These videos provide examples of how to quickly identify failures, defects, and problems related to servers, networks, databases, security, and performance. The Infrastructure department\u2019s SREs provide 24x7 on-call coverage for the production environment. For details, please see incident-management. As a company, GitLab is dedicated to open source. Not only do we believe in it, but we use it, and we give back to it. Not just through GitLab, but through contributions to other open source projects. The purpose of this page is to document how a GitLab employee can: As an open source project, we want to stay healthy and be open for growth, but also ready to accommodate a 10x factor of\nour community. In order to achieve that, we\u2019ve outlined a strategy that is a collaboration between multiple departments. We categorize performance into 3 facets Backend performance is scoped to response time of API, Controllers and command line interfaces (e.g. git). DRI: Tim Zallman, VP of Engineering, Core Development. Performance Indicators: Frontend performance is scoped to response time of the visible pages and UI components of GitLab. DRI: Tim Zallman, VP of Engineering, Core Development The handbook pages nested under \u201cpolicies\u201d directory are controlled documents, and follow a specific set of requirements to satisfy various regulatory obligations. Avoid nesting non-controlled documentation at this location. GitLab submits applications for R&D Tax Credits in a number of jurisdictions that implement reimbursement schemes for research and development. A subject-matter expert (SME) from engineering is appointed to each application to assist with data collection. A third-party tax agent prepares and submits the report. SMEs are usually Engineering Managers or Directors and located in, or with reasonable knowledge of, the jurisdiction under application. The role of the SME is twofold: Quarterly, CTO Leadership will recognize Engineering team members who have excelled in a given quarter. Recognition includes: In Navan, click Add Transaction Select Upload receipt (or select Type in details)\nUnder Expense Type field, please select \u201cTeam events & meals\u201d\nUnder Classification, please select \u201cFY25 Team Building\u201d\nUnder Description field, please include this link: https://handbook.gitlab.com/handbook/engineering/recognition/#engineering-quarterly-achievers-recognition-dinner\nClick Submit (or Save & close if you need to come back to add more information). This page describes the processes used to release packages to self-managed users. Monthly self-managed release GitLab version (XX.YY.0) is published every month. From this monthly release, planned, and unplanned critical patch releases are created as needed. Our maintenance policy describes in detail the cadence of our major, minor and patch releases for self-managed users. The major release yearly cadence was defined after an all stakeholder discussion. The self-managed release is a semver versioned package containing changes from many successful deployments on GitLab.com. Users on GitLab.com, therefore, receive features and bug fixes earlier than users of self-managed installations. At GitLab transparency is one of our core values, as it helps create an open and honest working environment and service, which in turn accelerates growth and innovation. We treat a root cause analysis (RCA) as an opportunity to be transparent amongst our organization and community by investigating what went well and what didn\u2019t after working on a project, incident, or issue. This page defines an RCA, the benefits of completing them, and how to complete a successful RCA here at GitLab. Our product offering is growing rapidly. Occasionally we start new teams. Backend teams should map to our product categories. Backend teams also map 1:1 to product managers. A dedicated team needs certain skills and a minimum size to be successful. But that doesn\u2019t block us from taking on new work. This is how we iterate our team size and structure as a feature set grows: Generally engineering teams at GitLab are fullstack, they are made up of Frontend, Backend, and Fullstack individual contributors with a single Engineering Manager. An unplanned upgrade stop is disruptive for customers as it requires to perform rollback and additional maintenance work for performing the upgrade. Unplanned stops should be treated as incidents. The process below outlines the different stages of the incident resolution process and the steps to be taken by the corresponding teams and Directly Responsible Individuals (DRIs). High-level workflow: An unplanned upgrade stop happens when we fail to communicate the necessity of this upgrade stop in our upgrade path. For more information, read what an unplanned upgrade stop is. This program allows team members at GitLab to volunteer and donate their time and technical skills (such as programming or Linux administration) to provide knowledge, support, and coaching to members of underrepresented groups (URGs) in the technology industry. The hope is we can help people who have been denied opportunity for whatever reason, and desire to get their first job in the technology industry. This program is in pilot as of November 1, 2020. Please reach out to the contacts below if you are interested in taking part."
    },
    {
        "title": "Support Team Handbook",
        "url": "https://handbook.gitlab.com/handbook/support/",
        "content": "The GitLab Support Team provides technical support to GitLab.com and Self-Managed GitLab customers. The GitLab Support Team Handbook is the central repository for why and how we work the way we do. Know someone who might be a great fit for our team? Please refer them to the job-family descriptions below. Remember, as members of the support team we are the first to interact with someone when they have a problem or question. As such it is up to us to represent the company and make sure we present ourselves properly. Therefore we are expected to: Our goal is to provide guidance that will lead to the best results for our customers as they use GitLab. In that, we will often point to documentation, product functionality, or open bugs/feature requests.\nHowever, there are times when customers will be best served through one of our commercial offerings. Support is part of the Engineering Department and Support Engineers are not commissioned or bonused for upsell for additional services, customer purchases, or lead generation.\nIf you recommend Professional Services or moving to a different tier or offering you may link to this section in your recommendation to give the customer assurance you\u2019re doing so with no mixed motivations. GitLab Support is part of the Engineering division.\nWhile most engineering departments are part of the R&D cost center,\nSupport is part of the Cost of Sales (or sometimes Cost of Goods Sold (COGS)) cost center. This unique arrangement is expressed in our Key Performance Indicators,\nwhich are largely focused around pursuing customer success and satisfaction\nwhile driving efficiency by increasing output while keeping costs within a\npredefined range. This is also why Support Engineer responsibilities\ninclude contributing code and documentation and working alongside Product\nManagers on our products: By using the knowledge gained from interacting with\nour customers to make our products or docs better, we solve problems before\nthey become one. This reduces support case load while increasing efficiency for\nthe wider GitLab organization. For example, the Sales department can rely on\nour docs to answer customer queries instead of leaning on Support or Customer\nSuccess for help, freeing up more time to close sales. Part of Support\u2019s role is to amplify the voice of the customer. One way of doing this is inviting other GitLab team members into\nexperiences that will help them understand customer challenges with the product or our own obstacles in helping customers overcome those challenges. Before you start, make sure you get light-agent access in Zendesk so that you can view Support tickets. If you\u2019re looking to get more exposure to customers, there are a few ways to get involved with Support: GitLab team members interested in learning about the GitLab Support team and our responsibilities are encouraged to participate in the Support Shadow Program. The Support Shadow Program is a way that team members outside of Support can spend time shadowing, learning, collaborating, and working together with the GitLab Support team. If you\u2019re not part of the Support team and you\u2019d like to participate in this program, open a Support Shadow Program issue in the support-team-meta project. This issue will be used to organize, plan, and track progress toward this program. GitLab Support uses Calendly to facilitate scheduling Shadow pairing sessions with participants. If you\u2019re part of the Support team and you\u2019d like to volunteer to host Support Shadow Pairing sessions with folks outside of Support, please open a Schedule update request issue requesting that Support Ops add you to the Support Shadow Program Calendly rotation. Support calls are published on the GitLab Support Calendar. There are: A great way to get involved is to join a customer emergency call. You can monitor #support_self-managed for PagerDuty alerts. Alternatively,\nif you have access to PagerDuty you can be scheduled into a shadow rotation. If you go through the responsibilities for each role in Support you can piece together how the organization works. We wanted to make a simple clear way to think about how the roles work together to solve problems: This simple list helps to give an easy way to set expectations and align problem solving in different roles. We use Key Performance Indicators (KPIs) to keep track of how well each Engineering Department is doing, including the Support team, as a whole. The KPI measurements can be found under the Reporting tab in Zendesk if you have the appropriate access, but progress on meeting these KPIs is also tracked via the aforementioned KPI link. We review these KPIs weekly in the Support Week-in-Review. In service of achieving our KPIs and OKRs, there are three key pillars that we must balance to achieve success: At various times it\u2019s easy to over-optimize on one of the pillars to solve a problem, but considering all three is key to avoiding short-sighted decision making. The Single Source of Truth\nfor information about Support Team Members - everything from email address and\npersonal interests to product skills and group memberships - is the\nsupport-team project.\nThe Support Team Home Page is\nbuilt from the information in that file. Many other Support tools and\nautomations make use of it also. See the\nSupport team entry page\nof the Support Team wiki\nfor details of the structure of the file. Information for and about the different parts of the Support Team can be found in the following sections of the Support Handbook: Below we also have some commonly referenced pages: GitLab Support\u2019s vision is to deliver a consistent, \u201cdelightful\u201d experience to our customers. Our team members will collaborate across all timezones to seamlessly deliver the results our customers care about while continuing to strengthen and scale the team. The overall direction for Support in FY25 will continue to build from the foundations laid in FY24. We will continue to focus on KPI achievement and evolve and iterate our approach to support, keeping the customer centered in our outcomes. Following on to the company\u2019s overall strategic objectives, specific areas of focus are: While our publicly visible OKR page and Key Performance Indicators reflect the focus and progress for the current quarter, the following provides more detail on the items included in the themes for the entire FY25. FY24 was a challenging year in many aspects. As the workload and customer expectations grew, we needed to look at how we could improve efficiency and create a differentiated Support experience. FY25 is a year to focus and align on our customer needs and put our customers at the center of our understanding of their situations, perceptions, and expectations. To that end, we will: In FY23 / FY24 we moved towards dividing the team into globally distributed groups of engineers. In FY25 we\u2019ll build on that foundation and extend towards differentiating support offerings to better align with customer requirements. This year, we will: As GitLab grows, Support\u2019s influence within the company as advocates for customers must also grow. We need to continue to strengthen the Values-driven cultural attributes that promote efficient collaboration and results for customers while maintaining GitLab Support as a great place to work. In FY25 we will: FY24 was a year of better understanding the needs of our customers. In FY25 we will focus on delighting them. We will: Unlike typical companies, part of the mandates of our Security, Infrastructure, and Support Departments is to contribute to the development of the GitLab Product. This follows from these concepts, many of which are also behaviors attached to our core values: As such, everyone in the department should be familiar with, and be acting upon, the following statements: Citing our dogfooding operating principle, people sometimes ask why GitLab Support doesn\u2019t use Service Desk. Dogfooding is using a piece of GitLab for its intended purpose. For example, one could use GitLab issues as a newsletter (and we do! See: Support Week in Review), but creating merge requests to help Issues serve as a newsletter more effectively wouldn\u2019t be dogfooding unless that improvement also helps its core use case. In other words: Dogfooding is using the product in the way that our customers would use it to the end of discovering and solving pain points that they have. Dogfooding supports customer results. At GitLab Support we use Service Desk to process Personal Data Requests, but not for our global support because the customer for Service Desk is primarily small teams soliciting bug reports, feature requests, or general feedback. Through our use of Service Desk in this smaller setting we\u2019ve been able to influence product direction towards adding features like internal notes. We continually evaluate product features for use-cases within Support and provide feedback and feature requests where blockers exist. Support will always prioritize customer results over any other consideration. These were previously populated via a tool we are no longer using.\nTODO: Replace with current GitLab implementation These were previously populated via a tool we are no longer using.\nTODO: Replace with current GitLab implementation See Managers/Hazards page The GitLab Support Team is part of the wider Engineering function. Be sure to check the\ncommunications section in the Engineering handbook\nfor tips on how to keep yourself informed about engineering announcements and initiatives. Here are our most important modes of communication: Where we want to ensure that important messages are passed to the global support team, we will use this messaging template. This ensures that these messages are delivered across our communications channels in a structured and documented manner. We use the following GitLab Groups to notify or add support team members to issues and merge requests on\nGitLab.com. Our team projects and issue trackers can be found in the Support parent group. Here are some selected projects\nwhich are relevant to team communications. We use the Support meta issue tracker for tracking issues\nand creating issues that may require feedback around support. If you\u2019re interested in working on a project or task related to\nsupport feel free to create an issue and link to any external issues or projects so that we can: Issues regarding documentation or features for GitLab, our FOSS project or any of the GitLab\ncomponents should not go in this issue tracker, but in their appropriate issue tracker. If you have a proposed solution that is actionable, it\u2019s best to start a merge request, tag the team for feedback and link in the Support Week in Review. We follow GitLab\u2019s general guidelines for using Slack\nfor team communications. As only 90 days of activity will be retained, make sure\nto move important information into the team handbook, product documentation,\nissue trackers or customer tickets. When naming channels, \u201cspt\u201d is meant for internal channels, meaning those that will be of use to the Support Team mainly. They should be public so others may join if they choose. If a channel has a \u201csupport\u201d prefix, it is meant as a public interface where other teams will interact with the Support Team. The Support Daily Slackbot\nis an automated tool designed to facilitate daily standup Slack threads across\nvarious teams and regions at GitLab. It posts customized messages to specific\nSlack channels based on type and target. For further details of the different\nvariations, please refer to the README file. At GitLab we are to be public by default unless there is a valid reason for it to not be public. While Slack\nis not public, the spirit of opening up discussions so that everyone can contribute means that private channels should be kept to a minimum. The following private channels are permanent fixtures in support. Usage estimates are approximate based on traffic in Feb 2022. Before starting a new private channel, ask yourself Why can\u2019t everyone contribute here? Appropriate answers might be: Private channels are not appropriate for: Values are only values if you do them when it is hard. See more discussion on how to scale the business while preserving GitLab Values. If you need to be added to one or more of these groups, please open an issue in\nthe access requests project. We use the following team calendars to coordinate events and meetings: Add these calendars to your GitLab Google calendar by clicking on the \u201c+\u201d sign next to \u201cother calendars\u201d, and choose \u201csubscribe to calendar\u201d. Enter the relevant ID mentioned above. If you need access to these calendars, ask a support team member for help. Please use the following formats for your name in Zoom as described in adding your title to your name in Zoom. As a primarily customer facing team, these formats were chosen to help identify you by vendor and role in calls\nwhere customers are present. For the sub-department, use the smallest unit you belong to. Again, bias for customer understanding over technical correctness. For example, The Support Team has several meetings each week. These allow us to coordinate and\nhelp us all grow together. Each meeting has its own agenda and is led by a different member of the team each week. Discussions are encouraged to be kept in issues or merge requests so the entire team can collaborate, regardless of time zone. Any demos or announcements that need to be shared with the entire team should be shared in the Support Week in Review. All Zoom and agenda links can be found on the relevant calendar entry in the Support Calendar.. Support team members in some regions meet up regularly.\nDetails of these calls are on the Weekly Support Team Call workflow page. The Support management team meets regularly. Details of these calls are on the Support Managers page Some regional Support teams have meetings oriented around company news, Support initiatives, training plans, and connectedness. Senior and Staff Support Engineers are encouraged to host office hours. These office hours are intended to strengthen\nthe team through mentoring. It is up to each Senior/Staff Support Engineer whether they schedule office hours, and how\noften. Please see the \u201cGitLab Support\u201d Team calendar to view office hours and invite yourself. We encourage hosts to include what they will cover in the calendar event description and optionally a document to track. Some ideas of what one can expect at a Senior/Staff Support Engineers\u2019 office hour: You may wish to host a sync call. To do so, you can create an event on the Support Calendar.. To invite team members to the event, you can use the appropriate Support email alias (internal Handbook, GitLab team members only) Every Friday, we do a week in review, inspired by the greater Engineering organization week in review.  You can add topics any time by using the SWIR topic form. Any workflow changes or announcements should be shared in the SWIR and we recommend you check at least once a week to stay up to date on recent changes. Ideally, the information shared here should have a permanent location such as an issue or merge request. We encourage anyone in the team to share. We currently have the following topics, each in its own section in the SWIR: SWIR Issues can also have their own Tags or Labels in the GitLab project. These are used to highlight specific Areas of Focus (L&R, SaaS\u2026). Labels are used on the Issues only, they do not appear in the digest Issue nor in the Google doc. One label, Manager Attention, is used for policy changes or other topics of\nwhich Support Managers should specifically be made aware. You can find the\nManager Attention label\nhere]\nand subscribe to it. You can read about the origins of the auto-generated SWIR in this issue. The Support Team collaborates with many other departments throughout GitLab -\nSales, Channel, Product and Legal, to name a few. And we have created two\ndifferent roles to help those collaborations to be as effective and efficient\nas possible. The Support Stable Counterpart role is designed to provide a strong connection\nbetween a product or non-product team and Support. The purpose is discussing\nproduct issues, sharing product knowledge and representing customer needs, as\nwell as sharing knowledge about each team\u2019s work and developing processes and\ndocumentation to allow the two teams to work together well. If you are interested\nin becoming a Support Stable Counterpart, or would like to learn more about the\nrole, read the\nSupport Stable Counterparts\npage. The Support Team records our institutional knowledge, processes and workflows\nin multiple places, such as the handbook and project issues templates. When\nupdating such documents, make sure to have visible artifacts of approval on\nyour merge requests before merging even if you have received approval somewhere\nelse. This avoids the impression of changes being made without any oversight\nor accountability. Artifacts of approval can include: Each Slack channel within Support has a number of Workflows attached to them that are used to provide information to users. The source files for each workflow live in the slack-workflows project. Some workflows are meant to notify the team of new issues created in the relevant project.\nIn these cases, a project webhook passes information to Zapier,\nwhich then sends the information to a Slack workflow. Providing information by reacting to a message with a specific emoji. See the Support Time Off page See the Support Onboarding page After getting promoted, make sure to update your title in: Consider updating the title on Slack and on Zoom, following the guidelines in Zoom name format. In GitLab Support, we use Support Pods to organize support engineers as they\nwork. Each Support Pod is a cross-region, single skill group of engineers who\nare interested in their Support Pod\u2019s specific product area. They are engineer-\nlead. To join or start a Support Pod you can read more below. See the Support Pods handbook page and the Working with Support Pods workflow page. The Support team uses \u2018support-team-meta\u2019 project issues to track ideas and initiatives to improve our processes. The \u2018Active Now\u2019 issue board shows what we\u2019re currently working on. It uses three labels: Some principles guide how these labels are used: Each week we look at the board and discuss the issues to keep things moving forward. By keeping a maximum of six issues for each label, we limit work in progress and make sure things are completed before starting new tasks. Adding and managing items on the board: Support managers will regularly review the board to keep items moving forward. The Support Slackbot (archived) has been retired. The knowledge base (KB) is a repository of solutions to commonly-encountered problems, created and\nmaintained by support engineers. In the KB, we turn the knowledge created when we solve a ticket for\none customer into a public resource that helps others self-serve \u2013 leveraging one-time effort\ninto an article that can be used multiple times independently from the ticket assignee. The KB complements our product docs. Where the docs provides an overview of our current product\nofferings and helps users learn to use and operate them, the KB provides solutions to problems users\nencounter in current and past versions of our product offerings. This narrow focus makes knowledge\nmore accessible to customers who may not always be on the latest version of our products. This page serves as the cornerstone for a Support Engineering data analysis\ncommunity of practice.\nSupport team members who engage in any form of data extraction and analysis,\neither out of interest or as part of their work, can use this page to get an\noverview of ongoing planning and analysis efforts in the Support team, current\nmethods of extracting and analyzing data, and figure out who to collaborate with\non specific topics of interest."
    },
    {
        "title": "Development",
        "url": "https://handbook.gitlab.com/handbook/engineering/development/",
        "content": "This page is dedicated to database application engineering and provides an entry-point for resources on this topic. Also see Database Team in Enablement. Please refer to the development documentation for database guidelines. We have two primary job roles that are focused on the database aspect: The Backend Engineer, Database role is a software engineering role concentrated on application-side improvements and foundational database work in the GitLab codebase. Enable engineers across the world by having top notch planning and issue tools for managing their work, awesome tools to organize their code and evolve their codebase through the best code review and online editing experience.\nSupport organizations to have an easy entrance level to use GitLab by having great import capabilities, a great documentation experience and administration tools. We thrive for ownership of the things that we built by having a clear view on its performance and stability in production. We constantly challenge ourselves to build a better, faster and more robust application. It is important that all developers are aware of secure coding best practices and refresh this knowledge periodically. This is tracked via Secure Coding Training Guidelines. The materials from an earlier Ruby on Rails performance workshop can be found on internally shared Google drive. Here is the information of a PostgreSQL query optimization bot at GitLab - Joe: Blueprint and Design. Measures the number of past due infradev issues by severity. There are specific scenarios we are identifying that will require additional approval before moving forward. At GitLab we value freedom and responsibility over rigidity, however in the examples requiring approval section below we outline which decisions will need to go through the approval process before proceeding. Each section requiring approvals will have a considerations section. If you answered yes to all of the questions in the considerations section, then you will need to get approval for your proposal before proceeding with implementation. Steps for the approval process: At GitLab, Company Culture is very important to us. The\nmain ingredient of the company culture are GitLab Values. GitLab Values have guided us throughout the evolution of\nthe company. Those values have been crucial in maintaining a positive and\nproductive culture, helping us make decisions to make the company and the\nproduct better. Our Engineering Principles are built on top of GitLab Values,\nand provide additional explanation of these in the context of the software\nengineering practice. The Incubation Engineering Department focuses on projects that are pre-Product/Market fit. The projects they work on align with the term \u201cnew markets\u201d from one of our product investment types. They are ideas that may contribute to our revenue in 3-5 years time. Their focus should be to move fast, ship, get feedback, and iterate. But first they\u2019ve got to get from 0 to 1 and get something shipped. It is essential that all developers are aware of secure coding best practices and refresh this knowledge periodically. We chose to have engineering managers track this for their teams vs. using the acknowledgment process as it is believed it will cause it to be better received. This page is for any development manager notes we want to share more broadly.  A directory was created in case we need to archive or break out content. The following is a brief for engineering managers to help in their conversations with team members about compensation.  This document is to give additional context on the FY'21 compensation plan and how GitLab views compensation. It should be viewed as complementary to the handbook information."
    },
    {
        "title": "Incubation Engineering Department",
        "url": "https://handbook.gitlab.com/handbook/engineering/development/incubation/",
        "content": "The Incubation Engineering Department focuses on projects that are pre-Product/Market fit. The projects they work on align with the term \u201cnew markets\u201d from one of our product investment types. They are ideas that may contribute to our revenue in 3-5 years time. Their focus should be to move fast, ship, get feedback, and iterate. But first they\u2019ve got to get from 0 to 1 and get something shipped. We utilize Single-engineer Groups to draw benefits, but not distractions, from within the larger company and GitLab project to maintain that focus. The Single-engineer group encompasses all of product development (product management, engineering, design, and quality) at the smallest scale. They are free to learn from, and collaborate with, those larger departments at GitLab but not at the expense of slowing down unnecessarily. The Department Head is the VP of Incubation Engineering. In FY25 we will continue to mature some of our key projects and to contribute to new opportunities within the AI sphere to build upon the capabilities that GitLab offers.  Our current batch of projects are building  customer value and interest and achieving significant monthly growth milestones.  Our aim is to reach a level of maturity with these projects that allows us to graduate or reassign these groups to new opportunities. Our success is tied to the community of developers and users that can benefit from our features, and strong collaboration and engagement with those groups is a key focus for this year. As our team matures, we need to be mindful of setting a culture of innovation and results. We do this through encouraging experimentation and autonomy, whilst being collaborative and transparent to internal teams and external stakeholders. The Incubation Engineering team is unique within GitLab in that the team members are not working on shared problems, but have the same challenges and shared experiences. We should ensure that successes and failures are documented and shared amongst team members to help each other grow and to minimise the inherent isolation and stress that can be part of this role. The aim of the SEG\u2019s in the Incubation Engineering Department is to get ideas for new markets into the Viable category from our maturity framework.  Ideas that we successfully incubate will become a stage or feature within the relevant areas of our product, with full Product, Engineering, UX and Infrastructure support for future development. In some cases we may invest in an SEG and then decide to acquire an existing product or team in the same area. These situations are disruptive, but unavoidable, and we will work closely with the affected SEG to adapt. In order to determine our investment into an SEG, we use the following assumptions: Reference: A new market in our product roadmap is a long-term bet to help us expand our Serviceable Addressable Market (SAM) over a 3-5 year time horizon. We look at areas that fit within our company mission that we currently do not service and have one or more competitors that have validated the customer need.  Our criteria for entering these markets is that there is at least one competitor that is attaining over $100M annual recurring revenue, or at least 3 venture capital funded startups that have taken over $5M in funding.  We track our understanding of these markets via this internal document. We also manage projects that may not fit the above definition, but are well suited to the SEG model that we use as they require a degree of experimentation with significant risk of failure. These are significant defensive roadmap items that are important to work on to maintain our market share and competitive advantage in an area, but we cannot yet justify funding a larger R&D effort. The Incubation Engineering Department is not suited to deliver regular roadmap items as they are typically smaller in effort, have less risk of failure, and have less scope for experimentation to determine product/user fit. Key to the success of Incubation Engineering is the ability to iterate on ideas quickly and move on when we can\u2019t find customer traction.  We should be able to ship ideas and grow their usage quickly. Each project should be able to identify a vision and ship working code within the first month after inception, and then have regular monthly goals of continuing iteration and usage growth. SEGs that aren\u2019t well defined will require research to determine a direction. This research phase should include updates to the SEG handbook page, epics/issues, video update(s), and code where that makes sense. We should be aiming foremost for customer results, and not shipping features (even if they show usage) that don\u2019t demonstrate clear customer value. Each SEG page has a list of the targets and progress for each month, and these should also be demonstrated in a monthly showcase. Istio\nSecrets Rotation Our key focus is to ship software, we do this Iteratively and Transparently in an Agile way, concentrating on having something that works as soon as possible that we can build upon. For each of our Investment areas, we aim to showcase our progress using the Engineering Demo Process.  On the tracking issue for each area, each SEG should provide a status update and a link to a video of the current functionality.  We should aim to develop a scorecard to help grade our progress against each of the key features we are trying to develop, and include this in the update. We do this in order to ensure alignment with impacted teams at GitLab, to provide opportunties for Collaboration from interested GitLab team members, community members, and users, and finally to demonstrate Results. Around the 15th of the month each SEG should provide a short update video that covers the following key points: At the end of the month, we should have a monthly showcase which demonstrates the current state of each project and future plans, and does not assume any prior knowledge of the progress or vision. When uploading a video to our YouTube channel, we should: YouTube Playlists The Incubation Engineering department commits to and tracks quarterly Objectives and Key Results (OKRs). See the list of Incubation Engineering OKRs in GitLab. When an SEG is ready to be handed off to a product development group or other team inside GitLab, there will necessarily be some handover required. Product development groups who are going to be taking over the SEG can accelerate their work by borrowing the Incubation Engineer. This will allow full-time and continuous support for up to 3 milestones. Incubation Engineering Key Performance Indicators Incubation Engineering Projects and Issues You can also reach us on Slack at #incubation-eng in Slack (GitLab internal) The Incubation Engineer\u2019s Playbook contains useful tips and tricks an Incubation Engineer may employ for SEG and project success. From time-to-time Incubation Engineers get together to discuss and share ideas, learn from each other, and discuss the latest trends in the industry. Details are logged in the Incubation Offsites page. The Incubation Engineer\u2019s Playbook contains useful tips and tricks an Incubation Engineer may employ for SEG and project success. GitLab is the one DevOps platform. Teams use GitLab (SaaS or self-managed) for development, planning, collaboration and automation. However, digital transformation is incomplete without cloud adoption. Thus, Cloud Seed \u2014 a collaboration with Google Cloud \u2014 makes it trivial to consume cloud services from GitLab. List of user personas with specific benefits they actualize: The AI Assist SEG has matured to be part of the\nAI Assisted product group to support the development of Code Suggestions which was released as a Beta in GitLab 15.9. Airflow is the de facto tool for data teams to schedule and execute ELT pipelines, Machine Learning pipelines,\nDevOps tasks and really any task that requires scheduling. Its cronjob turned up to 11. The APM SEG aims to integrate monitoring and observability into our DevOps Platform in order to provide a convenient and cost effective solution that allows our customers to monitor the state of their applications, understand how changes they make can impact their applications performance characteristics and give them the tools to resolve issues that arise. This group is split into three APM\u2019s that will focus on each part of the architecture: The Breach and Attack Simulation (BAS) SEG is a Single-Engineer Group within our Incubation Engineering Department. The Single Source of Truth for status is tracked in the Breach and Attack Simulation epic. Running exploits to confirm vulnerabilities is inherently risky. We must be intentional in how we define what is in scope or out of bounds for assessments. The Dependency Firewall SEG is a Single-Engineer Group within our Incubation Engineering Department. We have an existing Dependency Firewall category which aims to prevent any unknown or unverified providers from introducing potential security vulnerabilities.  This SEG will work closely with that group to accelerate the development of the Dependency Firewall feature, and integrate closely with the work taking place on the Dependency Proxy. An initial MVP may be to implement NPM Audit with a UX that allows a user to specify an allow/deny list against criteria for the container registry.  Criteria can include checking for missing author name, email, or look for the existance of specific licenses.  We can also add rules to stop dependencies being downloaded immediately after an author change, as an example. The Developer Portal SEG is a Single-Engineer Group within our Incubation Engineering Department. This SEG aims to provide a developer portal for our customers, hosted on GitLab, that is a conduit to various metrics, tools and documentation.  Examples include: The DevOps for Salesforce SEG is a Single-Engineer Group within our Incubation Engineering Department. Our aim is to improve GitLab\u2019s capabilities for customers deploying applications onto Salesforce by integrating our DevOps capabilities. Our first iteration will be to build visual pipelines specific to the Salesforce CI/CD requirements, and develop community templates that can quickly help developers manage their end to end test and release requirements. The Five Minute Production project has evolved into \u26c5\ud83c\udf31 Cloud Seed. This page is dated and being maintained for archival purposes. Check out \u26c5\ud83c\udf31 Cloud Seed for the latest version The objective of the Five Minute Production (5MP) incubation project is to make (non-k8s) deployments trivial for GitLab users. This includes, but is not restricted to, AWS and Google Cloud as deployment targets. The original 5MP prototype was built between November 2020 and January 2021 and a short video description of it\u2019s usage and internals is available. This playbook contains useful tips and tricks an Incubation Engineer may employ for SEG and project success. Each Incubation Engineering project has its own handbook page which is linked from our list of current projects. The following sections are should be included: Outline the problem that we\u2019re trying to solve for our users. How do we intend to solve the problem? What is our overall vision for this project and how it will fit into GitLab? The heart of pages like this are \nPerformance Indicators data files which are YAML files.\nEach - denotes a dictionary of values for a new (K)PI. The current elements (or data properties) are: This guide provides guidelines and best practices for how to properly position an Incubation Engineering project, and what needs to be accomplished in order for a project to mature from Experiment to Beta to Generally Available. The first step when releasing the first iteration for an Incubation Engineering project is to establish the experiment. See the documentation for more details on what makes a GitLab Experiment. The team got together in the Mindspace Dam office at the heart of Amsterdam, spending three days together sharing learnings and brainstorming paths to success. Post-event retrospectives were held to help the team reflect on the offsite. The Istio SEG is a Single-Engineer Group within our Incubation Engineering Department. Istio is an open source service mesh platform that provides a way to control how microservices share data with one another and allows users to run distributed applications at scale. Istio solves connectivity challenges inherent to distributed services: Our aim is to provide Istio support to help our users easily deploy server-less applications and manage them from within GitLab. The Jamstack SEG is a Single-Engineer Group within our Incubation Engineering Department. This group\u2019s mission is to enable Frontend developers to build, deploy and manage externally facing, static websites using Jamstack architecture in a simple, configurable and scalable way. Frontend engineers should be able to use GitLab as the primary place to manage Jamstack Frontends. See the \u201cWeekly Update\u201d Epic for a list of all prior updates. The LCNC SEG is a Single-Engineer Group within our Incubation Engineering Department. Low-code and no-code are two distinct concepts that target different personas and require separate product strategies. This page presents low-code and no-code work streams in two sections. At GitLab, issues and MRs are the backbones to project planning and delivery. Project managers typically have processes to update issue assignees, labels and other statuses based on certain triggering events and conditions. However, these repetitive takes do not scale when the orgnization grows and become counterproductive and error-prone. NOTE: The MLOps Incubation Engineering project has become the MLOps team. These pages are left fir historical purposes, but are not actively maintained. Please refer to the MLOps team page for updated information. DRI: @eduardobonet MLOps is a Single-Engineer Group within our Incubation Engineering Department. This group works on early feature exploration and validation related to the MLOps group within the ModelOps stage. Mission: Make GitLab a tool Data Scientists and Machine Learning Engineers love to use. The Mobile DevOps SEG is a Single-Engineer Group within our Incubation Engineering Department. GitLab\u2019s vision for Mobile DevOps is to provide high-value, best-in-class capabilities for enterprise flagship apps. The future roadmap for Mobile DevOps will look to mature the build, sign, and release capabilities that exist today while introducing new features to support the test and secure stages of the process. Below are the items we look to address in coming releases. Monitor APM is a Single-Engineer Group within our Incubation Engineering Department. Our aim is to integrate monitoring and observability into our DevOps Platform in order to provide a convenient and cost effective solution that allows our customers to monitor the state of their applications, understand how changes they make can impact their applications performance characteristics and give them the tools to resolve issues that arise.  APM is a core part of the DevOps workflow as it shows the direct impact of deployed changes. The OKR Management SEG is a Single-Engineer Group within our Incubation Engineering Department. To develop Objectives & Key Results(OKR) functionality within GitLab. To create an MVP that is: Specific areas that we aim to address within Incubation Engineering are: Real-time Editing of Issue Descriptions (REID) was a\u00a0Single-Engineer Group (SEG)\ninvestment within GitLab\u2019s\u00a0Incubation Engineering Department.\nThis SEG effort has ended due to a team member departure, effective March 16, 2023. The goal of REID was to ship an MVP to enable real-time collaborative editing of issue descriptions. This would also serve as the foundation for building additional real-time collaborative text-editing use cases at GitLab.\nA user should never have to leave the GitLab application for tasks like pair programming, collaborating on isssues, merge requests, tech designs and RFCs.\nREID has been developed following the principle of progressive enhancement. The Secret Rotation SEG is a Single-Engineer Group within our Incubation Engineering Department. Our aim is to create a secrets management solution that automatically rotates secrets in both CI pipelines at runtime, as well as into an already deployed running application. We can iterate towards this solution by integrating with existing well known tools. The Self Healing Dependencies is a Single-Engineer Group within our Incubation Engineering Department. The Self Healing Dependencies group aims to provide users/developments with automated assistance that helps them to keep their dependencies updated. In GitLab we understand which customer repositories and containers are affected by problems or vulnerabilities with an underlying library used by your code.  This allows us to create a merge request that fixes the issue.  We will merge automatically, deploy and monitor the changes.  If we detect any problems, we will rollback and make an issue for the user to investigate. This page provides a comprehensive overview of Server Runtime and catalogs relevant links and pages. It is created and maintained by @shekharpatnaik. The Server Runtime SEG Single-Engineer Group is a part of Incubation Engineering Department. Server Runtime is aimed at engineering a performant, scalable workspace experience & productizing it as a customer offering. When this comes to fruition, we envision being able to bring to bear a workspace experience that is browser and platform agnostic and lets GitLab users build, run and test their code right within the GitLab platform. We see this as a viable product idea to generate revenue for the company & to transform the IDE experience for engineers. Competitors in this space, currently, are GitPod and Codespaces. The Service Desk SEG is a Single-Engineer Group within our Incubation Engineering Department. Our goal is to provide a complete, yet lightweight and customizable customer support solution that seamlessly integrates with the GitLab ecosystem and brings customers, support staff and developers closer together. Please feel free to subscribe to this GitLab issue to receive notifications when new updates are available."
    },
    {
        "title": "Infrastructure",
        "url": "https://handbook.gitlab.com/handbook/engineering/infrastructure/",
        "content": "The Infrastructure Department enables GitLab (the company) to deliver a single DevOps application, and GitLab SaaS users to focus on generating value for their own businesses by ensuring that we operate an enterprise-grade SaaS platform. The Infrastructure Department does this by focusing on availability, reliability, performance, and scalability efforts.\nThese responsibilities have cost efficiency as an additional driving force, reinforced by the properly prioritized dogfooding efforts. Many other teams also contribute to the success of the SaaS platform because GitLab.com is not a role.\nHowever, it is the responsibility of the Infrastructure Department to drive the ongoing evolution of the SaaS platform, enabled by platform observability data. If you\u2019re a GitLab team member and are looking to alert the Infrastructure teams about an availability issue with GitLab.com, please find quick instructions to report an incident here: Reporting an Incident. For all other queries, please see the getting assistance page. The Infrastructure Department operates a fast, secure, and reliable SaaS platform to which (and with which) everyone can contribute. Integral part of this vision is to: The direction is accomplished by using Objectives and Key Results (OKRs). Other strategic initiatives to achieve this vision are driven by the needs of enterprise customers looking to adopt GitLab.com. The GitLab.com strategy catalogs top customer requests for the SaaS offering and outlines strategic initiatves across both Infrastructure and Stage Groups needed to address these gaps. Unlike typical companies, part of the mandates of our Security, Infrastructure, and Support Departments is to contribute to the development of the GitLab Product. This follows from these concepts, many of which are also behaviors attached to our core values: As such, everyone in the department should be familiar with, and be acting upon, the following statements: (click the boxes for more details) The Infrastructure Library contains documents that outline our thinking about the problems we are solving and represents the current state for any topic, playing a significant role in how we produce technical solutions to meet the challenges we face. The Infrastructure department uses GitLab and GitLab features extensively as the main tool for operating many environments, including GitLab.com. We follow the same dogfooding process as part of the Engineering function, while keeping the department mission statement as the primary prioritization driver. The prioritization process is aligned to the Engineering function level prioritization process which defines where the priority of dogfooding lies with regards to other technical decisions the Infrastructure department makes. When we consider building tools to help us operate GitLab.com, we follow the 5x rule to determine whether to build the tool as a feature in GitLab or outside of GitLab. To track Infrastructure\u2019s contributions back into the GitLab product, we tag those issues with the appropriate Dogfooding label. At GitLab, we have a handbook first policy. It is how we communicate process changes, and how we build up a single source of truth for work that is being delivered every day. The handbook usage page guide lists a number of general tips. Highlighting the ones that can be encountered most frequently in the Infrastructure department: Classification of the Infrastructure department projects is described on the infrastructure department projects page. The infrastructure issue tracker is the backlog and a catch-all project for the infrastructure teams and tracks the work our teams are doing\u2013unrelated to an ongoing change or incident. In addition to tracking the backlog, Infrastructure Department projects are captured in our Infrastructure Department Epic as well as in our Quarterly Objectives & Key Results We have a model that we use to help us support product features. This model provides details on how we collaborate to ship new features to Production. The Infrastructure team maintains responsibility for the underlying infrastructure on which customer-facing services run.  Specific ownership details are in the GitLab Service Ownership Policy Infrastructure SREs may be aligned with stage groups as stable counterparts. Stable Counterparts are used as a framework for managing reliable services at GitLab.  The framework provides guidelines for collaboration between Stage Groups and Infrastructure Teams. The Infrastructure department hires for a number of different technical specialisms and positions across its teams. This Infrastructure Interviewing Guide offers more detail on some of our regular openings, interview process and other useful information related to applying to jobs with us. More information on our current openings can be found on the careers page. During an incident, playbooks are vital to the engineer on call (EOC) in resolving an alert. Having all of the salient information laid out in one place saves the EOC time in diagnosing and resolving the incident. It empowers the EOC with a set of standard steps for responding to incidents. Additionally, it can greatly reduce the stress of dealing with an alert when working on an unfamiliar service. In order to scale GitLab infrastructure at the right time and to prevent incidents, we employ a capacity planning process for example for GitLab.com and GitLab Dedicated. In parts, this process is predictive and gets input from a forecasting tool to predict future needs.\nThis aims to provide an earlier and less obstrusive warning to infrastructure teams before components reach their individual saturation levels.\nThe forecasting tool generates capacity warnings which are converted to issues and these issues are raised in various status meetings. There are a number of tools we use to plot and manage career development: Maintaining current role descriptions which establish expectations for hiring and ongoing performance expectations is an important supporting function for effective Career Development planning. The rest of the tools are for active engagement by the Team Member along with their Manager. The origin activity for this is the Big Picture Career Conversation, followed up with quarterly checkpoints and frequent 1:1s. Finally, 360 Feedback and Talent Assessment provide annual opportunities for additional insight on progress. Change Management has traditionally referred to the processes, procedures, tools and techniques applied in IT environments to carefully manage changes in an operational environment: change tickets and plans, approvals, change review meetings, scheduling, and other red tape. In our context, Change Management refers to the guidelines we apply to manage changes in the operational environment with the aim of doing so (in order of highest to lowest priority) safely, effectively and efficiently. In some cases, this will require the use of elements from traditional change management; in most cases, we aim to build automation that removes those traditional aspects of change management to increase our speed in a safe manner. Offer enterprise-grade operational experience of GitLab products from streamlined deployment and maintenance, disaster recovery, secure search and discoverability, to high availability, scalability, and performance. Core Platform focuses on improving our capabilities and metrics in the following areas: The following people are permanent members of teams that belong to the Core Platform Sub-department: The group of Database Reliability Engineers (DBREs) are on the Reliability\nEngineering teams that run GitLab.com. We care most about database\nreliability aspects of the infrastructure and GitLab as a product. We strive to approach database reliability from a data driven\nperspective as much as we can. As such, we start by defining Service\nLevel Objectives below and document what service levels we currently aim\nto maintain for GitLab.com. The Infrastructure Department, responsible for managing GitLab SaaS environment, has a number of processes that have an implicit emergency process component as a part of a regular workflow. This page serves as a high level overview of the most important components of those processes, with links to pages describing said processes in more depth. An integral part of any irregular situation occurring on GitLab SaaS is the incident management process.\nThis process is used for platform degradation and outage events, but it is also the process for emergency changes such as addressing critical vulnerabilities. This policy establishes service ownership within the engineering organization for customer-facing services, outlining responsibilities and ownership structure. This policy applies specifically to customer-facing services and the underlying infrastructure services that support them. The Reliability Team maintains responsibility for the underlying infrastructure on which customer-facing services run.  This includes: Incidents are anomalous conditions that result in\u2014or may lead\nto\u2014service degradation or outages. These events require human\nintervention to avert disruptions or restore service to operational status.\nIncidents are always given immediate attention. The primary goals of writing an Incident Review are to ensure that the incident is documented, that all contributing root cause(s) are well understood, and, especially, that effective preventive actions are put in place to reduce the likelihood and/or impact of recurrence.1 An Incident Review is a crucial opportunity for fostering deeper understanding within a blameless culture. Its purpose extends beyond collecting action items to prevent recurrence; it is a process for learning about both the systems and the engineering culture that contribute to incidents. By discussing and analyzing how these components operate and interact, we gain valuable insights into the technical environments we support and the broader organizational context in which they function. A: See our summary of our backup strategy A: Yes. We use GCP Persistent Storage volumes underneath all of our filesystems, and that is implicitly encrypted. So the live filesystems, their snapshot-based backups, database replicas, and logical backups are all fully encrypted at the block device layer. Additionally, GCP encrypts and encapsulates traffic between our nodes within our VPCs, so data in motion is also protected from eavesdropping and tampering. Percentage of time during which GitLab.com is fully operational and providing service to users within SLO parameters. Definition is available on the GitLab.com Service Level Availability page. Historical Availability is available on the Service Level Availability page. The Terraform configuration for the environments can be found in config-mgmt. \nWe have a WIP initiative to iterate on our company-wide infrastructure standards. You can learn more about this on the infrastructure standards handbook page.\nThis page will be refactored incrementally as the standards are documented, implemented, and changes to environments take place.\n We have a WIP initiative to iterate on our company-wide infrastructure standards. You can learn more about this on the infrastructure standards handbook page. This page will be refactored incrementally as the standards are documented, implemented, and changes to environments take place. Development happens on a local machine. Therefore there is no way to provide any SLA. Access is to the individual dev. This could be either EE/CE depending on what the developer is working on. The responsibilities of the Infrastructure Product Manager are documented in the job-families page. The Infra PM can help triage and prirotize inbound requests to Infrastructure from internal teams and GitLab.com customers. Types of requests: Examples of requests related to operational capabilities of GitLab.com include: The Infrastructure Library moved to https://gitlab.com/gitlab-com/gl-infra/readiness/-/tree/master/library. GitLab architects a defense-in-depth methodology that enforces the concept of \u201cleast functionality\u201d through restricting network access to systems, applications and services and ensures sufficient security and privacy controls are executed to protect the confidentiality, integrity, availability and safety of the organization\u2019s network infrastructure, as well as to provide situational awareness of activity on GitLab\u2019s networks. GitLab\u2019s network architecture is available to both internal and external users and hosts our DNS with Cloudflare incluing gitlab.com and gitlab.net. The GitLab.com production environment is comprised of services that operate\u2013or support the operation of\u2013gitlab.com.\nFor a complete list of production services see the service catalog This page shows the output of our service maturity model for each\nservice in our metrics catalog. The model itself is part of the\nmetrics catalog, and uses information from the metrics catalog and the\nservice catalog to score each service. To achieve a particular level in the maturity model, a service must meet\nall the criteria for that level and all previous levels. Some criteria\ndo not apply to all services (for instance, services like PgBouncer do\nnot need development documentation). See the SaaS Platforms Organizational Structure for teams in Infrastructure. The Infrastructure Platforms section enables GitLab Engineering to build and deliver safe, scalable and efficient features for multi-tenant and single-tenant GitLab SaaS platforms (GitLab.com and GitLab Dedicated). To deliver on the mission, we are in the process of formalising the building blocks we need to work on. In FY25, teams in the Platforms Section of the Infrastructure Department have collaborated on the \u201cNorth Star\u201d, which is then used to set the SaaS Platforms Strategy."
    },
    {
        "title": "Quality Department",
        "url": "https://handbook.gitlab.com/handbook/engineering/quality/",
        "content": "GitLab\u2019s Quality is everyone\u2019s responsibility. The Quality Department ensures that everyone is aware of what the Quality of the product is, empirically.\nIn addition, we empower our teams to ship world class enterprise software at scale with quality & velocity. In FY23 we will be focused on contributor success & customer results while delivering impact to the company\u2019s bottomline via alignment to top cross-functional initiatives. Key directional highlights; be more customer centric in our work, execute on 10x contributor strategy jointly with Marketing, provide timely operational analytics insights & improve team member engagement. In FY23 we anticipate a large increase of cross-functional activity within the company. Fostering an open-collaborative environment is more important than ever for us to deliver results. Objectives and Key Results (OKRs) help align our department towards what really matters. These happen quarterly and are based on company OKRs. We check in on the status of our progress routinely throughout the quarter to determine whether we are on track or need to pivot in order to accomplish or change these goals. At the end of the quarter, we do a final scoring which includes a retrospective on how the quarter went according to these OKRs. Infrastructure & Quality OKRs are captured here. We staff our department with the following gearing ratios: In addition to GitLab\u2019s communication guidelines and engineering communication, we communicate and collaborate actively across GitLab in the following venues: By the end of the week, we populate the Engineering Week-in-Review document with relevant updates from our department. The agenda is internal only, please search in Google Drive for \u2018Engineering Week-in-Review\u2019.\nEvery Monday a reminder is sent to all of engineering in the #eng-week-in-review slack channel to read summarize updates in the google doc. The Quality team holds an asynchronous retrospective for each release.\nThe process is automated and notes are captured in Quality retrospectives (GITLAB ONLY) We track work related to Engineering performance indicators in the Engineering Analytics board. This board is used by the Engineering Analytics team to: The work effort on Engineering Division and Departments\u2019 KPIs/RPIs is owned by the Engineering Analytics team. This group maintains the Engineering Metrics page. The Engineering Analytics board is structured by the analytics needs within each Engineering Department. At the beginning of each quarter, the team declares and prioritizes projects related to long-standing analytics needs for one or more Engineering Departments. In addition, the team also takes on ad-hoc requests ranging from maintenance of existing KPIs and dashboards to consultation on new metrics and data related to Engineering operations. The ownership of the work columns follows the stable counterpart assignment of the Engineering Analytics team to each Engineering Department. In order to engage with the team, please refer to the Engineering Analytics team\u2019s handbook page for the appropriate Slack channels and projects for creating issues for our team. We have top level boards (at the gitlab-org level) to communicate what is being worked on for all teams in quality engineering.\nEach board has a cut-line on every column that is owned by an individual. Tasks can be moved vertically to be above or below the cut-line.\nThe cut-line is used to determine team member capacity, it is assigned to the Backlog milestone. The board itself pulls from any milestone as a catch-all so we have insights into past, current and future milestones.\nThe cut-line also serves as a healthy discussion between engineers and their manager in their 1:1s. Every task on the board should be sized according to our weight definitions. Discussion on the intent and how to use the board The boards serve as a single pane of glass view for each team and help in communicating the overall status broadly, transparently and asynchronously. Every member in the Quality Department shares the responsibility of analyzing the daily QA tests against master and staging branches.\nMore details can be seen here Every manager and director in the Quality Department shares the responsibility of monitoring new and existing incidents\nand responding or mitigating as appropriate. Incidents may require review of test coverage, test planning, or updated\nprocedures, as examples of follow-up work which should be tracked by the DRI. The Quality Department has a rotation for incident management. The rotation can be seen here. Please note: Though there is a rotation for DRI, any manager or director within Quality can step in to help in an\nurgent situation if the primary DRI is not available. Don\u2019t hesitate to reach out in the Slack channel\n#quality-managers. Below mentioned are few venues of collaboration with Development department. To mitigate high priority issues like performance bugs and transient bugs, Quality Engineering will triage and refine those issues for Product Management and Development via a bi-weekly Bug Refinement process. Quality Engineering will do the following in order to identify the issues to be highlighted in the refinement meeting: Quality Engineering will track productivity, metric and process automation improvement work items\nin the Development-Quality board to service the Development department.\nRequirements and requests are to be created with the label ~dev-quality. The head of both departments will review and refine the board on an on-going basis.\nIssues will be assigned and worked on by an Engineer in the Engineering Productivity team and communicated broadly when each work item is completed. Moved to release documentation. The Quality department collaborates with the Security department\u2019s compliance team to handle requests from customers and prospects. The Risk and Field Security team maintains the current state of answers to these questions, please follow the process to request completion of assessment questionnaire. If additional input is needed from the Quality team, the DRI for this is the Director of Quality. Tracking of supplemental requests will be via a confidential issue in the compliance issue tracker. Once the additional inputs have been supplied, this is stored in the Compliance team\u2019s domain for efficiency. Due to the volume of issues, one team cannot handle the triage process.\nWe have invented Triage Reports to scale the triage process within Engineering horizontally. More on our Triage Operations The GitLab test automation framework is distributed across two projects: The Quality Department is committed to ensuring that self-managed customers have performant and scalable configurations.\nTo that end, we are focused on creating a variety of tested and certified Reference Architectures. Additionally, we\nhave developed the GitLab Performance Tool, which provides several tools for measuring the performance of any GitLab\ninstance. We use the Tool every day to monitor for potential performance degradations, and this tool can also be used\nby GitLab customers to directly test their on-premise instances. More information is available on our\nPerformance and Scalability page. Whether automatically generating production-like data, test data, or data to be used for a demo; the Data Seeder can be used to generate this data. See the GitLab Data Seeder documentation for more information."
    },
    {
        "title": "Security at GitLab",
        "url": "https://handbook.gitlab.com/handbook/security/",
        "content": "Our vision is to transparently lead the world to secure outcomes. Our mission is to enable everyone to innovate and succeed on a safe, secure, and trusted DevSecOps platform. This will be achieved through 5 security operating principles: To help achieve the vision of transparently leading the world to secure outcomes, the Security Division has nominated a Security Culture Committee. The Security Division provides essential security operational services, is directly engaged in the development and release processes, and offers consultative and advisory services to better enable the business to function while minimising risk. To reflect this, we have structured the Security Division around four key tenets, which drive the structure and the activities of our group. These are : The Product Security Department is primarily focused on Securing the Product. This reflects the Security Division\u2019s current efforts to be involved in the Application development and Release cycle for Security Releases, Infrastructure Security, and our HackerOne bug bounty program. The term \u201cProduct\u201d is interpreted broadly and includes the GitLab application itself and all other integrations and code that is developed internally to support the GitLab application for the multi-tenant SaaS. Our responsibility is to ensure all aspects of GitLab that are exposed to customers or that host customer data are held to the highest security standards, and to be proactive and responsive to ensure world-class security in anything GitLab offers. Security Operations Department teams are primarily focused on protecting GitLab the business and GitLab\u2019s platform. This encompasses protecting company property as well as to prevent, detect and respond to risks and events targeting the business and our platform. This department includes the Security Incident Response Team (SIRT) and the Trust and Safety team. These functions have the responsibility of shoring up and maintaining the security posture of GitLab\u2019s platform to ensure enterprise-level security is in place to protect our new and existing customers. Threat Management Department teams are cross-functional. They are responsible for collaborating across the Security Division to identify, communicate, and remediate threats or vulnerabilities that may impact GitLab, our Team Members or our users and the community at large. The Security Assurance Department is comprised of the teams noted above. They target Customer Assurance projects among their responsibilities. This reflects the need for us to provide resources to our customers to assure them of the security and safety of GitLab as an application to use within their organisation and as a enterprise-level SaaS. This also involves providing appropriate support, services and resources to customers so that they trust GitLab as a Secure Company, as a Secure Product, and Secure SaaS Security Program Management is responsible for complete overview and driving security initiatives across Product, Engineering, and Business Enablement. This includes the tracking, monitoring, and influencing priority of significant security objectives, goals, and plans/roadmaps from all security sub-departments.  Security Program Manager Job Family In keeping with our core values and the belief that everyone can contribute, the Security Division is committed to dogfooding and contributing to the development of the GitLab product. For information regarding GitLab\u2019s HackerOne bug bounty program, and creating and scheduling security issues, please see our engaging with security page and our Responsible Disclosure Policy. If an urgent security incident has been identified or you suspect an incident may have occurred, please refer to Engaging the Security Engineer On-Call.  Examples include, but are not limited to: GitLab provides a panic@gitlab.com email address for team members to use in situations when Slack is inaccessible and immediate security response is required. This email address is only accessible to GitLab team members and can be reached from their gitlab.com or personal email address as listed in Workday. Using this address provides an excellent way to limit the damage caused by a loss of one of these devices. Additionally if a GitLab team member experiences a personal emergency the People Group also provides an emergency contact email. Many teams follow a convention of having a GitLab group team-name-team with a primary project used for issue tracking underneath team-name or similar. We believe it is important to share regular updates at various levels of the Security Division, and we use Slack as the primary mechanism for providing these updates. Our updates are open to all GitLab team members using the following process: For an overview of the communication and response process for a suspected ransomware attack, please see our Responding to Ransomware page. The following best practices will help ensure tokens are handled appropriately at GitLab. For detailed requirements regarding the use of tokens at GitLab, please see our token management standard. We welcome GitLab team members to join meetings that are on our shared Security Calendar. Security crosses many teams in the company, so you will find ~security labeled\nissues across all GitLab projects, especially: When opening issues, please follow the Creating New Security Issues process for using labels and the confidential flag. This group is setup to help interested Security team members get up to speed with AI technologies and how to secure them. For more information, see the AI in Security Learning Group page. This policy is intended to outline the access management controls implemented by GitLab. These controls apply to information and information processing systems at the application and operating system layers, including networks and network services. Access requests are opened for all new or changing access. (AC-2) This policy is intended to outline the change management controls implemented by GitLab. Changes, in the context of this policy, are defined as modifications, including, but not limited to: The policy applies to changes that are made to systems assigned a Critical System Tier of Tier 1 Mission Critical, Tier 2 Business Critical, and Tier 3 Business Operational. Security Engineers typically act as Subject Matter Experts and advisors to GitLab\u2019s engineering teams. Security Engineers may wish to make a larger contribution to GitLab products, for example a defense-in-depth measure or new security feature. Like any contributor, follow the Contributor and Development Docs, paying particular attention to the issue workflow, merge requests workflow, style guides, and testing standards. Security Engineers will need to collaborate with and ultimately hand over their work to a team in the Development Department. That team will be responsible for prioritisation, review, rollout, error budget, and maintenance of the contribution. Security Engineers should ideally open an Issue or Epic as early as possible, labeled with the candidate owning team. The team can inform implementation or architectural decisions, highlight existing or upcoming work that may impact yours, and let them plan capacity for reviewing your work. \ud83d\udc4b Welcome to Corporate Security, we\u2019re glad you\u2019re here! You may also know us as the former IT Operations team that moved from the Finance to Security division in early 2024. Please try exploring the following pages to see if your question has been answered in the handbook pages. If not, please ask in the #it_help channel and one of our Support Analysts will reply as soon as possible. These projects aren\u2019t considered a function of OKRs (e.g., ambitious) but are considered critical because they Critical Projects must use the label sec-okr::p0. GitLab receives vulnerability reports by various pathways, including: For any reported vulnerability: To ensure the proper operation and security of GitLab.com, GitLab logs critical information system activity. The audit logging policy applies to all systems within our production environment. The production environment includes all endpoints and cloud assets used in hosting GitLab.com and its subdomains. This may include third-party systems that support the business of GitLab.com. Inline with GitLab\u2019s Continuous Monitoring Controls\nSystem Owners are responsible for determining what constitutes \u201ccritical information system activity\u201d in their respective system based on their experience and professional judgement The Data Classification Standard defines data type and categories and provides the associated Data Classification of each for the purposes of determining the level of protection to be applied to GitLab and Customer data throughout its lifecycle. The Data Classification Standard applies to all GitLab team members, contractors, consultants, vendors and other service providers that handle, manage, store or transmit GitLab data. GitLab team members, contractors, consultants, vendors and all other service providers acting on behalf of GitLab are required to review and understand this data classification standard, and how to handle data according to the classification levels below unless otherwise noted. Passwords are one of the primary mechanisms that protect GitLab information systems and other resources from unauthorized use. GitLab\u2019s password standard is based, in part, on the recommendations by NIST 800-63B.\nThe password standard sets the requirements for constructing secure passwords and ensuring proper password management. GitLab utilizes 1Password for password management. 1Password is a password manager that can be used in two different ways - as a standalone application (by purchasing a standalone license) or as a hosted service (by subscribing). GitLab uses 1Password for Business which is a hosted service. This document outlines information security password standards intended to protect GitLab information systems and other resources containing confidential (Red and Orange) GitLab data from unauthorized use, where technically feasible. Applies to all GitLab team members, contractors, advisors, and contracted parties interacting with GitLab computing resources and accessing confidential data. Constructing secure passwords and ensuring proper password management is essential. GitLab\u2019s password standards are based, in part, on the recommendations by NIST 800-63B. To learn what makes a password truly secure, read this article or watch this conference presentation on password strength. The purpose of this security logging standard is to define GitLab\u2019s requirements for security logging. This document covers both security logging in GitLab\u2019s SIEM (Devo) as well as security logging requirements for systems not sending logs to GitLab\u2019s SIEM. Security logs are generated by applications and systems used on GitLab and are primarily used for security monitoring, security incident response and cyber threat hunting. This page contains information on secure training initiatives sponsored by the GitLab Security team. For information on developing security fixes in GitLab, please see the\nPatch Release runbook for preparing security fixes. (Required) The GitLab Secure Coding Guidelines (Required) cover how to address specific\nclasses of vulnerabilities that have been identified in GitLab. GitLab uses Secure Code Warrior to provide ongoing secure coding training. Eligible team members can log in via Okta. If you ended up on this handbook page it\u2019s probably because you have been\npointed here during a git commit by our gitleaks installation\non your local machine. The tool gitleaks is being used\non GitLab endpoints to prevent a common security issue, namely accidental commits of secrets like Personal Access Token or other credentials\nto public repositories. It is important that all repositories are covered as a leaked access token in one repository can impact all repositories and projects to which your account has access. Some Google Cloud resources, if deployed with default settings, may introduce risk to shared environments. For example, you may be deploying a temporary development instance that will never contain any sensitive data. But if that instance is not properly secured, it could potentially be compromised and used as a gateway to other, more sensitive resources inside the same project. Below are some steps you can take to reduce these risks. Since the launch of the company wide Individual Growth Plan in Workday per FY24-Q2 we recommend Security team members to leverage that tool in Workday to collaborate with their manager on their career path and growth opportunities. Team members can read all about that progress in this guide. We have deprecated the The Individual Development Plan (IDP) template The Individual Development Plan (IDP) template was used by Security team members till FY24-Q1 to help collaborate on a team member\u2019s career path and growth opportunities. The template was designed to document a team member\u2019s personal choices and the direction they want to take their career while allowing their manager to provide guidance and assist with career growth. The use of this template is entirely voluntary and optional. In fact, the template format and process used are also both flexible and adaptable to each manager and team member. Feel free to adapt the template in manners that meet the needs of the manager and team member. GitLab has adopted the ISO/IEC 27001:2022, ISO/IEC 27017:2015 and ISO/IEC 27018:2019 standards for our information security management system (ISMS) to provide GitLab team members, customers and community members with a high level of assurance on the robustness of our information security policies, standards and procedures, and the strength of our control environment. The purpose of this document is to define the boundaries and objectives of GitLab\u2019s ISMS. There are various reasons why you might want to isolate your work notebook from other devices in your home network: Many home routers allow connected devices to be isolated, which prevents any direct network communication between selected devices. This section walks you through setting up an isolated WiFi specifically for your work notebook. The goals specifically are: A penetration test is a process to identify security vulnerabilities in an application or infrastructure in order to evaluate the security of the system. This policy is intended to outline the penetration testing controls implemented by GitLab. These controls apply to the applications and systems that fall within the scope of each specific penetration test. A third-party penetration test is conducted at least annually. (CA-8, SC-7(10)) On a Mac, download and install the GPG Keychain application. Download the keypair file from the Support vault. It\u2019s attached to the \u2018security@gitlab.com PGP Keypair\u2019 item. Open the GPG Keychain application and import the keypair file. It will ask for a password. Use the password saved on the vault item. Now you will be able to encrypt, decrypt, and share the public key with others. This document defines asset management measures and requirements to support the protection of information assets in GitLab\u2019s all remote environment. The measures and requirements noted within the standard are designed to create a secure infrastructure, work environment, and protect sensitive information from physical threats. This standard applies to all GitLab team-members, contractors, advisors, and contracted parties interacting with GitLab computing resources and accessing company or customer data. Aligned with GitLab\u2019s overarching information security strategy and its three-year plan, the Product Security Department (PSD) within the Security Division is responsible for crafting and directing a comprehensive vision to bolster the cybersecurity posture of the GitLab platform. At GitLab, product security encompasses a broad range of cybersecurity disciplines that enable product and engineering teams to design, develop, deploy, maintain, and refine GitLab\u2019s technologies securely. This goes beyond the conventional confines of security, covering everything from protecting developer workstations to ensuring the integrity of our production environments. The GitLab records retention and disposal standard lists the specific retention and secure disposal requirements for critical GitLab records. These minimum requirements inform design and maintenance decisions for all GitLab tier 1 and tier 2 critical systems. The below retention and secure disposal requirements apply to all GitLab records enumerated in the table below stored in GitLab tier 1 and tier 2 critical systems. Exceptions to these requirements will be tracked as per the Information Security Policy Exception Management Process. Ransomware is a persistent threat to many organizations, including GitLab.  In the event of a ransomware attack involving GitLab assets, it\u2019s important to know the existing response procedures in place.  Given the variability of targets in such attacks, it\u2019s critical to adapt to existing circumstances and understand that disaster recovery processes are in place to avoid paying any ransom.  GitLab\u2019s red team has done extensive research to determine the most likely targets to be affected.  As a result, the following guidelines are intended to help bootstrap an efficient response to protect the organization. Root Cause Analysis (RCA) is a process to ultimately identify the root problem of an issue so that we may prevent it from occurring again. You can learn more about RCAs here. To do this a DRI and all relevant other stakeholders from Security and the affected teams (as determined by the DRI) systematically work through a set of questions and discussion topics, as defined in our RCA Template. This policy is intended to establish requirements for the creation and management of security and technology related policies. This policy applies to security and technology policies that fall within the scope of GitLab\u2019s security compliance audits and assessments. All in-scope policies must be created as version controlled documents in GitLab. Exceptions to Security and Technology Policies must be tracked and approved by the policy approver(s) via an auditable format. An exception process should be defined in each policy. Information security considerations such as regulatory, compliance, confidentiality, integrity and availability requirements are most easily met when companies employ centrally supported or recommended industry standards. Whereas GitLab operates under the principle of least privilege, we understand that centrally supported or recommended industry technologies are not always feasible for a specific job function or company need. Deviations from the aforementioned standard or recommended technologies is discouraged. However, it may be considered provided that there is a reasonable, justifiable business and/or research case for a security and technology policy exception; resources are sufficient to properly implement and maintain the alternative technology; the process outlined in this and other related documents is followed and other policies and standards are upheld. As a member of the Security department, the Security Assurance sub-department provides GitLab customers with a high level of assurance around the security of GitLab SaaS service offerings. There are five teams in the Security Assurance sub-department. The Security Assurance sub department utilizes a variety of tools to carry out day to day activities. The system admin is responsible for the following: The security department as a part of GitLab should follow and live up to the GitLab values and mission.\nThe transparency value can be especially difficult for a security department to embrace and embody, as due to the confidentiality of their work, security people tend to be secretive and intransparent by default. The intent of the security culture committee is to maintain a welcoming and transparent environment within the security department. This page is created as a result of the FY21Q4 Culture Amp survey, where Security team members expressed a desire to improve on the currently available L&D opportunities at GitLab. In order to paint a holistic picture of L&D resources available to team members, some of the resources detailed on this page are not Security-specific and are already documented in the handbook. GitLab provides a multitude of opportunities to learn and develop new skills on the topics of leadership, management, and DIB. GitLab Learn is the platform of choice that allows self-paced, on-demand courses. It also contains trainings offered through LinkedIn Learning. If you\u2019re looking for a more flexible approach to learning the aforementioned skills, then perhaps the learning initiatives provided by the L&D team are something for you to consider. This page is deprecated and has been moved to the internal handbook. See https://gitlab.com/gitlab-com/gl-security/security-department-meta/-/issues/1685\n(internal issue). The Security Division plays a critical role in ensuring the security of GitLab as a company, and of GitLab as a platform. In the pursuit of its charter, the division is committed to using (\u201cdogfooding\u201d) GitLab as much as possible in order to help improve the platform for all customers. This dogfooding program aims to improve the effectiveness and efficiency of collaboration between Product Management and Security as it pertains to capabilities of the GitLab platform. This page outlines the Security Division ecosystem, by describing the different processes of our departments.\nThese processes, represented with diagrams, highlight the data flows between our teams but also with external actors like the Product or the Engineering divisions. This page describe how to maintain the Security Division ecosystem. Every process where Security is involved should be documented in this page. Each Security Department is represented and responsible for their own diagrams. The Security organization executes quarterly Objectives and Key Results or OKRs. Four Mondays before the start of the fiscal quarter, in the days after the CEO shares OKRs with all of GitLab in the #okr channel, the CISO proposes OKRs for the Security Division in the OKR draft review meeting agenda for a maximum of 5 objectives. Security leaders are to propose draft OKRs to the CISO prior to the meeting for inclusion.\nFrom FY24 Q1 forward all Security OKRs are documented in the GitLab OKR project. For easy filtering, all Security Objective and KR issues have the division::Security label applied. The Security Planning page catalogs the planning work prior to\nimplementation offSecurity Department initiatives and projects that span\nmultiple security teams and projects, or across the entire GitLab\norganization. This includes things from high level architecture designs for\ntools used by the Security to developing new or maturing organizational\nprocesses. A Security Plan is done when the text is sufficient to create Epics,\nMilestones, and Issues with a enough detail to begin work. Requiring further\nwork in the form of proof-of-concepts or spikes may also be an outcome of a\n\u201ccomplete\u201d Plan. From converging on real-time critical events with SIRT, exploiting vulnerabilities with the Red Team or participating in live Customer Assurance calls with the Risk and Field Security team, you will have the opportunity to work next to security staff to gain valuable insight and working knowledge of security fundamentals across multiple domains. Each program includes hands-on activities to provide an authentic security team experience. The Security Shadow program is designed to provide numerous benefits including Completion of each course you will receive a certificate. At the completion of all 3 courses your name will be recognized on this page. Please keep in mind that there are some restrictions on what can and cannot be shared as part of the shadow program, particularly related to high severity vulnerabilities or incidents. For example if a shadow is watching an AppSec team member triage HackerOne issues and a High or Critical vulnerability is reported, the shadow call should end. Completion of each course you will receive a certificate.  At the completion of all 3 courses your name will be recognized on this page. Security Compliance: Where \u201cJust do whatever you want\u201d comes to die.\nHave you ever wondered where all those pesky security requests and requirements come from and why in the world you\u2019re always being asked to provide evidence and talk through how systems are designed and configured? Well then good news! Come join the security compliance team for a shadow rotation where we\u2019ll have you: The Security Threat Management sub-department is responsible for identifying and remediating vulnerabilities or threats that may impact GitLab, our Team Members or our Customers and the community at large. The Security Threat Management sub-department\u2019s mission is to support the business and our overall security efforts by ensuring that we are focused on real world threats and vulnerabilities that impact us. We accomplish this by: Secure software development is critical to developing and maintaining a safe and trusted application. This policy outlines the general components of GitLab\u2019s software development lifecycle. This policy applies to anyone developing, reviewing, and merging code at GitLab in support of GitLab\u2019s production applications. In-scope development activities are performed in accordance with GitLab\u2019s product development flow. (SA-3) Secure software development is critical to developing and maintaining a safe and trusted application. This standard outlines the general components of GitLab\u2019s software development lifecycle. This standard applies to anyone developing code at GitLab in support of GitLab\u2019s production applications. For in depth view of development process, see product development flow. This stage occurs across different mediums depending upon each team\u2019s individual processes. In alignment with our company value of Transparency, one focus of the security organization is to lead the most transparent security organization in business today. Transparency by default requires us to challenge the status quo where security teams traditionally operate in a very private and closed-off manner. However, being open by default requires us to be even more diligent in our efforts of categorizing data in order to ensure the protection of our customers, company, and team member data. Therefore, our position is that all information and activities produced by the security team should be considered \u201cPublic by Default\u201d unless defined below: GitLab\u2019s Women in Security group is established to provide support, skills and leadership development, and networking and mentorship opportunities for the women in GitLab\u2019s security department. The group also seeks to inspire women and girls interested in entering or learning about the security industry. While tailored for current female team members of the GitLab Security organization, we encourage and welcome the participation of all GitLab members who are dedicated to the support of women in the security industry. The company-wide mandate is justification for mapping Security headcount to around 5% of total company headcount. Tying Security Department growth headcount to 5% of total company headcount ensures adequate staffing support for the following (below are highlights and not the entire list of responsibilities of the Security Department): Career opportunities at GitLab, personal growth, and development are important and encouraged. Security team members and managers are encouraged to use Individual Development Plans to help foster, guide, and assist with career growth."
    },
    {
        "title": "Open Source at GitLab",
        "url": "https://handbook.gitlab.com/handbook/engineering/open-source/",
        "content": "As a company, GitLab is dedicated to open source. Not only do we believe in it, but we use it, and we give back to it. Not just through GitLab, but through contributions to other open source projects. The purpose of this page is to document how a GitLab employee can: As an open source project, we want to stay healthy and be open for growth, but also ready to accommodate a 10x factor of\nour community. In order to achieve that, we\u2019ve outlined a strategy that is a collaboration between multiple departments. See Creating a new project for the instructions. If you\u2019re contributing to an open source project on behalf of GitLab, you may be required to enter into a CLA. If your GitHub account\u2019s primary email is not your @gitlab.com email, you can add it as an additional address. No need to create a separate account. In the future, we might have a single organization for forks. That will allow us to track various metrics about contributions made by GitLab employees. The guidance for using open source software, including details of which licenses are pre-approved for use, is now available in the Legal & Corporate Affairs handbook. Avoid using forked code and try to contribute your change upstream. It\u2019s typical for forks to fall far behind the upstream repository and such dependencies become a source of pain: There may be good reasons to create a fork: If you decide to create a fork, make sure you open an issue that: Visit the Legal & Corporate Affairs Product handbook for further information on this. We will be executing in 5 key areas in support of the company\u2019s broader dual-flywheels strategy to attain more contributions. The 5 key areas together are the building blocks of our contributor & contribution 10x acceleration strategy. Provide an outstanding, highly efficient and fast contributor experience, from onboarding to getting a change merged. One of the tactics is to reduce contribution stumbling blocks to make the contributor journey more efficient. These stumbling blocks will be identified through gathering feedback from wider community contributors, product teams and GitLab Team Members on contribution friction."
    },
    {
        "title": "Product Security",
        "url": "https://handbook.gitlab.com/handbook/security/product-security/",
        "content": "Aligned with GitLab\u2019s overarching information security strategy and its three-year plan, the Product Security Department (PSD) within the Security Division is responsible for crafting and directing a comprehensive vision to bolster the cybersecurity posture of the GitLab platform. At GitLab, product security encompasses a broad range of cybersecurity disciplines that enable product and engineering teams to design, develop, deploy, maintain, and refine GitLab\u2019s technologies securely. This goes beyond the conventional confines of security, covering everything from protecting developer workstations to ensuring the integrity of our production environments. Our mission is to set the standard for product security by fostering a culture of rapid innovation and secure product delivery. We are committed to leveraging the GitLab platform, embodying the pinnacle of internal usage (\u2018dogfooding\u2019) practices. By maintaining close collaboration with product teams and contributing significant security features and capabilities to the GitLab codebase, we aim to enhance our operations and be a vital driver of the broader GitLab vision. Our comprehensive, multi-year product security mission can be found in our internal handbook. Success in product security is not confined to PSD or even the Security Division. It requires a concerted effort across the entire GitLab ecosystem. Collaboration is crucial, involving not just our security counterparts but the broader organization. Key disciplines and capabilities, from Security Operations to Site Reliability Engineering, while not directly under PSD\u2019s purview, are vital to our strategy\u2019s success. The Product Security sub-department includes the following teams. Learn more about each by visiting their Handbook pages. Security Architects are the\ntrusted security advisors of GitLab Engineering. Security Architecture is a natural extension of the\ngreater Architecture initiative at GitLab. It is the\npreliminary and necessary work to build software with security considerations. Security Architecture protects the organization from cyber harm, and support present and future\nbusiness needs by: The process is designed with these constraints in mind: The Security Research team contributes to the Security Vision and Mission through projects that focus on identifying, quantifying, and developing solutions for complex security risks facing GitLab and its users. This work aims to improve the security posture of the product and the company, but always with an eye for contributing new functionality as a differentiator. Additionally, we aim to share our results widely in order to educate and bring awareness to the GitLab Security program. Vulnerability Management is the continual process of identifying, prioritizing, mitigating and remediating vulnerabilities. At GitLab we identify vulnerabilities in a number of different ways depending on the component being analyzed. This process and associated tooling is owned by the Vulnerability Management team. +This page primarily outlines our vulnerability management policies and procedures at GitLab. The policies and procedures used to manage vulnerabilities at GitLab are collectively referred to as the Vulnerability Management Standard."
    },
    {
        "title": "Security Operations",
        "url": "https://handbook.gitlab.com/handbook/security/security-operations/",
        "content": "Protect company property by identifying, preventing, detecting and responding to risks and security events targeting the business and GitLab.com and its users. We are at the forefront of GitLab\u2019s security. The Security Operations department focuses on the operational aspect of security. Our department consists of experienced breakers, builders, and defenders from all walks of life and geographic locations. We are responsible for improving GitLab\u2019s security capabilities and metrics in the areas of security anomaly/event detection and incident response and abuse of GitLab.com. Our department consists of: GitLab\u2019s internal Red Team conducts security exercises that emulate real-world threats. We do this to help assess and improve the effectiveness of the people, processes, and technologies used to keep our organization secure. The Red Team does not perform penetration tests, and the work we do is not focused on delivering a list of vulnerabilities in a specific application or service. Malicious actors are not constrained by the narrow focus of traditional security testing. We must take on this adversarial mindset in order to challenge our own assumptions and identify areas for improvement across our entire organization. We do this by emulating the real-world tactics, techniques, and procedures (TTPs) of threats that are most relevant to our environment. Teams can engage Signals Engineering by heading over to the #signals-engineering slack channel. SIRT can also engage Signals Engineering for detection and alert tuning needs by selecting the \u201creport a bug\u201d feature in GUARD. Improve the effectiveness and overall coverage of GitLab\u2019s detection engineering program internally and for customers, identifying opportunities to reduce the mean time to detection creation for incidents, and partnering with the product team to drive security observability improvements in the GitLab product, corporate, cloud and identity infrastructure. Please follow our RFI process to contact the team. For a less formal discussion, you can find us in Slack in the #sd_security_threat_intel channel. Empower GitLab to make informed, intelligence-driven decisions that keep our company and customers secure, while setting a new standard for transparency and collaboration across the industry. Our mission is to provide actionable intelligence that empowers GitLab to make informed, proactive decisions about security."
    },
    {
        "title": "Security Threat Management",
        "url": "https://handbook.gitlab.com/handbook/security/threat-management/",
        "content": "The Security Threat Management sub-department is responsible for identifying and remediating vulnerabilities or threats that may impact GitLab, our Team Members or our Customers and the community at large. The Security Threat Management sub-department\u2019s mission is to support the business and our overall security efforts by ensuring that we are focused on real world threats and vulnerabilities that impact us. We accomplish this by: The Security Threat Management sub-department includes the following teams. Learn more about each by visiting their Handbook pages."
    },
    {
        "title": "Security Assurance",
        "url": "https://handbook.gitlab.com/handbook/security/security-assurance/",
        "content": "As a member of the Security department, the Security Assurance sub-department provides GitLab customers with a high level of assurance around the security of GitLab SaaS service offerings. There are five teams in the Security Assurance sub-department. The Security Assurance sub department utilizes a variety of tools to carry out day to day activities. The system admin is responsible for the following: All other actions are the responsibility of the assigned DRI. Check out these great security resources built with our customers in mind: The goal of this handbook page is to document the goals and priorities for the automation in compliance within the Security Compliance team at GitLab. Automations are built and enabled through the support of GitLab\u2019s Security Assurance Automation team for technical implementations. TBD Governance and Field Security team charter The Field Security team serves as the public representation of GitLab\u2019s internal Security function. Our vision is to be the leading example in collaborative and transparent Customer Assurance Programs. Our mission is to empower the GitLab community with confidence and trust that their data is protected with high levels of security assurance to drive revenue growth. We partner with our fellow GitLab team members and customers to provide a pathway to yes!"
    },
    {
        "title": "Marketing",
        "url": "https://handbook.gitlab.com/handbook/marketing/",
        "content": " Welcome to the GitLab Marketing Handbook The GitLab Marketing team operates as one team and is organized by the following departments: Integrated Marketing, Brand and Product Marketing, Marketing Operations and Analytics, Sales Development, Enterprise Data, Corporate Communications, and Developer Relations. This page documents our shared team philosophy and processes, while the individual department handbooks contain more detailed information. GitLab is the leading DevSecOps Platform that empowers organizations to deliver quality software faster and more efficiently while strengthening security and compliance. The marketing team\u2019s purpose is to amplify the value of the GitLab platform, authentically and transparently, by putting customers and the community at the center of everything we do. As the GitLab Marketing team puts customers at the center of everything we do, the marketing strategy aligns with the customer journey. The journey\u2019s purpose is to provide a clear and cohesive experience to a prospect/customer from the minute they become Aware of GitLab, to Considering the platform and Converting into a happy customer, and then of course Expanding over time and becoming an Evangelist.  Each stage has a purpose which is the guiding indicator for the marketing team to measure our success. Everything the team plans and executes in the short and long term will revolve around the customer journey, and we will also measure our success along each step to hold ourselves accountable.  Our FY25 Marketing Strategy and Plan can be found in the internal handbook. Each quarter, the Marketing team creates OKRs (Objectives and Key Results) that cascade from the CEO\u2019s OKRs. Each department within the Marketing team manages their own cascading OKRs. Team members can access the filtered OKR search. Value-driven Marketing Team How we work as one team aligns with the GitLab Values. Results - The team measures success together along the customer journey. Each quarter, we align CMO OKRs based on company goals set in the company OKRs. This helps us stay aligned with company-level goals while also understanding if what we are doing quarter over quarter is moving the needle on our marquee metrics along the customer journey. Being data-driven as a team is essential for team success. Iteration - Like the rest of the company, we aspire to be agile and experimental where possible.  In every area possible, we roll out campaigns, brand updates, messaging, etc. in small iterations, measure the success, and take next steps accordingly. Transparency - We strive to be as transparent as possible in all areas of marketing. We welcome thoughts and feedback from each other, other GitLab team members, and the community at all times. Collaboration - A major key to success is operating as one team. Leveraging the different backgrounds, cultures and, skill sets of an entire company and community, the marketing team operates in a way where everyone can contribute. Collaboration is key to taking Marketing to the next level. Diversity, Inclusion and Belonging (DIB) - With GitLab team members being located across the world, we strive to always keep DIB at the core of everything we do. Like the rest of GitLab, we follow asynchronous meeting principles, welcome diverse perspectives, and as marketers, foster an environment where quirkiness is welcomed. Efficiency - We keep efficiency at the forefront of everything we do. Whether it is bringing in marketing technology to automate menial tasks and foster collaboration, finding ways to save cost, or simply doing the right things to be respectful of others\u2019 time, efficiency drives faster results for marketing.  Monthly Marketing All Hands (All Marketing team members) Goal: Align all Marketing team members on activities in progress to achieve our goals, and update the team on cross-functional items. The meeting is 50 minutes and runs as follows: All team members are encouraged to bring forward discussion topics that they want to share with the team or to have covered during the call. Quarterly CMO Q&A (one session for each department) Goal: Provide the team a smaller forum to ask any questions they may have, offer feedback, and brainstorm ideas directly with the CMO Weekly CMO Leadership Direct Reports Team Meetings (Each manager with their direct team) Goal: Foster an environment to empower managers overseeing different functions to collaborate and share ideas and feedback. Weekly Direct Reports Meetings (Each manager with their direct reports) Goal: For managers to work with direct reports on removing roadblocks, brainstorming, coaching, and providing/receiving feedback.  A complete list of marketing slack channels can be found here. Please follow the CMO handbook for review request workflows, and communication guidelines. All teams are responsible for requesting social posts themselves. If you are not the DRI on a specific category or campaign and want to request a social post, please reach out to the teams\u2019 point person identified below as a first step. Team Members in these roles reserve the right to say no to your request. If they say yes, coordinate with them to create a new social request issue so that the social team can process the request and schedule the post(s). The point person on the team or a member of the marketing or social teams may adjust copy to ensure consistency in brand voice. Speaking on behalf of GitLab at a conference, to media or on a podcast as a GitLab team member is a significant responsibility. Please see the Corporate Communications Handbook Page for guidelines and trainings. Guidelines for how to pitch and submit a blog, including templates and formatting, can be found in the Blog Handbook. Marketing Newsletter Marketing and the Editorial team send out a monthly developer newsletter, called \u201cDevSecOps Download\u201d, to our newsletter subscribers. The newsletter always includes information about the latest release post, links to our latest blogs, plus additional content for DevSecOps teams. The goal for this newsletter is thought leadership and awareness. To add a content suggestion, please create an issue with \u201cDevSecOps Download Content: [subject]\u201d in the title (no template necessary) and tag @sgittlen (Sandra Gittlen, Blog Managing Editor). Anyone in the company can add suggestions, but the Blog Managing Editor will determine the final content. Other Newsletter To request a newsletter to be sent to an audience outside the newsletter subscribers, please create an issue in the Campaigns project, using the request_email_newsletter issue template. Newsletter requests should be submitted no less than 5 business days before the intended send date to ensure there is enough time for Content and Marketing Programs Manager\u2019s (MPM) review and set up workflow. Community Newsletter The community newsletter is managed by the Developer Relations team, dedicated to sharing relevant developer content, highlighting contribution opportunities, and updating community members on upcoming events. We aim to keep our contributors involved and connected with the wider community. This newsletter will not be used to drive or generate leads. To submit to the newsletter, please follow the handbook instructions. We are happy to sponsor events and meet-ups where a marketing benefit exists, subject to approval by Field Marketing Managers. These sponsorships may be in cash or in kind, depending on individual circumstances. Organizational or project sponsorships may also be considered where a marketing benefit exists. Typically, these sponsorships will be in kind - e.g., developer time commitments, or subsidized / free GitLab licenses. Cash sponsorship of projects or organizations may be considered only in exceptional cases - for example, if a project or organization that GitLab depends on is struggling to survive financially.  We use Slack internally as a communication tool. The Marketing channels are as follows: Automated channels with feeds from different sources:   Get to know the people who work in GitLab\u2019s marketing team by visiting our READMEs. Marketing Functional Conversations are modeled after Group conversations. While Group Conversations offer high-level insights, Marketing Functional Conversations are meant to drill deeper into the various functions within the Marketing Department. The goal of Marketing Functional Conversations is to create increased awareness and mutual understanding of the functions within Marketing. Awareness and understanding is an essential building block for effective collaboration. Recordings of the Marketing Functional Conversations can be found on the GitLab Unfilitered YouTube Channel Product and Brand Marketing represents the GitLab story at the brand, solution, product, and technical levels. We accelerate GitLab\u2019s path to market by developing market insights, leadership positioning, messaging, and narratives that elevate our brand, show value in our solution, and fuel demand for our platform. We activate brand ambassadors and customer advocates to show momentum and trust in the market. The team includes Solutions & Product Marketing, Brand Marketing, Design, and Content. Handbook Handbook Links The Integrated Marketing team is focused on creating awareness, generating demand and collaborating with the broader ecosystem globally, through a co-ordinated and unified approach.  We connect the dots and bring content and messaging to life by leveraging various channels as our levers to communicate across segments, regions and personas. The team includes Field Marketing, Global Channel Marketing, Corporate Events, Account Based Marketing, Integrated Campaigns, Lifecycle Marketing, Digital Strategy and Digital Experience. Handbook Handbook Links The Sales Development organization is focused on serving the needs of prospective customers during the beginning of their buying process. The Sales Development department is composed of 2 groups: the SDR team who handles all the inbound interest and the BDR team who specializes in outreach of prospective customers. When prospective customers have questions about GitLab, the SDRs assist them or connect them to a technical team member as needed. During the initial exploration, if the prospective customer is interested in continuing their exploration of GitLab, SDRs will connect them to an Account Executive (AE) or Strategic Account Executive (SAE). BDRs contact people who work at large organizations to uncover or create early-stage sales opportunities for GitLab SAEs. The BDR team will plan with their paired Sales counterpart to approach interesting accounts and develop a plan for prospecting including contact discovery, understanding enterprise-wide initiatives that GitLab could assist with, and ensuring accurate data quality of accounts and contact in salesforce.com. Handbook Marketing Operations and Analytics includes Marketing Operations, Marketing Analytics, and Globalization and Localization. The team focuses on enabling efficient operations and actionable analytics insights, working across all Marketing teams. The team also owns the MarTech stack used by Marketing. Handbook Handbook Links The GitLab Enterprise Data Team is responsible for empowering every GitLab team member to contribute to the data program and generate business value from our data assets. Handbook Developer Relations drives platform awareness and adoption by reaching deep into wider communities and engaging developers where they are. GitLab currently engages with more than 3000 developers every month on GitLab.com alone, and receives more than 250 contributions every month, giving us a unique level of influence in the DevSecOps space and helping accelerate our innovation. Our ultimate goal is to raise awareness of GitLab and drive customer success by winning the hearts & minds of developers through best-in-class technical enablement and an active community of contributors. Handbook Handbook Links The mission of GitLab\u2019s Corporate Communications team is to amplify GitLab\u2019s product, people and partnerships in the media, via social media channels and through award wins. This team is responsible for global public relations (PR), social media, and executive communications (speaking). Handbook Handbook Links  FY25 All-Marketing SSoT Calendar  The marketing team utilizes a single all-marketing calendar where everyone can contribute, and we can answer key questions (using pre-set filter views) related to upcoming marketing plans. Note: this calendar links to our internal handbook page. Please do not filter the entire doc. Instead, you may use pre-set filter views (click down arrow selector next to the filter icon on the bookmark bar) to see activities grouped by GTM Motion, segment, region, team, language, and more. If there are other views you would find helpful, please feel free to duplicate an existing filter view, and include some sort of categorization (i.e. team, segment, etc.). You can do this by going to a similar filter view, and clicking on the top right gear icon, then selecting Duplicate. For more information about adding events to All-Marketing SSoT Calendar, please click here. This front page of the Marketing Handbook is intended to serve as the external face of the marketing team. We\u2019ve created a dedicated Team Processes page that is intended to house our internal processes, workflows, and guidances relevant internally to the marketing team. Visit the Page A DevOps solution is: These are discrete problems that we believe GitLab solves and are reasons customers choose GitLab (hence which we should seek out in prospects). More information on how GitLab uses solutions can be found on the Solutions Go-to-market page This page outlines details for in-person events. For virtual event information, please visit the Virtual Events Page. There are 3 groups within marketing who handle external events. Each group has a specific purpose. Please review each page for specific details. To determine who would handle the event, please refer to our events decision tree. If it is not clear who should own an event based on the decision tree, please email events@gitlab.com. GitLab helps organizations deliver better products faster, increase operational efficiencies, and reduce security and compliance risks.  A single application that provides capabilities across DevSecOps lifecycle, GitLab reduces friction through collaboration at the point of code change. GitLab streamlines application delivery with an out of the box delivery toolchain which reduces complexity, lowers maintenance cost, and streamlines delivery. Without GitLab teams need multiple tools which they then must integrate, manage, and maintain. With GitLab, you gain visibility on how long each part of the software development lifecycle is taking and how you can improve it. The GitLab Growth section is dedicated to making it easier for teams to find value and increased efficiency within the GitLab platform. We work across stages within the product experience to make the product as easy as possible to adopt and use. The Growth section lives within Marketing & Strategy to ensure we\u2019re aligned in our go-to-market strategy and we\u2019re as efficient as possible in finding the right prospects, convincing them to become product users, and assisting in converting them into paying customers. Since the work within the section occurs within the product experience our engineering and user experience counterparts are within the Development division. This approach ensures that we have proper alignment on our priorities from a go-to-market and business perspective while ensuring our development team is set up for success to operate within the development division. As a company we have to be great at providing multiple journeys.\nThe contributor, user, and buyer journey involve different people going through them, different metrics, different hand-offs, and different teams providing them.\nMost companies never master a journey, a few companies master one: Ubuntu mastered the contributor journey, Atlassian the user journey, and Oracle the buyer journey.\nOur ambition is to master all three. The hard thing is that during a journey you have multiple hand-offs between departments and teams.\nThese hand-off points need to be well defined and work for both teams.\nIt is essential to measure all steps of the journey to see where an improvement would have the greatest effect. In Q4, we will be working through deprecating many (but not all) of the marketing KPIs below in order to move to new KPIs that we believe better map to what teams can actually impact. Here are the new KPIs, and the next step is to work with the data team to update this page.  Marketing uses GitLab for agile project management including groups, projects, epics, roadmaps, issues, labels, and boards. Read through the documentation on each of these GitLab features if you are unfamiliar. Marketing Departments collaborate to produce Integrated Campaigns. An Integrated Campaign is a communication effort that includes several campaign tactics such as blog posts, emails, events, advertisements, content on about.gitlab.com, videos, case studies, whitepapers, surveys, social outreach, and webcasts. An Integrated Campaign will have a campaign theme that summarizes the message we are communicating to our market. SMB Marketing addresses the SMB Segment in support of SMB Sales, Sales Development (SDR) in Marketing, Growth in Product, and other teams. Our DRI is Brian Glanz. Team members are DRIs for their own tasks and report into their home teams, per GitLab\u2019s DRI culture and functional reporting lines."
    },
    {
        "title": "Team Member Social Media Policy",
        "url": "https://handbook.gitlab.com/handbook/marketing/team-member-social-media-policy/",
        "content": "We recognize that many team members engage in social media activity. This policy establishes a set of rules and guidelines for any activity and participation on social media channels when commenting about GitLab or GitLab-related topics. These rules are intended to be adaptable to the changes in technology and norms of online communication and behavior and may be amended by GitLab at any time, for any reason, without notice to team members. However, we will work to be as transparent as possible when communicating changes, what those changes are, and when they are expected to go into effect. This policy also applies to social media activity when on or off duty, while using the Company\u2019s or personal electronic resources, and whether the team member posts anonymously or using a pseudonym. Be diligent, and if it\u2019s questionable, don\u2019t say it. You are personally responsible for the social posts, likes and shares, and replies you post on social media while representing GitLab. Everything you publish is publicly viewable and will be available for a long time, even if redacted. Remember that you represent GitLab and our culture. When commenting on posts, please keep in mind: \u201cDon\u2019t argue but represent\u201d. You\u2019ll be asked to confirm reading this section during your onboarding to the company. We\u2019ll ask everyone to review and sign off on review in partnership with legal for existing employees. If you\u2019ve been identified as a spokesperson for the company or a specific function within GitLab, you may have unique circumstances. Please refer to your team guidelines or the communications team for more information about your work as a spokesperson and the social media policy. The GitLab Social Media policy for team members applies to traditional social media channels, like Twitter, LinkedIn, Facebook, and Instagram, as well as \u201csocial-like\u201d sites, like YouTube, HackerNews, Reddit, blogs (on the GitLab website, Medium, or any other online journals or diaries), message boards, forums (including the GitLab Forum, private groups or forums on public sites like Facebook Groups), and private/direct messages on public social media channels (Twitter DMs, Instagram Directs, etc.). The term \u201csocial media\u201d applies to any online technology in use now or in the future that enables you to send or receive information and communicate or interact with others. Any site where you can share a post or comment on a post would be considered a social media website for the purposes of this policy. This policy is not intended to limit team members from sharing their feedback or reviews of their experiences at GitLab on sites like Glassdoor, Fishbowl, Indeed, or similar sites. While we encourage you to share feedback with your manager and the people ops team, we celebrate our value of transparency and welcome feedback from team members on these sites, as long as the feedback follows our SAFE Framework. Please adhere to the Community Code of Conduct, Anti-Harrassment Policy, which includes sexual harrassment and discrimination policies, and our Code of Business Conduct and Ethics. These policies all apply to team member behavior within social media and in public online spaces. Please refer all inquires to the Communications Team in the #external-comms Slack channel Click each recommendation below for more details Learn more about what is encouraged and how GitLab helps to enable you to become great at using social media on our team member advocacy page. Whether you\u2019re an intern or our CEO, protecting the GitLab brand, the company, and our entire team is a part of your job description. Click each recommendation below for more details Team Members are prohibited from using social media to post or display comments about co-workers or supervisors/managers of GitLab that are knowingly false, vulgar, obscene, threatening, intimidating, disparages GitLab\u2019s products or services, depicts the team member engaging in conduct that is unlawful or in violation of GitLab\u2019s workplace policies against workplace violence or discrimination and harassment based on any protected status under federal, state or local law. Allow the team member(s) to own the decision on what is and isn\u2019t public about them. For customers, any customer with a published case study is available to share publicly. If you would like to share information about a customer please reach out to the customer reference team first before sharing any content on social media. In case you want to connect with fellow team members of GitLab on social media, you have to keep it professional. With this communication, we would like you to consider GitLab\u2019s Communication Guidelines at all times. Aligned with our Anti-Harassment Policy, it is expected that everyone will contribute to an inclusive and collaborative working environment and respect each other at all times. Keep your identity clear on social media channels by not using the GitLab logo as your profile image, not adding GitLab to your @handle, and not adding the company name to your display names. Upon first glance of your social media profile, there should be immense clarity that you are a team member of GitLab and not GitLab the company. Use common sense when selecting pictures and names to use. We\u2019ll always work to get profile names and visuals updated to reflect who runs the account. If the corporate marketing team comes across profiles that don\u2019t respond to these requests, we will report them for impersonating our brand. As a Team Member of GitLab, you aren\u2019t authorized to create company/brand social media profiles to use for your work. If promoting content should come from the company, you\u2019ll need to open a request issue with the organic social team. If the corporate marketing team encounters unauthorized profiles, they will be treated as external threats and reported for impersonation. There is no formal method for requesting new brand channels, nor is there an outline for managing to do so. It\u2019s best to use personally identified social media profiles to share your posts. As part of your role at GitLab, you may be responsible for a contest or a sweepstakes with social media elements. It\u2019s important to follow legal guidelines. Essentially, as a representative of GitLab, if you\u2019re promoting the contest on your social media channels, it will need to follow the same rules as what the GitLab brand channels will need to follow. You can learn more about legal and contests in the handbook here. Most social media websites/services have rules concerning the use of and activity conducted on their sites. These are sometimes referred to as \u201cTerms of Use.\u201d Team Members must follow the established terms and conditions of use that have been established by the website, social media network, or channel and not do anything that would violate those rules. If the company finds any statements or claims that are false or misleading, or we discover an activity that does not follow the policy, we will contact you to correct the situation. If you are consistently disregarding the social media policy, especially if you fail to disclose your relationship to GitLab, make false or misleading statements about GitLab or our products and services, GitLab retains the right to discipline, up to termination of employment with anyone that does not comply with this policy. In the event there is any conflict between this social media policy and local laws and/or regulations for your region, the local laws and/or regulations prevail over our policy and must be followed. However, if the conflict is simply because of practice or customs varying between regions, our social media policy must still be followed. Any conduct which is impermissible under the law if expressed in any other form or forum is also impermissible if expressed through social media. See section below for location-specific details that are necessary to review. Confidential proprietary information does not include information lawfully acquired by non-management employees about wages, hours or other terms and conditions of employment, if used for purposes protected by Section 7 of the National Labor Relations Act such as joining or forming a union, engaging in collective bargaining, or engaging in other concerted activity for their mutual aid or protection. GitLab will not enforce the social media policy in a manner that would interfere with team members\u2019 rights under the National Labor Relations Act to discuss the terms and conditions of employment. You may not use data obtained in the course of your employment with GitLab in any way which breaches the provisions of the Data Protection Act 1998. Take this policy and turn it into a social media certification in less than 45 minutes with the social media 101 training and certification. You\u2019ll find details on the training and what to expect here."
    },
    {
        "title": "Blog Handbook",
        "url": "https://handbook.gitlab.com/handbook/marketing/blog/",
        "content": "Welcome to the GitLab Blog handbook! The GitLab Blog is managed by the Content Marketing team. The managing editor of the blog is Sandra Gittlen (@sgittlen). At GitLab, blog posts largely focus on sharing helpful information with the audience (DevSecOps professionals). When you suggest or write a blog post, always consider what it offers the reader. If the post is more internal-focused or a personal essay of sorts, it is likely not a fit for the blog (but could go on your personal LinkedIn page). Blogs fall into the following categories: Everyone can contribute at GitLab. For the blog, this means we welcome your blog suggestions, ideas, and drafts. However, the main blog is one of the many official voices of GitLab \u2013 meaning content that is published there must be carefully vetted to ensure we are accurately representing GitLab \u2013 both the company and the product. The Blog Managing Editor and the Director of Global Content Marketing are the directly responsible individuals (DRIs) for the official GitLab blog and are tasked with this responsibility. If you have questions about the GitLab Blog, please reach out to sgittlen@gitlab.com. Please create an issue using the blog submission template. The blog editor will review the pitch and either a) greenlight the post, b) offer suggestions for improvements, or c) explain why the idea might not be a fit for the blog and offer other ideas for getting the message out. **Note: You can also notify the Blog team of a typo or request a change via the blog submission template. Note: GitLab does not accept unsolicited blog submissions. If you are a GitLab partner and would like to pitch a blog post idea for consideration, please email sgittlen@gitlab.com. If you are a GitLab community member and would like to pitch a blog post idea for consideration, please email contributors@gitlab.com. Please DO NOT SEND drafts of your blogs with your pitch. Pitch ideas must be relevant to the GitLab Blog and our readers and include the following information: What will your blog be about? Please be as specific as possible. Which of the following best describes your blog? (Please check at least one box.)  tutorial/how-to on how best to use a feature/capability  best practices for how to use the GitLab platform  the open source community and GitLab  partner/alliance integration  other - please explain All blog pitch ideas and submissions will be vetted and reviewed by GitLab team members. Blog editors, please add the following two sentences at the beginning of contributed articles: Editor\u2019s note: From time to time, we invite members of the community to contribute to the GitLab Blog. Thanks to [entity name] for co-creating with us. External contributions are subject to the External Blog Submissions Terms. Please read this document and agree to terms before submitting material to GitLab. Once a blog pitch is approved, the author will use the Blog Submission template (Google Doc) to write the blog, ensuring the Google Doc is linked in the issue. All fields in the template will have to be completed for the blog team to accept the submission. The author will tag @sgittlen in the issue, put the doc link in a comment, and share the Google Doc once it is ready to be edited (after all necessary approvals and reviews have been completed). Note: All images must be included inline in the Google Doc. Note: All blog submissions now require a call to action or CTA and you will be asked to provide one in the blog draft template. A CTA is what you want the reader to do next after reading your blog. Do you want them to go to another page and learn more, sign up for a trial, register for a webinar, view a demo, etc.? We will be able to track the CTA as part of our overall blog metrics. The blog team will communicate initial edits/questions for the author using the issue and Google Doc. The blog team will then put the blog into the CMS and, if necessary, share a preview link with the author/DRI. Note: The blog will be published from Contentful. If changes are needed post-publication, the author will reach out to the blog team via Slack and explain the change. Note: We can no longer use MRs for changes/updates. The blog team will share the blog\u2019s URL with the author once it is published. Publishing of blog posts occurs according to an editorial calendar. However, that is subject to change based on blogs that are urgent. The blog team will update authors as to their expected publish dates. Some blog posts must be reviewed by legal, in accordance with our Materials Legal Review Process/SAFE program. Authors are responsible for reviewing SAFE guidelines and getting Legal approval before sharing the Google Doc with the blog team. This process can take time, so please plan target publication dates accordingly. GitLab has a bias for action, and the Blog team is no different. However, the GitLab Blog is a public-facing asset and represents the company. If the Blog team has concerns or questions about the information contained in the blog post, the Blog team has the authority to hold a blog post until Legal, Corporate Commmunications, Partner Marketing, the CMO, etc., can review the blog post to mitigate any potential risk for the company. Learn more about the SAFE Guidelines by reading the handbook page and following the Materials Legal Review Process. If you are internal to GitLab and want to suggest a change to a published GitLab blog, please post the change you need in detail with the URl in the #content Slack channel and tag @sgittlen or ping @sgittlen directly in Slack. If you are external to GitLab, please email Sandra Gittlen at  sgittlen@gitlab.com with the details of your suggested change. Chat channels: It is important that our blog content represents our company values of diversity, inclusion, and belonging. Not all of these points will be relevant to your blog post, but they are important values and practices to be mindful of throughout the writing process. The blog editorial team tries to check for these things, but it is better if all content is created with these values and practices in mind. Tag us or a member of the DIB team if you have questions! Use only one of the following categories per post.\nDo not change the capitalization, spelling, or anything else,\notherwise you\u2019ll create another category, which is something we don\u2019t want to do accidentally. If you\u2019re not sure which category your post belongs in, just put a placeholder in your MR and leave a comment for your reviewer noting that. These are included to help readers find similar posts if they are interested in a particular subject. Tags appear at the top of each blog post, and clicking on a tag takes you to /blog/tags where you can view all tagged posts and browse by tag. You can include as many tags as you like, separated by commas. Please only include tags from the following list, and note that they are case sensitive. We limit media embeds to the following providers: Below are the two types of code blocks we commonly use on the blog. Find a number of other options in the Markdown guide. We use this for short words or phrases included in a paragraph. For inline code, surround the word or code with single backticks (`). Example: This is an `in-line` code block. Results in: This is an in-line code block. \u201cFenced\u201d code blocks look like the block below. We use these for longer code snippets. To create a fenced code block, put triple backticks on one line directly above and one line directly below the code. Syntax highlighting helps make code easier to read. In order to enable syntax highlighting please append the language type at the end of the code block. The name matters because every language is highlighted differently. Example (not highlighted): Versus (highlighted javascript): (or other languages/syntaxes such as yaml, ruby, sql, etc) Details about how to embed mermaid charts into your blog can be found in this MR. Please read as there are nuances that might prevent your chart from rendering properly. For technical/tutorial posts, please illustrate your examples with code blocks or screenshots. Be consistent with your examples. E.g., if you are using a generic URL\nto exemplify your steps domain.com, be consistent and keep it domain.com, throughout the post. Important security point: Do not expose your personal details by using your real tokens or security credentials. Use placeholders such as [project's CI token] stub instead. Or blur them if displayed on screenshots. Please see the Markdown Guide for instructions for embedding videos from YouTube and other sources. Please see the Markdown guide for instructions for embedding posts from social media. Animated GIFs are very useful to illustrate short dynamic processes, which might be easier to understand with this kind of resource.\nThere are a few ways to create animated GIFs, one of them is using [Giphy Capture], a light-weight app for Mac. Avoid GIFs with a huge file size, they will be difficult to load for users with bad internet connection. In those cases, you can either cut the GIFs in smaller pieces, or record a video, or use a sequential image. Here\u2019s a set of recommendations when creating an Author entry in the CMS. Name field\nThis is a required field. It is also a unique field. Role field Current working position or job description. Bio field Biography of the Author. GitLab handle field It corresponds to Author\u2019s GitLab username in lowercase format. This field has to be unique. Social media handles fields Optional fields for social media handles. We can publish blog posts in languages other than English. We currently support the following languages: Translating an English-language blog post into another language is straightforward. Contentful offers a feature called \u201cField level localization,\u201d which allows us to specify the fields on the blog post that we want to translate. In the right-hand navigation while on a blog post, there\u2019s a \u201cLocalization\u201d section. By selecting locales in that section, we can show or hide localized fields based on the currently selected locales. Once these fields have been completed, simply click \u201cPublish\u201d and the changes will go live on production in approximately five minutes. It\u2019s important to note that while we wait for Contentful to release locale-specific publishing (Spring 2024), any draft content, regardless of language, will also be published. Publishing a blog post without an English-language equivalent follows the same process as \u201cTranslating an English blog post to other languages\u201d with one minor difference. Contentful mandates that required fields cannot be left empty in English. To circumvent this requirement, a \u2018#\u2019 character can be inserted into the English Title and Blog Body fields. This informs our system that the English-language blog post does not exist and should not generate a web page for it. Contentful is currently developing a solution to address this workaround, which is expected to be available by Fall 2024. Starting the process of getting a blog post translated is easy. Follow these steps: Here\u2019s a video walkthrough of the full process from creating the translation request to publishing on production. Things to be careful about when localizing an EN blog post."
    },
    {
        "title": "Brand and Product Marketing",
        "url": "https://handbook.gitlab.com/handbook/marketing/brand-and-product-marketing/",
        "content": "The Brand and Product Marketing team\u2019s goal is to accelerate GitLab\u2019s path to market. Brand: We create awareness, trust, and affinity for the GitLab brand. We develop umbrella, corporate-level messaging to establish GitLab as market and category leader. We conduct research to define, evolve, and measure the health of the GitLab brand. We provide brand stewardship and governance, empowering internal and external advocates to become brand champions. Product and Solution Marketing: We develop insights, positioning, and messaging that communicate the value of our platforms and solutions. Product and Solution Marketing consists of several specialities including core product marketing,  customer advocacy, market insights, analyst relations, and competitive intelligence. We create positioning and messaging to fuel demand and adoption of GitLab\u2019s solutions and products. We develop market and competitive intelligence in order to develop actionable insights on market trends, customer needs, and competitive insights that guide go-to-market and product strategy. We identify, recruit, and activate customer advocates to demonstrate momentum and trust in the market. Design - Deliver creative designs and experiences that elevate our brand and fuel demand. We develop our brand visual identity design to ensure it stays relevant in the market and reflects the benefits and quality of our product. We are the creative partners for GitLab marketing. We create, conceptualize, and design high quality brand experiences. Content - Showcase our leadership through easy-to-find content that is educational, thought-provoking, and market-defining. We create, review, and improve content to establish GitLab as the leader in modern software development and DevOps, while also sharing the company\u2019s vision for the future. We create content that maintains and improves our search rankings around key terms. We create content for go-to-market campaigns that drive awareness, growth, engagement, and conversion. The Brand & Product Marketing team operates at the intersection of marketing, sales, customer success, and product management. As a team, we measure our impact through the following capabilities: "
    },
    {
        "title": "Enterprise Data Team",
        "url": "https://handbook.gitlab.com/handbook/enterprise-data/",
        "content": "Would you like to contribute? Recommend an improvement, visit Slack #data, watch a Data Team video. We want to hear from you! The collective set of people, projects, and initiatives focused on advancing the state of data at GitLab is called the GitLab Data Program. GitLab has two primary distinct groups within the Data Program who use data to drive insights and business decisions. These groups are complementary to one another and are focused on specific areas to drive a deeper understanding of trends in the business. The two teams are the (central) Enterprise Data Team and, separately, Function Analytics Teams located in Sales, Marketing, Product, Engineering or Finance. Watch the Data Recruiting Video to hear from some of the teams involved and what they are working on. The Data Team reports into Business Technology and is the Center of Excellence for enterprise insights & analytics (not operational), data science, data platform & infrastructure, BI technologies, master data, data governance and data quality. The Data Team is also responsible for the enterprise data strategy, building enterprise-wide data models, providing Self-Service Data capabilities, maintaining the data platform, developing Data Pumps, and monitoring and measuring Data Quality. The Data Team is responsible for data that is defined and accessed on a regular basis by GitLab team members from the Snowflake Enterprise Data Warehouse. The Data Team builds data infrastructure to power approximately 80% of the data that is accessed on a regular basis. The Data Team also provides a Data Science center of excellence to launch new advanced analytics initiatives and provide guidance to other GitLab team members. Function Analytics Teams reside and report into their respective divisions and departments. These teams perform specific analysis for business activities and workflows that take place within the function. These teams perform ad-hoc analysis and develop dashboards based on the urgency and importance of the analysis required, following the Data Development approach. The most important and repeatable analysis will be powered by the centralized Trusted Data Model managed by the central Data Team. Function Analytics Teams also build function-specific/ad-hoc data models and business insights models to solve for urgent and operational needs, not requiring trusted data features. Function Analytics Teams work closely with the Data Team in a variety of ways: expand GitLab\u2019s overall analytics capabilities, extend the Data Catalog, provide requirements for new Trusted Data models and dashboards, validate metrics, and help drive prioritization of work asked of the Data Team. When data gaps are found in our business processes and source systems, the team members will provide requirements to product management, sales ops, marketing ops, and others to ensure the source systems capture correct data. The GitLab Data Program includes teams focused in the following areas: On a normal operational basis, the Data Team and Function Analyst teams work in a \u201cHub & Spoke\u201d model, with the Data Team serving as the \u201cHub\u201d and Center of Excellence for analytics, analytics technology, operations, and infrastructure, while the \u201cSpokes\u201d represent each Division or Departments Function analysts. Function analysts develop deep subject matter expertise in their specific area and leverage the Data Team when needed.  From time to time, the Data Team provides limited development support for GitLab Departments that do not yet have dedicated Function Analysts or those teams which do have dedicated Function Analysts, but might need additional support. The teams collaborate through Slack Data Channels, the GitLab Data Project, and ad-hoc meetings. The Data Platform Team & Architecture Team is part of the Enterprise Data Team and focuses on building and maintaing secure, efficent, and reliable data systems data infrastructure. The Data Platform & Architecture Team is both a development team and an operations/site reliability team. The team supports all Data Pods with available, reliable, and scalable data compute, processing, and storage. Platform components include the Data Warehouse, New Data Sources, Data Pumps, Data Security, and related new data technology. The Data Platform team also drives the Data Management processes. The Data Platform Team is composed of Data Engineers. The Analytics Engineering Team** transforms raw data into clean, structure and usable formats for data decision-making. The Analytics Engineering team also drives Enterprise Data Program and supports the wider data community. The team focuses on inventorying, integrating, maintaining, and governing the data at an Enterprise level. This includes collaborating with the business units and data teams in establishing and facilitating commonly accepted guidelines around Enterprise data along with building enterprise-wide data models, supporting Self-Service BI and Analytical capabilities by providing Data Enablement and required training to the Users on Enterprise Data Models. The Enterprise Insights & Data Science Team utilize analytics and Machine Learning (ML) for insights into customer behavior and company performance. The Enterprise Insights & Data Science team focuses on delivering a complete view of the customer (Customer 360), predict customers that are likely to buy, expand or churn, develop models to predit the long-term value of customers, create detailed customer profiles, and deliver insights on company performance.  The Team acts as a Center of Excellence for predictive analytics and supports other teams in their data science endeavours by developing tooling, processes, and best practices for data science and machine learning. List of the current projects can be found in the Data Science handbook page. The job families are designed to support all of the routine activities expected of a Data Team. In FY22 we are introducing two new job families, Data Scientist and Analytics Engineer. Our impact will be measured against 4 dimensions (these metrics will adjust as our data maturity increases and our focus areas change): Data Monthly Active Users (DMAU): DMAU Measures the direct usage of the Data Platform by GitLab Team Members based on usage of the primary analysis tools we provide: Snowflake and Tableau. Over time we will include additional tools such as Jupyter and Data Studio, as well as usage of data pumped into EApps such as Marketo (PQLs), Gainsight (Usage Data), and Salesforce (Propensity Scores). A visualization of these numbers can be found in the Data Monthly Active Users report. Data Monthly Active Users (DMAU) = Unique users of a Data system (i.e. Snowflake, Tableau) in a given month Data Maturity Score: measured annually, evaluates our current data maturity against 8 data capabilities: Number of certified Tableau dashboards % total views from certified dashboards First we have the evaluation criteria known as Dollar Value of our Results as calculated by the Data Value Calculator. We can use the Data Team Value Calculator to calculate the dollar value of the initiatives we contribute to and the issues we complete.\nAdditionally we want to shift to a more aspirational measurement which is to measure the ARR impact or efficiency gain from each of our data products. Our data science models will be measured in the following ways: Issue tracker\nGitLab Unfiltered Data Team Playlist\nWhat time is it for folks on the data team? You can also tag subsets of the Data Team using: Except for rare cases, conversations with folks from other teams should take place in #data, and possibly the fusion team channels when appropriate.  Posts to other channels that go against this guidance should be responded to with a redirection to the #data channel, and a link to this handbook section to make it clear what the different channels are for. The Data Team primarily uses these groups and projects on GitLab: Though many of our GitLab projects are internal only, the rest are still public by default. You can tag the Data Team in GitLab using: This page contains forward-looking content and may not accurately reflect current-state or planned feature sets or capabilities. As an important step towards achieving our mission, meeting our responsibilities, and helping GitLab become a successful public company, we are creating an Enterprise Data Platform (EDP), a single unified data and analytics stack, along with a broad suite of Data Programs such as Self-Serve Data and Data Quality. The EDP will power GitLab\u2019s KPIs, cross-functional reporting and analysis, and in general, allow all team members to make better decisions with trusted data. Over time, the EDP will further accelerate GitLab\u2019s analytics capabilities with features such as data publishing and products - enriched and aggregated data integrated into business systems or into the GitLab product for use by our customers. This acceleration happens through the development of \u201cData Flywheels\u201d, much like GitLab\u2019s Open Core and Development Spend flywheels. Welcome to the Data Programs page. Here you\u2019ll find information about the various Data Programs around GitLab and those the Data Team supports, ranging from onboarding to day-to-day operations. Recordings of previous demos are posted to the GitLab Unfiltered Data Team playlist. If you are onboarding to GitLab and will be working in the Data Program as an Engineer, Analyst, or Developer, follow these steps: This page is created to share the experiences of Data Team members who completed internships with various teams within GitLab, with the aim of providing insights, learnings, and best practices."
    },
    {
        "title": "Integrated Marketing",
        "url": "https://handbook.gitlab.com/handbook/marketing/integrated-marketing/",
        "content": "Be the strategic growth engine for GitLab by creating and accelerating high quality demand, partnering ecosystem-wide and being platform champions. The Integrated Marketing works across SMB, Mid Market and Enterprise segments as well as globally in the Americas, Europe/Middle East and Africa (EMEA) and Asia-Pacific (APAC) to create relevant game plans and thoughtful execution, enabling GitLab to: We are innovative, strategic, and data-driven, delivering a cohesive high quality marketing motion. We are a team that transparently communicates wins, challenges, and marketing insights that helps us feel connected to our purpose as a team and a company. We are tightly connected and operate as one respectful, supportive and collaborative IM team, communicating a united story about our reason to be, the context in which we operate and why we move in an intentional direction. We are innovative, strategic, and data-driven, delivering a cohesive high quality marketing motion that aligns across our joint stakeholder goals. Digital Experience: Responsible for creating customer-centric approach to educating prospects on how GitLab enables them to deliver software faster and more securely on the marketing site. Corporate Events: Create experiences through 1st and 3rd party events to bring awareness to the GitLab story and build our presence with key audiences. Digital Strategy: Leverage paid and owned media tactics to foster awareness, generate leads and reach audiences where they engage. Account Based Marketing Campaigns: Deliver creative ways of telling the GitLab narrative, through different channels, formats and platforms. Lifecycle Marketing: Engage, nurture and convert customers across the customer journey. Field Marketing: Be the feet on the street, creating local and regional experiences, learning and evangelism in close partnership with Sales. Channel: Exponentially grow GitLab\u2019s reach through the ecosystem to build awareness and generate demand. Integrated Marketing OKRs cascade from CMO OKRs FY25 IM strategy You can find us on Slack in the #marketing_integratedmarketing channel. We value our asynch value and believe that people truly need time to think and process. The Integrated Marketing team, like all GitLab team members, should feel empowered to decline meetings based on the agenda topics. The IM team meets the 1st and 3rd Wednesday of the month and the time rotates between being EMEA/AMER & AMER/APAC timezons. We discuss key cross-functional issues, our progress on our OKRs for the quarter, and to ideate how we can better unify our marketing motions, as well as having a little fun getting to know each other! Each month, Integrated Marketing meets with regional Sales Leadership to discuss key metrics and team updates. This GitLab Epic (confidential) documents the past readouts as well as preparation for the future readouts monthly. See this doc for details on consistently pulling metrics for Monthly Regional Readouts (GitLab Internal) Due to the fact that teams outside of the digital marketing team are only allowed to run three paid social campaigns a month, we would not want to use one of our three slots for the month to run a publisher program with a publication that we already have relationship with. This is for two reasons: 1. To work with our 3rd party ad agency, there is 12-15% fee that is based off the ad spend of the publisher engagement to accommodate their services and reporting 2. because we do not want to take the place of a paid social campaign. Should we go down the route of wanting to work with a publisher, then the team member should collaborate by tagging the Campaign Manager & Digital team manager who you normally work with in the campaign issue. By tagging this team in your issue, the Campaign Manager & Digital team member will be able to ensure the publisher engagement does not conflict with existing activities running. For strategic reasons, a regional leader may desire marketing activity outside of the agreed upon marketing countries of focus. As such, this issue template should be used to seek approval."
    },
    {
        "title": "Sales Development",
        "url": "https://handbook.gitlab.com/handbook/marketing/sales-development/",
        "content": "Welcome to the Sales Development Organization at GitLab! We are a team designed to drive results for customers through both inbound and outbound strategies. Our structure is designed to maximize efficiency, responsiveness, and creativity in our outreach efforts. 1. Sales Development Representatives (SDRs) - Inbound Focused Key Attributes: Our Inbound-focused SDRs are known for their swift response times, ensuring global coverage and alignment with marketing initiatives. They operate with defined and prescriptive inbound processes, utilizing round-robin assignment rules. Additionally, the SDR team serves as a talent incubator for our Business Development Representatives (BDRs). 2. Business Development Representatives (BDRs) - Outbound Focused Key Attributes: Our Outbound-focused BDRs excel in strategic account planning, research, and delivering targeted and creative messaging. They work closely with Sales Account Executives (SAEs), Account Executives (AEs), and Sales Leadership. The BDR team Please follow the table below to quickly find the most relevant place for what you\u2019re looking for. You can also use the searching method explained here to increase your searching capabilities. Our handbook page has contributions from a diverse team. To help you efficienctly find answers, we highly suggest that you cmnd+F this page as a best searching practice. Try searching for as many permutations of what you\u2019re looking for. For example, if you want to find information on lead scoring search for keywords like score, scoring, lead, leads, scoring. Remember that information retrieval is a core GitLab value, and a skill that will make a big difference in your careers. If you can\u2019t find what you\u2019re looking for please reach out to a member of the Sales Dev Ops team and we\u2019ll help you find it, or update the handbook to include it! Please find our SSoT in terms of reporting below, for the 1:1 Dashboards you can also review the additional guidance here on how to best use them. Inbound leads get automatically imported to SFDC by the Sales Operations team, you can find links to their handbook pages on our main page. To find and access your leads, please: You will find the lead views below. These views are split per use-case for your convenience. The KPIs for managing these leads are thoroughly outlined in our SLAs page. As part of your SDR responsibilities, you are expected to perform due diligence on each lead you receive. This includes checking the database for duplicate records, as well as referencing against our RoE. For leads that connect to companies that operate in the Financial Services (AMER only) and Telecommunications (EMEA only) industries. We have a seperate routing process that supercedes all of our current Rules of Engagement. Only named TELCO/FinServe accounts are rolling up to the TELCO/FinServe territories. If a new account is a subsidiary of an existing carved company, it will need to be assigned to the AE owning the ultimate account. If it is a totally separate entity then it can be allocated to the regional AE. If a lead comes in that is related to a TELCO/FinServe account, it must be assigned to the BDR assigned on the account. In this video, a member of the Marketing Ops team goes over the Company address fields and how they are used for Accounting Routing and Opp assignment. If you need to do edits to the database by merging leads together for any of the above steps, please reference the videos below for an explanation.  If you\u2019d like the assistance of another person or team, you can use SFDC chatter on the lead record. Please reference the guide below: Lastly, Every so often you may be assigned a lead that has no value to GitLab and is not worth keeping within our database. Qualities that define these types of leads include: 1. Determining High-touch or Low-touch sequence usage: Before calling any Lead or Contact, BDRs must ensure that the Do Not Call box is unchecked.  If you speak to any anyone, including prospects and existing contacts, who ask you not to call them again, you must check this box. However, please do not delete the number as we need to know which number requested not to be called again. For any individuals who are opted-in to email, you may ask them if they wish to be called. If they express a desire to be called, you are then permitted to uncheck the Do Not Call box if it was previously checked.  Also, if an individual expresses independently via email a wish to be called, you may uncheck the Do Not Call box.  This email must be present in SFDC as proof of your authority to uncheck this box.  You cannot send email requests to individuals not opted-in to email asking whether they would like to be called.\nIf you receive a request from a prospect asking to be removed from the CRM, please follow this process. Our cold-calling best practices typically consist of 4 elements. A pattern interrupt, an elevator pitch and, if required, objection/trap-setting questions and Up-Front Contracts. To be effective, these need to be customized to the individuals we call as per the logic below: An unsubscribe link must be included on every email sent by a BDR, including responses to a prospect or contact. Please reach out to the Privacy Team via #privacy-team-help for the recommended language that should appear at the bottom of each outbound email. Leads with certain criteria will be automatically labeled as Do Not Call and or Do Not Email shortly after loading into our database. It\u2019s understandable this can be frustrating for certain territories. Please keep in mind, the criteria behind this automation has been set in order to follow local law. Please see the Internal GitLab handbook for more information on the triggers. Outreach.io is a tool used to automate emails in the form of sequences. Users can track open rates, click-through rates, response rates for various templates, and update sequences based on these metrics. Outreach.io also helps to track sales activities such as calls. All emails/calls/tasks that are made through Outreach.io are automatically logged in Salesforce with a corresponding disposition. See below for a list of current call dispositions, what they mean, and scenarios on when to use each of them. Ways to organize similar sequences and snippets A method of distinguishing sequences and snippets from others. Use tags to help narrow down which sequences you should be using in a particular situation Content created for BDRS and SDRs to use to create hyper-personalized sequences, one-off emails, or to use for reaching out to prospects via LinkedIn. Common Snippet Examples In an effort to better iterate, and refresh, our outreach content and workflows, we have a structured process for BDRs to create/measure new Outreach sequences. Please log an issue here by selecting the template BDR_Sequence_Creation_Request. The issue description will walk you through all the next steps. This process aims to: Implement Measurement Clarity and Decision Velocity By dogfooding GitLab we have a structured and simplified cadence of quantifying sequence creation in terms of value and results without limiting agency. Maintain Equal Contributions in a Shared Reality\nBy maintaing a Single Source of Truth (SSoT) we give the best possible forum for cross-functional collaboration with specific guidelines Ramping BDRs\nRamping BDRs should only be using OB sequences from the Good and Testing collections. A ramping BDR can only create a Sequence Creation Request if there is no sequences that fit their needs or strategy in our current library. For SDRS and BDRS that want to sequence leads in their qualifying views we created this video to help you create a workflow around this follow up sequence. The same video also showcases the Auto Follow Up to Book a Meeting Sequence SDRs and BDRs can use when a prospect responds to one of their sequences. For guiding prospects to web-direct, we also have a sequence that you should use to ensure that you streamline their buyer\u2019s journey. For more personal events, such as Executive Roundtables, there many be more detailed Last Event Notes that have an ask to include the people who interacted with the prospect at the event. For these situations we have a specialized white glove sequence. The goal of this sequence is to reach out to the prospect quickly and to include our SAEs/AEs in the conversation. You must change your email signature in Terminus in order for your signature to save. If you only change your signature in Outreach or Gmail your signature will revert back within 24 hours. Steps to change your signature BDR outbound lead generation is done by prospecting to companies and individuals who could be a great fit for our product. Prospecting is the process of finding and developing new business through searching for potential customers with the end goal of moving these people through the sales funnel until they eventually convert into customers. BDRs will work closely with their dedicated SAE or AE to choose which accounts move into \u201cActively Working\u201d. Together they will build a strategy for those companies. It is crucial that outreach is very intentional and strategic. When reaching out, we want BDRs to offer value and become a trusted advisor, ensuring a positive impression is left whether there is current demand or not. Before moving an account into \u201cActively Working Status\u201d, make sure there have been no MQLs or opportunities created from that account within the past 30 days, and there are no leads from that account in Qualifying status with activity in the last 30 days or with a future task date set. The FO Outbound process is split in four phases, which should be followed on a weekly basis to ensure a steady outbound pipeline in alignment with our internal KPIs. To manage this process we use a set of datapoints on SFDC on the account-level that are marked under the section \u201cBDR Comments\u201d. Please reference the guide below on an explanation on how they work. 1A. Create a set of achievable objectives These goals should be based on what you know you can achieve when focusing on First Order accounts. It is particularly important to know your equation so you can map your activities to specific outcomes and goals in a predictable way. The main objective you should be focusing at is to measure and plan what activity is required to achieve or increase the amount of First Order meetings. 1B. Map your objectives to your data  Research your territory to identify the true First Order (FO) accounts, ensuring no other subsidiaries have licenses, verifying there hasn\u2019t been a lost renewal in the past 180 days, and confirming there are no open opportunities. The goal here is to vet your TAM (Total Addresable Market) so that you can start matching cohorts of accounts with the objectives that you\u2019ve outlined in the previous step. Indicatively, you can export these accounts to a Google Sheet, or other SSoT of your preference, for tracking since these accounts will be marked as Actively Working at a future step further down the process. Utilizing these accounts, create an outreach strategy and plan for the upcoming month and quarter. This strategy should include considerations such as the number of accounts to include in sequences per week and per month, the quantity of prospects from these accounts to add into sequences weekly, whether you intend to target specific personas, if you plan to employ targeted messaging, whether sequences will be used for high-priority targets, and the messaging approach you will implement. As previously mentioned, knowing your equation is important for your planning here. Please refer to the sheet linked above to determine your exact metrics. During your research phase for accounts to include in your sequences, thoroughly investigate and document pertinent information, which may include: This comprehensive research will provide valuable insights for crafting effective outreach strategies further down the funnel. Regarding account research, in addition to our B2B database toolstack, we also use 6Sense to pre-qualify the accounts that should be considered for our pipelines since 6Sense scores accounts based on their market and profile fit. There are two ways utilize 6Sense: The dashboard will now display the top actively working accounts in your name. Do note that these are only accounts that we currently have on our database, while you can find greenfield accounts by visiting the SaaS platform (instructions in section 2B). Section 3 below explains how you can review and utilize this data. Navigate to 6Sense through Okta\nOn the left-hand bar, click on the Segments tab\nYou will find all of the relevant resources for BDRs and SDRs on the first 5 folders. These folders can be used as per the table below.\n(In each folder you will find a saved template that can be cloned and edited for your individual territories.) After choosing the type of report you\u2019d like to work, please follow the steps below: No matter how efficiently we\u2019re trying to use our toolchain, these tools are still prone to error, and manual research is required to best shortlist the prospecting lists that cross-referencing will provide.Manual research will also provide additional context that can be used to hyper-personalize your outreach to your prospects. For each account that you want to investigate, start with SFDC to make sure that there are no duplicate accounts. The report templates in 6Sense should exclude existing customers or accounts actively prospected, but we cannot automatically exclude accounts that have a different naming or domain on salesforce (ie. GitLab and GTLB) The importance of diligent manual research will lead to the below efficiencies: \u2192 Better use of time in the long-run by making sure accounts are indeed within your segment and territory, or are not duplicates. \n\u2192 Avoiding unecessary RoE conflicts by making sure there are no hidden parent accounts that would cause SAO ownership to be re-assigned to other segments in the future. 1. To double-check the account on Salesforce: 2. To hyper-personalize your messaging: Please follow the steps below to understand how to research the data provided on 6Sense, and to cross-reference this data with our internal knowledge base so that you create your account strategy accordingly. Exporting Accounts and Leads to SFDC, and adding to your Outbound Pipeline. After having manually shortlisted the accounts that are applicable to your campaign, the next step is to determine the relevant prospects per account and export them to SFDC. It is important to add accounts to your outbound pipeline so that AEs and other SDRs/BDRs know this is an account that is already being touched, and to avoid confusion or multiple people approaching the same prospects. Before moving an account into \u201cActively Working Status\u201d, make sure there have been no MQLs or opportunities created from that account within the past 30 days, and there are no leads from that account in Qualifying status with activity in the last 30 days or with a future task date set. If you are not sure, double-check with the related AE, SDR or BDR. To determine which prospects to enroll per account, please follow the steps below: You should explore the specific personas you intend to target, such as: VPs, Directors, Developers, Security, Architecture, DevOps, DevSecOps, Procurement Officers, and IT Buyers. Determine the number of prospects you plan to add to sequences, with a minimum of 25 per day. Utilize LinkedIn Sales Navigator, ZoomInfo or Cognism to identify these personas within your target companies. In Step 7, compile the selected prospects and create LinkedIn Sales Navigator lists for each persona. Save these lists for future use. To export to CRM, please follow the guidelines below: To fill in the BDR fields, please follow the guidelines below: Use the format found on this template\nCopy-Paste the Structure to the BDR Account Research field and populate accordingly.\nPopulate the BDR Next Step Date to be at the end of the account\u2019s sequence length (typically one month out) To review your current pipeline, along with any leads with next steps, please refer to your segments dashboards by going to SFDC > Dashboards and searching for Action Needed. Team specific variants of these dashboard components will also be found on your team\u2019s dashboard. These dashboards will give you a bird\u2019s eye view of what actions are required from to maintain a clean pipeline, in terms of: i. Accounts with BDR fields past due ii. Prospects with sequence steps past due iii. Prospects that have been moved to Qualifying status but have not had any outreach since. Qualification criteria is a minimum set of characteristics that a lead must have in order to be passed to sales and become a Sales Accepted Opportunity (SAO), these are split into Inbound and Outbound Criteria. As an SDR or BDR, you will work to connect with inbound/outbound leads that you get a response from to obtain the applicable information required. This information is tracked on the qualification criteria on the LEAD, CONTACT, and OPPORTUNITY objects in Salesforce. In order to obtain an SAO, you will need to have the required information filled out on the opportunity including documented 2-way communication on the Contacts in the Opportunity. Professional Services opportunities are not credited to sales development, these need to be passed straight to the account AEs for them to qualify. When do I create an Opportunity? You have scheduled time with AE/SAE to speak with the prospect:\nIf you are scheduling time with an AE/SAE to speak to the prospect based on a qualifying conversation you have had with the prospect, an opportunity needs to be created and placed in stage 0. On the opportunity, all \u201crequired qualification\u201d fields need to be filled in. You have obtained a commitment/willigness from a prospect to discuss further.\nIf you have a meaningful two-way communication with a prospect, but have not had the required qualification criteria to move to the Sales team, you can create an opportunity under your name so that you better track your warm conversations. These opportunities may also be used for better collaboration with your team, as they can be reviewed and brain-stormed upon during team meetings. Who owns the opportunity at this point? You have scheduled time with AE/SAE to speak with the prospect.\nWhen you have entered the qualification criteria onto the opportunity, and have received calendar confirmation from all parties for the intro call with sales, you will change ownership to the AE/SAE. After you have saved opp owner, you will add yourself to the BDR/SDR field. The opportunity will remain in stage 0. You have obtained a commitment/willigness from a prospect to discuss further.\nAt this point, the opportunity will be in your ownership but you can not have yourself listed in the Business Development Representative or Sales Development Representative field. There is a validation rule that will not allow the opp owner and the SDR/BDR representative field to be the same member. When will it be credited as an SAO? After the AE/SAL meets with the prospect to verify and supplement qualification criteria, they will move the opportunity into Stage 1 Discovery. The AE/SAL is expected to move the opportunity into the correct stage within 48 hours of the meeting reflected in the \u201cNext Step\u201d date field. The opportunity close date defaults to the last day of the quarter, however it\u2019s good practice to set the date at least 90 days out from creation date. If an opportunity has incorrect data after it has moved into Stage 1 - Discovery, please Chatter your manager about the required changes, they will then Chatter someone from Sales Dev Operations (Ramona, Panos, Ed) once final changes are agreed upon. No one else from Sales Dev can edit opportunities once they are in Stage 1, so please try and ensure you have all the information on the opportunity before you ask the AE/SAL to accept it. If the opportunity is for a new group of users in a Large account where sales is working on a large \u201ccentral\u201d opportunity, then your opportunity should be merged to that opportunity for you to get credit for the users you have brought to the deal. See under Stage 8 in the Sales Go To Market Handbook.  Creating Opportunities: Identify and Relate Communications: Identify relevant two-way communications with the prospect, such as email exchanges, call records, or LI messages. Ensure that these are properly logged in SFDC associated with the person, company, and opportunity records as needed. To do this: Verify Sales Organization RoE: On ZoomInfo, or other established sources if needed, verify the parent/child segmentation and the HQ of the company or ultimate user. Overriding Incorrect Account Assignments** If unsuccessful, communicate with the Sales Dev Director for assistance in updating account records. Schedule IQM: For booking meetings, use Outreach Meetings to expedite the experience for prospects. AE Review: Expect AEs to verify that they reviewed the opportunity beforehand. Attending the IQM: Please make sure that both AE and SDR show up on time or up to 5 minutes beforehand with Cameras on. Debrief: Have a goal for the AE and SDR to debrief within 24 hours regarding the opportunity being flipped or being disqualified. IQM Notes: SDR adds IQM notes to the Initiative section in the opportunity Title. Rebooking no-shows: The SDR\u2019s responsibility lies only in rebooking no-shows using the Outreach rebook sequences. To submit a trial extension ticket for a prospect you will navigate to this internal request form and fill it out the form using the \u201cGitLab L&R internal request for global customers\u201d option and then select extend a gitlab.com trial. Keep in mind it only works for SaaS and not self-managed. You are also able to downgrade a Trial from Ultimate to Premium through the internal request form. You just have to choose \u201cChange existing GitLab.com Trial plan\u201d In an effort to increase transparency as well as consistency in terms of credit attribution for opportunities sourced by the Sales Development organization, we will conduct on a monthly basis a full audit of all opportunities giving credit to either a Sales Development or a Business Development Representative. Please do note that SDRs/BDRs that are on their ramping quarter are exempt from being auditors. Participating and completing the audit on time is mandatory. Guiding principles: Mandatory SLA: Audit and XDR response must be completed by the first day of the following month. Rulings will be completed by the management team by the end of the second day.  Invitations and pairing will be sent to the entire Sales Dev team the first week of the month. It is the responsibility of the team member to find a backfill to do their audit if they are unable to complete the audit within set timelines. Examples: web directs. AE-created. Partner generated (for now), Opp w/no value, duplicate opp Each month you will be assigned one of your peers to Audit. We will share a report with all the S1 opportunities created that month. SDRs will audit SDRs and BDRs will audit BDRs. We will do our best to pair people from the same segment however it is possible that you end up auditing someone from another segment. Once you\u2019ve audited an opp, you will create a task by logging a call, choose \u201cother\u201d as type, and write \u201c#Audited\u201d in the subject line. If an opp needs more research, write \u201c#Audited - Pending Review\u201d and add this opp into the Audit Review spreadsheet. Audit Process Video Walkthrough Directors, Ops and JB will select random opps each month to audit and ensure audit process is being followed Our cold-calling best practices typically consist of 4 elements. A pattern interrupt, an elevator pitch and, if required, objection/trap-setting questions and Up-Front Contracts. To be effective, these need to be customized to the individuals we call as per the logic below: You can find three examples of our cold call scripts in the description of the BDR 101 Level Up Course The main documentation may be found here and the library of resources here. Typically used for scheduled calls and Up-Front Contracts. UFCs can also be used as a defense mechanism when cold calling does not go as planned. For cold-calling, UFCs are used when the prospect can commit to 15\u2019 at the time of the call. If they commit to a 15\u2019 for a later time, UFCs are used to open the call and set the agenda then. Explore the main documentation here. The questions below are suggestions to be used while doing a discovery call, in order to identify the decision making process, and to meet the outbound accepted SAO as per the guidelines here. The table below shows the Command of the Message Email Writing Checklist. It aims to outline the structure of the emails we write to prospects. Emails should be written in each person\u2019s language and tone and make sure to include the CoM frameworks as per the outline below. You can find additional resources here. Additionally, you can use the matrix below as a quick-cheet to determine what datapoints can be used for personalization. Video Walkthrough of how to make changes to the GitLab Handbook for the Sales Development org One of our Values is being handbook first. In order to align the SDR organization more closely to this ideal, below are suggested steps. Please remember that the Handbook is a living document, and you are strongly encouraged to make improvements and add changes. This is ESPECIALLY true when it comes to net new solutions that should be shared so the whole organization has access to that process. (aka The DevOps ideal of turning \u201cLocalized Discoveries\u201d into \u201cGlobal Knowledge\u201d.) Steps: From FY24Q4 onwards, we will pilot automatic triggers through Outreach. As a first iteration, we will be automatically enrolling leads that indicate a high Propensity to Purchase (PTP) score to a full High Touch outreach sequence. The filters applicable for this trigger are: We have an additional process where leads that [were automatically moved to disqualify lead status because of a wrong email]https://gitlab.com/gitlab-com/marketing/marketing-operations/-/issues/7718(), BUT have a phone number associated to them, will automatically be enrolled to a sequence. When a territory moves from one BDR to another but the previous BDR remains with the same team (ex: moves from one MM territory to another) the BDR vacating the territory will have the chance to temporarily retain ownership of accounts with which they have generated ongoing engagement (subject to manager approval). At the time of the holdover, an issue will be created that will be reviewed in 30 days to verify account ownership. This includes: There will be times when an SDR or BDR is working a prospect and, after connecting with the prospect, discovers that the corresponding account actually belongs to a different segment than originally thought. This could be due to newly uncovered information regarding employee count, HQ location, or parent account relationship. SAO credit in these situations will vary based on the circumstances and will be determined on a case-by-case basis.  Specifically: In situations where an SDR or BDR has received conflicting information and it is unclear what the correct territory is for an account, they should Chatter the AEs assigned to the potential territories and have them figure out who owns it. The end-user account determines the BDR/SDR alignment: If you are the SDR assigned to the 3rd party lead, please gather the information in point 1 and pass the lead to the correctly assigned BDR (the BDR assigned to the end-user account) who will complete points 2-6 The purpose of the BDR-AE outbound handoff process is three fold. To make sure that the hand-offs maximize internal efficiencies, it is required that: BDR steps after discovery call BDR steps before discovery call Organizing a shared demo makes it more simple for us to offer spontaneously a demonstration of GitLab, which should result in a easier handover of opps, and ease to create opps. As BDRs, we arranged the execution of this demo by creating a zoom webinar, and configuring the whole event so that the administrative side is automated. This complementary table can help structure your thinking around what outbound accounts to choose. | Priority Level | Account Strategy Includes | Next Step Date | Next Step Notes |\n| Priority 1 | Priority #, Any Details | Future based next steps | Hyper-personalized, simultaneous outreach, creative, direct mail, ads, groundswell, events |\n| Priority 2 | Priority #, Weekly Plan or Length of Sequence | Future based next steps depending on account strategy | Include the weeks outreach and overall strategy |\n| Priority 3 | Priority # | Update Next Step Date to next months outreach | BDR Next Step, What kind of nurture (Product Updates, Events, Ect) | Strategies: Ranking and prioritization of accounts: Professional Services Opportunities A Professional Services Opportunity will be used to cover any integration, consulting, training or other service that a Sales rep will sell to a prospect/client and needs or wants to be invoiced separately. To invoice separately a new quote and opportunity must be created. title: Sales Development Tools and Manager Resources\ndescription: This page walks you through all the tools we use in the Sales Dev org. This page is to act as your guide to the many tools and best practices that the Sales Development Organization uitlizes. Read more about Groove here Zoominfo provides our Sales Development Representatives and Account Executives with access to hundreds of thousands of prospects and their contact information, company information, tech stack, revenue, and other relevant data. Individual records or bulk exports can be imported into Salesforce using extensive search criteria such as job function, title, industry, location, tech stack, employee count, and company revenue. More information can be found on the Marketing Operations Zoominfo handbook page. LinkedIn Sales Navigator is a prospecting tool & extended reach into LinkedIn Connections. 6Sense is a targeting and personalization platform that we use to reach our different audiences based on intent data and our ideal customer profiles. While the content beblow is more specific to our Sales Development team, please visit the Marketing Operation\u2019s handbook page here for a full breakdown of 6Sense\u2019s functionality. We currently have in place an automation that will automatically move accounts that reach 6QA status from 6Sense to SFDC. These accounts will be marked for BDR review on the 1:1 Dashboards under report 0. For the SDR team, we have implemented a proces to ensure that the automated flagging of accounts as Actively Working, as described above, does not interfere with regular inbound MQL lead routing. Qualified is the Sales Dev Org\u2019s tool we use to chat with visitors on the GitLab website. Currently the SDR teams primarily respond to inbound chats and visitors using Qualified. The BDRs also have the ability to initiate chats with known leads from their actively working accounts. Refer to the Gong handbook page for full details on how Gong is leveraged at GitLab. Sales Development Org team members are provided with Gong collaborator licenses for visibility to recorded sales conversations. SDR and BDR team members are able to leverage the Gong Meeting option when creating meeting invites for prospects and customers. By using this option and adding an Account Executive with Gong recorder access to the meeting invite, Gong will leverage the AE\u2019s recorder access to record the meeting, assuming all meeting participants consent to record. More details about the Gong consent page can be found in the Gong internal handbook page. Once the recording is processed, the Account Executive that was added to the invite will be listed in Gong as the host and owner of the call with the SDR or BDR as an attendee. Crayon hosts competitive messaging resources that are maintained by GitLab\u2019s product marketing team. This is where you can find messaging related to GitLab vs some of our competiors such as GitHub, Atlassian, and Azure DevOps UserGems is a tool that tracks specific cohorts of people that we provide in terms of them changing jobs. This automated tracking provides valuable insights, surfacing warm leads that can drive faster, larger wins. This tool helps mitigate deal risks when key individuals leave accounts, and accelerates deal progress when influential contacts join new organizations. We have three main cohorts we\u2019re tracking: Table 1: Decision-Making Guidance for UG Leads We have an end-to-end process and tool walkthrough that walks manager through all the knowledge and information they need to know to be able to use our tech stack, both for inbound and outbound processes. The full walkthrough of this training is documented on the issue here. Moreover, abbreviated notes of the training can be found here.\nOur training playlist can be found here This page will serve as a training resource and operational guide for current and future managers. All Sales Development Managers should follow the general leadership principles set out in the handbook. Onboarding is essential for all Sales Development Managers at GitLab. As part of onboarding, a Becoming a GitLab Manager issue will be created for each manager when they join, or are promoted. This issue is intended to connect new managers with the crucial information they need, and ensure they have access to all the resources and training available. The BDR process that we have defined here in GitLab is meant to provide a repeatable set of steps that an outbound BDR can follow to achieve results. It is very important for an onboarding manager to align themselves as quickly as possible to this process as it is a proven method that will help them manage their team in a efficient and data-driven way. The BDR Process is explained step-by-step in the main SDR handbook page here For a newcoming manager, we provide the Manager attention needed boards that will be your main tool in understanding where your team is aligned to our BDR process, and where they need assistance. To help structure your usage of the above, you can follow the steps below during your first month at GitLab while the document here will be your main go-to resource The table below can help with structuring how you perceive and action the 1:1 Dashboards we have on SFDC and Tableau, the below connect to the KPI page here. and the videos here and here are two quick compelementary resources to walk you through how we use the dashboards. Additionally this 5\u2019 video explains the purpose of these dashboards, while this 3\u2019 video walks you through a practical use case of how to use a report in these dashboards. |  Lead View Descriptions | There are Manager Lead views in SFDC mirroring the SDR and BDR views which are described on the linked Handbook page on the left. These views need to be checked regularly by managers to ensure all necessary leads are being worked. Format: Audience | Type | Urgency\nExample: Audience Type Urgency Example Sales_Dev_fyi channel post titles [All of Sales Development] | [Enablement - Mandatory] | [\ud83d\udea8 Action Required] [All BDRs] | [Operations - Outreach Process Cleanup] | [\ud83e\udde0 Need to Know ] [EMEA Enterprise Land] | [Operations - New Outreach Event Sequence] | [\ud83d\udea8 Action Required ] [All of Sales Development] | [Survey - People Group Survey Reminder] | [\ud83d\udcca Feedback Requested ] Our FM/BDR collaboration process is a method that we follow in the spirit of maximizing cross-functional collaboration. We have created an issue template for Field Marketers to populate, which in turns gets managed from the Kanban Board here. The premise of the issue template and board is to streamline communication between our teams. The issue template very clearly articulates all next steps required of this process while it also tries to leave space for us much AdHoc collaboration as required for each specific event. As a BDR Director you will be tagged first in this issue as the primary DRI, while as a BDR Manager you will be involved in this issue on a case-by-case basis by your regional Director. All next steps of this process are clearly mentioned in the template for the issue so please follow each step in turn. The Sales Dev Operations team is also tagged and will be there to monitor progress and offer help if requested. On folder #5 in the 6Sense segments list, you\u2019ll find the templates for the main three categories of accounts that we have. These templates are meant to be cloned and edited for your teams as per the guidelines below and will assist with coaching on 1:1s and team calls, as well as driving more predictable pipeline building. Currently Actively Working Accounts Template CE/SFDC Accounts not in Actively Working Status Greenfield Accounts not in Actively Workin Sales Dev by Salesforce Profile and Role - Sales Dev Territories by Team role/member associated with each territory - GitLab People Connect Team members will create the onboarding issue and start completing the onboarding tasks, no later than one week before the new team member joins. People Connect Team members require a minimum of 4 business days (with the new hire timezone as the basis) before the new hire\u2019s start date to complete all onboarding tasks. This issue will be automatically assigned to you. As a manager, you will also have tasks that need to be completed prior to the new team member\u2019s start date. The general onboarding issue will also automatically add a \u2018Sales Development\u2019 section under \u2018Job Specific Tasks\u2019 based on the role of the new SDR. Both you and your new hire will have tasks to complete in this section. With the creation of this issue, an access request (AR) will also be automatically created for a new team member on their second day at GitLab. This AR lists the role based entitlements (pre-defined groups and system-level access that are granted automatically to team members depending on their role) your new hire will need.\n*See what is being auto provisioned on this AR here. On your new hire\u2019s first day, the assigned People Connect Team member will schedule a welcome email to arrive at 7:30am (local time of the new team member) on their start date detailing how your new hire can access GitLab and begin their onboarding process. A career mobility issue should be opened 2 weeks before the transition date by the people connect team. If the aligned manager does not see that issue created 2 days before the scheduled transition date, the manager should reach out to the People Connect Team via the #people-connect Slack Channel. People connect opens mobility issue if any of the following are true: If an SDR will be out for a prolonged period of time, please follow the proper processes and complete the SDR leave checklist. The full process for offboarding at GitLab differs based on whether it is voluntary or involuntary. These processes can be found on the offboarding handbook page. 1. Sequence needs to be a globally applicable 2. Sequence needs to have completed the requirements set out on the issue descrption As BDRs and SDRs, you work closely with the larger marketing org as well as the sales team. Due to this, your onboarding will encompass training on tools and processes related to not only your role but a blend of marketing and sales. This learning experience involves virtual self-paced learning paths in the form of a general company-wide onboarding issue, a Sales Development specific issue, as well as a Google Classroom course to prep you for Sales Quick Start (SQS). SQS is a 3-day in-person immersive and hands-on workshop for all new hires in a sales development or sales role. In parallel, you will meet regularly with your manager, onboarding buddy and members of our sales development enablement team to chat through and dig a bit deeper into the topics within your onboarding. The goal in all of this is to ensure that you feel confident and comfortable to hit the ground running at the start of your second month on the job when you will have a ramped quota. Our hope is that along this journey you are not only gaining the tactical skills needed to complete your job, but that you form connections with colleagues, gain a strong understanding of our culture, and begin to develop industry knowledge. For BDRs and SDRs joining on the first Monday of the month For BDRs and SDRs joining GitLab on the 16th or after of the month Quota and compensation will be assigned by the BDR/SDR Manager and discussed in the first 1:1. If a fully ramped BDR/SDR transfers BDR/SDR teams they will have a 50% ramp for month 1 and 100% quota for month 2. Is the MQL from an Existing Account? No: It is worked by the SDR team \nYes: Check the BDR Prospecting Status and Account Type Is the Account a customer? No: Move on to the next step\nYes: Check for Opportunities Is there an existing renewal opportunity? No: Move on to the next step\nYes: Align with the sales RoE for renewals and check whether the lead is involved in an upcoming renewal, check in with the Account Executive and your Regional Manager to determine what\u2019s the best course of action for this person. Is the Account in \u201cActively Working\u201d Status No: It is worked by the SDR team \nYes: Check for Activity Is the lead connecting to accounts from the Financial Services (AMER) or Telecommunications (EMEA) industries? No: Please proceed to the next step.\nYes: Normal RoE rules are superceded, and the lead is worked by the respective Telco/Finserv BDRs, not the SDR team  Does the account have activity placed by the BDR in the last 30 days? Yes: It is worked by the BDR Assigned. \nNo: Check to see if there are leads related to the account that have activity using this report\nWhen you modify this report based on company name and email domain, do you see any activity in the last 30 days? \nYes: It is worked by the BDR Assigned \nNo: It is worked by the SDR Team. Next Steps: SDR chatters the BDR Assigned and lets them know you didn\u2019t find activity and will go ahead and sequence the lead. FYI\u2019s the BDR Manager. BDR Manager will work with the BDR to put the account into the correct BDR Prospecting status. If a BDR is able to relay information that was not picked up in the SDR\u2019s research, the SDR should end the sequence if the prospect hasn\u2019t engaged and change lead ownership to BDR so the BDR can reach out. If the SDR has engaged with the prospect, there will need to be a coordinated handoff worked out between SDR and BDR. Note: Only activity logged in SFDC will be recognized as activity. Is the Account in \u201cQueued\u201d Status? Yes: It is worked by the SDR team Is the Account in \u201cWorked in FY\u201d Status? Yes: It is worked by the SDR team Is the Account in \u201cRestricted\u201d Status? Yes: It should be routed to the BDR assigned. The BDR assigned will chatter the SAE about whether they\u2019d like them to reach out or whether they would like to own that responsibility. The AE should respond within 48 hours. If they reply back that the BDR can work, the BDR will continue with the prospect as a lead record and take action. If they reply back that they want to be responsible, the BDR will convert the lead so that it becomes a contact. After determining an MQL is to be worked by the SDR team: Is the new MQL related to an existing MQL that is part of the same account? No: The MQL can be worked by the SDR that received it through the round robin Yes: Check the status of the existing MQL Is the existing MQL in Accepted or Qualifying status? No: The MQL can be worked by the SDR that received it through the round robin Yes: Check the activity on the existing MQL Is there activity in the last 30 days or a follow up task scheduled for the future? Yes: The MQL should be worked by the owner of the existing MQL No: The MQL can be worked by the SDR that received it through the round robin. If you are not sure, double-check with the related SDR. Is the lead automatically generated from UseGems as evident from the Initial Source field, or is there another lead for the same account as the MQL you received that originated from Usergems? Yes: If it\u2019s an SMB lead it\u2019s worked by the inbound team round-robin. If it\u2019s a MM/ENTG lead, we go by the scenarios below: If the related SDR relays information that was not picked up in the new SDR\u2019s research, the new SDR should end any active sequence if the prospect hasn\u2019t engaged and change lead ownership to the team member who has been engaged so they can reach out. If the new SDR has engaged with the prospect, there will need to be a coordinated handoff worked out between the new SDR and the related SDR. Note: Only activity logged in SFDC will be recognized as activity.  Q: I can\u2019t see certain Outreach collections!: \nA: You potentially were added to the incorrect Sales Dev Team in Outreach. Please reach out to Sales Dev Operations. Q: My version of Salesforce seems very basic\u2026: \nA: Make sure you are using the Sales version of Salesforce. To check, please go to the top right corner of your Salesforce window and click the blue button with the drop down window. From there select \u201cSales\u201d. Q: I have not received access to all of my tools and it has been a week. \nA: Notify your manager and have them comment on your Onboarding Role Entitlements Issue. Q: I have uploaded more leads from ZoomInfo than what are showing up in my Salesforce ZoomInfo Lead View. \nA: This most likely due to these leads aleady being in our Salesforce. The problem is that they are listed as a contact in Salesforce and will only appear in your ZoomInfo Contacts view rather than your Zoominfo Lead view. Q: I do not know what this person did to score as an MQL. \nA: First check the last interesting moment description on Salesforce and then check the Scoring tab of the Marketo Sales Insight widget that is also on the Salesforce lead page. If no points were allocated to behavior and only to demographic type information please Slack the Marketing Ops group so they are aware that this lead did not take any new action. Q: I received a personal data subject request by a prospect. \nA: Our MOPs team has set up a process to address any data subject requests for deletion or access to data. If you receive a request for deletion or access to data, please re-direct inquiries to the Personal Data Subject Request. This messaging snippet can be used and tailored. Q: Why are BDRs no longer the Account Owner in Outreach? \nA: BDRs are no longer listed as the account Owner in Outreach to improve Sales Dev and Sales visibility across all prospects/accounts (excluding PubSec). If you want to filter to see just your accounts, please use the \u2018BDR Assigned\u2019 field. Q: A prospect said they were going to buy through our website (known as a Web Direct). How can I tell if they did? \nA: SDRs get credit for opportunities where the SDR had meaningful two way communication with a prospect 60 days before they bought GitLab through our website. The best way to search for a web direct opportunity is to use this report. First, set the date range to the time you think the prospect would have bought. Next, find the opportunity that is tied to your prospect\u2019s account. Then follow the process to request SAO credit.\nNote: Sometimes someone else from your prospect\u2019s company actually made the GitLab purchase, leading to the opportunity being related to them instead. Q: How do I request credit for a web direct opportunity? \nA: On the opportunity record in Salesforce, compose a new Chatter message that includes the following: Q: Should BDRs flag duplicate accounts? \nA: Yes. However, they do not have the ability to merge it themselves so should chatter @Sales Support to do it. Q: How do we resolve a dispute over SAO credit?\nA: SDR and BDR first try to talk through a solution If no agreement: Managers will determine a solution If no agreement between the managers: Escalate to Senior Leadership Double credit nor double compensation will be given Q: Who will be handling inquiries from an SDR/BDR standpoint? \nA: Inquiries will go to an open queue. SDR\u2019s will not work them. We want to give marketing time to progress these to MQLs. \nA: BDR\u2019s can work leads in all statuses if they are related to their \u201cActively working\u201d accounts. Outreach to these leads would be part of their account strategy. Q: What if a prospect comes back directly to the BDR much delayed, when the account is not marked as \u201cActively Working\u201d anymore, but resulting from personalized messaging? \nA: Yes, if they email, reply via LI, or call the BDR directly, the BDR will need to check that the lead is in queue ownership. If so, they must move the account back to \u201cActively Working\u201d, so that the lead can be put into their ownership. Q: Why are my leads being reassigned to Inquiry Queue? \nA: Marketing Operations has a daily scheduled clean at 10:30 PM EST/EDT that update Status = Inquiry to Inquiry Queue. To prevent the reassignment, you\u2019ll want to update the leads from Inquiry to Accepted or add to an Outreach sequence. Q: What should BDRs do when a prospect or contact responds with a complince related question or objects to being contacted? \nA: Immediately reach out to the Privacy Team via #privacy-team-help and forward any email from the contact to dpo@gitlab.com. Q: How do I know if a lead is associated to a Partner Account and is being worked by a Partner?\nA: Partner leads will not be asigned to BDRs or SDRs as they will be assigned to the Partner Queue. To tell whether a lead is associated to a Partner Account, check their Vartopia Partner Account - if it\u2019s empty, you are may proceed with outreach. Q: When a partner lead is assigned to Partner, when and how can we recall the lead?\nA: Partner lead will be recalled after a certain period of time if they are not accepted by Partners for joint marketing campaigns. They will be initially be recalled with a Recycle status, once they become MQL, they will be assigned to BDRs or SDRs. For more information on this process, see the Vartopia handbook page. There are three deciding factors on what channel you should use for your announcement: Announcement Channels The Sales Development Organization believes in getting the job done (consistently delivering results) and doing it right (meeting KPI/SLAs, adhering to our Three Pillars, being good partners internally and externally). Our performance management process is deeply rooted in this philosophy. As we are building high-performing teams, it is important to understand that while we expect results, we also have expectations surrounding how we get to those results. Therefore, a performance management process will be initiated if an XDR or leader is not meeting their performance targets and/or is not adhering to their KPIs/SLAs. The idea behind our framework is to address issues promptly to ensure long-lasting success of the team members. The sections below will provide more details as to the performance management process on quota attainment as well as our Three Pillars and KPIs/SLAs for Inbound Leads and Outbound Account management. While regular coaching is expected on weekly 1:1s, informal performance management will be initiated if a ramped XDR has two consecutive months below 80% attainment (SAOs, Stage 1 XDR Net ARR or Stage 3 Net ARR). Once the XDR is informed, expectations will be: Should the XDR fall short of the targets above, a formal warning will be issued.\nAfter the formal warning is issued if the XDR falls short of targets again, additional disciplinary actions could be taken up to and including termination. As a business we understand that Stage 3 Net ARR is a metric that can take time to influence. We are viewing S3 attainment as an indicator of healthy pipeline generation. Two consecutive months below monthly quota attainment suggests potential issues. Stage 3 is a direct consequence of S1 Net ARR. Therefore, performance management will focus on what can be influenced by a BDR: Stage 1 Net ARR (not Stage 1 XDR stamped amounts, but real opportunity value: Stage 1 Net ARR) The process will however stay the same: once the BDR is informed, expectations will be: Should the XDR fall short of the targets above, a formal warning will be issued.\nAfter a  formal warning is issued if the BDR falls short of targets, additional disciplinary actions could be taken up to and including termination. The below apply for all inbound-related leads for both the SDR and BDR teams: In addition to the above, BDR team members are expected to: In accordance with the Time Off Policy, you need give your manager a heads up early of your intended time off so that they can help arrange cover for your tasks, if necessary. We want to help our team members being able to fully unplug from work during their PTO, while not having to worry about their workload or target attainment. Based on this, we have created this PTO Territory Planning Issue that you can use to strategize your work and be aligned to the GitLab value of being a Manager of One. To log a PTO Territory Planning request, please go to the Issue list on the SDR GitLab project here and choose PTO_Coverage_Template from the Description drop-down list. All of these requests are then managed through the board here. and all next steps and guidelines are on the issue description. At GitLab we have flexible working hours. This means that you can organize your working day as you like and are not expected to arrive and leave at a set time every day, but we do expect MQL\u2019s to be followed up within 1 hour (during business hours) so communication with your manager will be necessary if you plan to be out for an extended period of time. Managers will provide direction on the routing of leads during that time. With a prospect-facing role in Sales Development, do keep in mind when you are calling and emailing prospects: In short, working at GitLab means that if you start the day early you can take a long lunch break to hit the gym or go grocery shopping in the middle of the day when it\u2019s quiet, yet you can still do a full day\u2019s work around that and don\u2019t need to be accountable all the time, as long as you are available to call prospects and be available for prospect meetings during normal working hours for your region/territory."
    },
    {
        "title": "Marketing Strategy & Platforms",
        "url": "https://handbook.gitlab.com/handbook/marketing/marketing-strategy-and-platforms/",
        "content": "Our mission is to enable efficient operations and actionable analytics insights, working across all Marketing teams. Balance Short Term Focus & Long Term Goals. We will be disciplined yet stay nimble in resource allocation & prioritization.  Develop habits & make incremental progress Collaborate with & learn from diverse sources \u201cIf you want to go fast, go alone. If you want to go far, go together.\u201d \u201cThe most important function of the leader is to encourage everyone to see him- or herself as a member of the larger system, pursuing a common vision, holding common values, and cooperating with each other in an environment of mutual support and respect.\u201d \nFRED KOFMAN"
    },
    {
        "title": "Growth Direction",
        "url": "https://handbook.gitlab.com/handbook/marketing/growth/",
        "content": "The GitLab Growth section is dedicated to making it easier for teams to find value and increased efficiency within the GitLab platform. We work across stages within the product experience to make the product as easy as possible to adopt and use. The Growth section lives within Marketing & Strategy to ensure we\u2019re aligned in our go-to-market strategy and we\u2019re as efficient as possible in finding the right prospects, convincing them to become product users, and assisting in converting them into paying customers. Since the work within the section occurs within the product experience our engineering and user experience counterparts are within the Development division. This approach ensures that we have proper alignment on our priorities from a go-to-market and business perspective while ensuring our development team is set up for success to operate within the development division. The Growth team works cross functionally within the organization to increase user and business value. We ground ourselves in four core principles. Our core findings and experiment results are considered non-public information. Internal team members can reference the internal handbook growth page for a detailed review of our findings. Our vision is to make it seamless for teams to find, adopt, and discover value along with increased efficiency in the GitLab platform. This includes The growth division is currently grouped under the Acquisition team that contains a shared growth backlog while we actively hire additional team members to build out a activation team. The Growth section owns the following areas of the product experience. While we own these areas our work is not limited to these specific areas as the teams work cross-functionaly with other product and business teams to improve the user experience the most efficient way possible. Growth engineering handbook pages. Growth requires constant learning, and many compaines face similar challenges or go through similar journeys. At GitLab, we believe hearing from growth experts and practitioners with diverse background is the best way to learn, and we want to share that with the community as much as possible. Therefore, we started a growth Coffee & Learn series since 2020. Below is a list of exerperts we invited to share their wisdom with us. We appreciate their time and insights, note that some videos/notes are viewable by internal team only. We use Growth PTO shared calendar to ensure all time off events are visible to everyone on the Growth team. To enable syncing your PTO from Time Off by Deel with this calendar follow these instructions: Congratulations! \ud83c\udf89 From now on all your PTO events will be automatically synced to our shared calendar!"
    },
    {
        "title": "Developer Relations",
        "url": "https://handbook.gitlab.com/handbook/marketing/developer-relations/",
        "content": " Welcome to the GitLab Developer Relations Handbook Developer Relations (short: DevRel) operates at the intersection of technology, community, and advocacy, serving as the voice and ears of GitLab in the wider tech world. Their core mission revolves around nurturing and sustaining a vibrant, engaged community of developers, contributors, and users. This involves a multifaceted approach that includes creating educational content, organizing events and workshops, developing programs, and providing platforms for knowledge exchange and collaboration. The team not only focuses on promoting GitLab\u2019s features and capabilities but also actively listens to and incorporates feedback from the community to inform product development and improvements. Developer Relations drives platform awareness and adoption by enabling GitLab customers, connecting through community, and engaging developers where they are. GitLab engages with more than 3000 developers every month on GitLab.com alone, and receives more than 250 contributions every month, giving us a unique level of influence in the DevSecOps space and helping accelerate our innovation. Our ultimate goal is to raise awareness of GitLab and drive customer success by winning the hearts & minds of developers through best-in-class technical enablement and an active community of contributors. In Developer Relations, we align our mission and vision with the company\u2019s three year strategy. We believe that everyone can contribute. To help GitLab reach this goal, we aim to double outreach and engagement, strengthen our community presence, and support a healthy community of contributors. Ultimately, these goals boost awareness, adoption, and power our dual flywheels. Our operational strategy is documented in our internal handbook but is classified as confidential due to business sensitivity, customer impact, and to foster a psychological safe environment for our team members. Below you can find our strategic plans that are open to the wider community and where the Developer Relations team welcomes collaboration. Teams within Developer Relations are reachable in these Slack channels: Community engagement: Community platforms: Content: Organization: If you are working on changes to the company, product, or pricing that are expected to have a meaningful impact on members of the wider GitLab community or the GitLab brand, we encourage you to use the label ~Community Interest so that the Developer Relations team can represent the interests of the wider GitLab community in the planning process. All members of the Developer Relations team should be subscribed to this label in both the gitlab-com and gitlab-org projects. Our team has a few weekly events that we use to stay connected and aligned on our work: We use team-wide calendars for collective notification and to manage team logistics and events. Additionally, specific teams within Developer Relations may maintain calendars specific to their programs (such as the Developer Advocate team calendar). Every quarter, we work on team Objectives and Key Results (OKRs) that align with company OKRs. OKRs we seek to align with: For each quarterly objective and key results, the Developer Relations team will assign a DRI. For our team, we have responsibilities that build upon the GitLab guidance on achieving and updating. Typically, People managers are the DRIs for objectives while ICs are the DRIs for key results. Objective DRI Responsibilities Key Results DRI Responsibilities To update our list of current OKRs: OKR Health: We use issue health indicators to help people understand an OKRs status at a glance. These status indicators are: Progress: Edit the progress attribute in KRs to indicate how much progress has been made. The Developer Relations team monitors several Key Performance Indicators and related Performance Indicators. GitLab Developer Relations team logos can be found in .png and .svg formats by searching for gitlab-devrel-logo in Google Drive. Learn more on the Developer Relations budget page In alignment with GitLab\u2019s core value of Diversity, Inclusion, and Belonging (DIB), the Developer Relations team seeks to purposefully design DIB into every facet of its programs and operations. We seek to foster DIB at GitLab and within the wider GitLab community. As DEI (Diversity, Equity and Inclusion) allies in the open source community, GitLab\u2019s Developer Relations team is committed to the following DEI efforts within our contributor communities: This section is meant to document tips and best practices that the Developer Relations team, and GitLab team, should keep in mind as they plan events and activities. We take inspiration from the great work being done by other communities. Some of the communities who we take inspiration from: The Community Learning Pathway is a course built to educate the community on how the Developer Relations team works, the different community programs and how to contribute the GitLab. Members of the Community and GitLab team members who complete the course will earn a badge. The Community Building Reading Group is for GitLab team members interested or engaged in building communities at GitLab. Hosted by members of the Developer Relations team, this learning-focused group examines various principles and practices related to imagining, designing, building, nurturing, growing, and supporting communities. Potential topics of study and discussion include: By collaborating as part of this group, members aim to: Any GitLab team member interested in community-building practices is welcome to participate in and contribute to the group. Unlike typical GitLab book clubs, this reading group: The reading group operates on a cadence group members determine together. Group members also collectively determine the material\u2014for example, a book chapter, a white paper, a research report, a presentation recording, or a case study\u2014they\u2019ll cover each week. As they read, group members share notes and impressions asynchronously via files stored in the Community Building project. When they have completed a selection, they polish these notes and update the Community Building wiki accordingly. In each cycle, a group member (typically the person who proposed the materials) acts as \u201cleader.\u201d Group leaders pose some basic discussion questions or thought-generating insights to guide the group\u2019s reading and frame its discussion. Group members meet at regular intervals for live, synchronous discussion of the reading materials (suggested time for discussion meetings: 45 minutes). Recordings of these meetings are available, but because discussions often contain personal details and sensitive issues, these recordings are only access to GitLab team members via an internal Google Drive. The Community Learning pathway is a course on the GitLab Learn platform, designed to educate GitLab team members and the community about GitLab\u2019s community programs, our commitment to the community and how to engage the community team. At the end of the course, learners earn a badge showing they have a good understanding of the GitLab community and how to engage. At the end of this course, we expect team members to: A new member can be added to the Core Team at any time through the following steps: Due to time differences, and other commitments, the Core Team meets asynchronously on the third Tuesday of each month.\nCall logistics/agenda/notes for the meeting are available on the Core Team issue tracker.\nAll meeting recordings are available at the Core Team meeting Playlist. Events are a great way for GitLab and the Developer Relations team to connect with customers\nand the wider GitLab community. The Developer Relations team regularly attends the following event types: GitLab\u2019s Developer Relations team regularly organizes virtual events including GitLab Hackathons\nand community office hours.\nWe also support in-person contributor days and community-organized meetups. Many of these activities\nare organized through the GitLab network page on Meetup. The Developer Relations team works from issues and issue boards. If you need our assistance with any project, please open an issue and use one of the main program labels anywhere within the GitLab repo. Merged updates to the handbook are posted to the #community-relations-fyi Slack channel. MRs must be tagged with the Developer Relations labeled before being merged in order to be posted to Slack. When you create a new MR, be sure to add the label upon creation so this step isn\u2019t forgotten. If you are assigned to merge an MR, ensure the label is added prior to merging. The purpose of this page is to outline the UTM strategy of the Community team and how it drives dashboards of the team in Sisense. This strategy is designed inline with Marketing UTM Strategy and reviewed by the Marketing Strategy & Analytics team. CommunityApps makes using working with this UTM Strategy easier, you can learn more in the CommunityApps User Guide.  These are the tools the Developer Relations team is the DRI for: The team uses a set of contact e-mails, generally one per program, with additional specialized e-mails. They are used to enable contributors to directly contact the team outside of GitLab.com and for notifications related to each one of our programs. Program e-mails: Specialized e-mails: At GitLab our mission is to change all creative work from read-only to read-write so that everyone can contribute. In order to fulfill this mission, we need to create both the tools and platform to enable this change and a community of contributors who share our mission. We are just getting started in building the GitLab community and we encourage everyone to contribute to its growth. There are many ways to participate in the GitLab community today: contributing to an open source project, contributing to our documentation, hosting your open source project on GitLab, or teaching your colleagues and collaborators about the value of Concurrent DevOps. The Co-Create Program is designed to provide our customers with the necessary support and resources to drive innovation together. This could involve developing new features, enhancing existing ones, or fixing bugs. To ensure effective use of this collaborative period, GitLab will co-locate 1 engineer for 1 week to kick off the co-development efforts. Before the onsite engagement, Developer Relations will conduct an interactive workshop to identify collaboration opportunities, ensure their engineers are adequately enabled to contribute to GitLab, and ensure all required legal requirements are met between our customer, and GitLab. The GitLab Community Apps is a suite of tools that enables the community and other teams at GitLab measure the impact of activities, programs or campaigns they run. The applications are built and currently maintained by Abubakar Siddiq Ango and MRs are welcome! The tools available in the suite are described below. Campaign Manager brings together UTM tracking, URL shortening & QR Code, allowing teams at GitLab to manage campaign links from an easy to use application. Features of the tool include:"
    },
    {
        "title": "Corporate Communications Handbook",
        "url": "https://handbook.gitlab.com/handbook/marketing/corporate-communications/",
        "content": "The mission of GitLab\u2019s Corporate Communications team is to amplify GitLab\u2019s product, people and partnerships in the media, via social media channels and through award wins. This team is responsible for global public relations (PR), social media, and executive communications (speaking). Corporate Communications Job families can be found here. This page is the single source of truth for corporate communications objectives/goals, contact information, messaging, PR/social media guidelines, approval processes, strategy and more. The GitLab Corporate Communications team is responsibility for the following activities and communications channels: As detailed in GitLab\u2019s public CMO OKRs, GitLab\u2019s corporate communications team seeks to elevate the profile of GitLab in the media and on social media, positioning it as a pioneer of remote work, increasing share of voice against competitors, and securing key narratives in feature articles. FY23 Corporate Communications Plan The Corporate Communications team measures results using the following north star metrics: Social Media: Media and Awards: Speaking: Please visit our Get In Touch page for contact details. Please use the #external-comms Slack channel and please follow the Communication Activation Tree. To mitigate a potential incident and/or if an incident has occurred, please follow the incident communications plan. Speaking on behalf of GitLab via a public channel such as a media interview (in-person or via phone), on a podcast, in a public issue on GitLab.com, on a forum, at a conference/event (live or virtual), in a blog or an external platform is a significant responsibility. As of September 13, 2021, all GitLab team members who speak with the media are required to first complete the GitLab Media Training and all GitLab team members who speak externally at a conference or event are required to first complete the GitLab Speaker Training. Both of these trainings have been designed to keep us aligned in representing the company following GitLab\u2019s SAFE framework. Being mindful of how you say things within open issues, on social media, or at a booth during an event will help keep the company SAFE. We all represent the company. Note, any spokesperson who violates the Speaking on Behalf of GitLab guidelines will have their spokesperson privileges revoked. If you are unsure whether or not you should accept a speaking opportunity, create a public issue to gather feedback/communicate a message, or provide comments representing GitLab please see below for guidance. Being a designated company spokesperson on topics ranging from Company background to Remote Work to DIB to technical topics like CI/CD or security practices is a responsibility that should be taken with the utmost seriousness. While each team member represents the company and GitLab\u2019s mission is to ensure \u201ceveryone can contribute,\u201d it is important to hone our list of designated company spokespeople.\nSpokespeople are SMEs, seasoned in their role (minimum 6 months at the company) and positioned to be at the company for a while for consistency (exceptions may apply). Spokesperson Criteria: Watching the above training courses are very important to ensure we are consistent with company narratives and messaging and key points are effectively delivered publicly. If you are new to being a spokesperson for GitLab, the Corporate Communications team may ask you for video examples of past speaking engagements (events, webinars, tutorials, etc.) to assess the level of speaking comfortability. If you are new to speaking externally and/or do not have a video asset, the team may conduct a 15 minute practice interview to quickly assess if you meet the above criteria. Media coverage is common and expected for growing companies. GitLab\u2019s transparent nature has led to some positive media coverage and community engagement on social channels and forums; however, it has at times resulted in negative criticism of the company \u2014 both valid and invalid. This is common and is expected to continue as the company continues to mature. To stay up-to-date on media coverage, flag any articles or podcasts you see or ask questions, please post in the #newswire Slack channel. Due to GitLab\u2019s unique company transparency and mission that everyone can contribute, team members may be approached by reporters, podcasts hosts, etc. to comment on the company and/or conduct interviews. If you are asked to be quoted or to provide commentary on any matter as a spokesperson of GitLab, please provide detail of the opportunity to the Corporate Communications team in the #external-comms Slack channel before engaging. The Corporate Communications team may ask you to open an issue for further evaluation and engagement for the opportunity. While team members may have established relationships with reporters, podcasts hosts, etc., engagement on any matter related to GitLab should go through the Corporate Communications team. You can reach the team in the #external-comms Slack channel before engaging. In the event that a media member, editor, or publisher offers a draft or preview of an article where you are quoted, please allow the Corporate Communications team 5 business days to review by posting in the #external-comms Slack channel. The Corporate Communications team will ensure that the appropriate GitLab team member(s) review and approve in a timely manner. If you are asked to speak on behalf of GitLab at an event, on a webinar or at a Meetup (and you are not already a member of the GitLab speakers bureau), please reach out to the Corporate Communications and Developer Advocacy teams to ensure that the opportunity aligns with GitLab objectives and key narratives. Inquiries should be initiated in the #external-comms Slack channel before you accept the speaking invitation. Please allow 5 business days for evaluation. Opening an issue under Corporate Marketing to further collaborate on the opportunity may be requested. If you are planning to submit an event CFP or request to participate as a speaker for a webinar or Meetup (and you are not already a member of the GitLab speakers bureau), please ensure the opportunity aligns with GitLab objectives and key narratives. If you are unsure, please reach out to the Corporate Communications and Developer Advocacy teams. If accepted to speak, please take the training \u201cBest practices for public speaking,\u201d notify the Corporate Communications and Developer Advocacy teams via the #cfp Slack channel w/link to the accompanying issue and ensure the teams have 7-10 business days to review your final presentations. If you have an opportunity (media opportunity, podcast, video, webinar, fireside chat, conference, meetup, etc.) that you would like to invite an e-group member to participate in, please create a GitLab issue within the Corporate Marketing project using the E-Group External Communications Request Issue Template. When possible, please plan 90 days minimum from time of open issue to time of speaking opportunity for preparation. Once the issue is created, please post in #external-comms Slack channel for further assistance. Please allow the Corporate Communications team 5 business days to review your request. When speaking at an event, on a webinar or at a Meetup, if you are open to being a spokesperson with media or creating a contributed article on your talk, reach out to the Corporate Communications team via the #external-comms Slack channel. For ways to amplify your speaking opportunity, check out the \u201cHow to make your content work harder for you\u201d presentation. We know GitLab team members are multi-faceted and there may be opportunities to speak publicly that don\u2019t overlap with your role at GitLab. In these cases, it is okay to do that assuming the opportunity will not be in conflict with GitLab\u2019s Code of Business Conduct & Ethics. In these instances, it\u2019s necessary to keep your role at GitLab and affiliation with the company separate from the presentation. Additionally, you should not use GitLab branding, resources, or time allocated to your work at GitLab to prepare or deliver your presentation. Please add \u201cthese views are my own\u201d to your comments, presentation, or social media. If you\u2019re considering a speaking opportunity, which includes participating in podcasts or developing your podcast, that could be perceived as being associated with GitLab even if it is not, please share the opportunity with your manager and #external-comms for review before accepting it to avoid any potential conflicts. If you are staffing the GitLab booth at an in-person or virtual event, you are representing GitLab. Please follow the company\u2019s SAFE framework when engaging with booth visitors and event attendees. Analysts For analyst research-oriented requests, please consult the Analyst Relations handbook section and direct questions to the #analyst-relations Slack channel. Media For media inquiries that are more research oriented, please share the request and associated context in the #external-comms Slack channel. An example of a research-oriented request is an invitation to participate in an interview to share more about one\u2019s day-to-day role at GitLab, specific tools teams use on a daily basis, how a team interacts and collaborates with other teams, specific products that are most helpful to them in their workflow, etc. The Corporate Communications team will evaluate for reach, awareness, merit, and potential conflicts of interest, and advise on a case-by-case basis. Honorariums If the request has an honorarium offered (for example, a gift card or cash amount awarded for participation), please go through our Approvals for Outside Projects & Activities process to ensure a conflict of interest is not present. You may be approached by external parties seeking to provide payment for a GitLab team member\u2019s time to discuss GitLab remote practice to help them guide a client. While this is not a traditional research or speaking opportunity (i.e. event or Meetup) it is still considered an external speaking opportunity. We ask that team members verify who they are speaking with to make sure the source is indeed valid and the request legitimate. Remember that you represent GitLab and if any question makes you uncomfortable or gives you a pause on whether you should answer, we recommend that you do not answer. Questions regarding GitLab financials, sales, compliance, executives or where the company is heading should adhere to the SAFE framework and be treated with caution, as should anything which is not already available in the GitLab handbook. We encourage all team members to be company evangelists and this can be done without sharing Not Public information about GitLab. Please consult the Social Marketing Handbook for guidelines on how to represent GitLab on your personal social media platforms. If you are contacted on a social media platform and asked to share/retweet or provide commentary as a spokesperson of GitLab, feel welcome to provide detail of the opportunity to the social team in the #social-media Slack channel. You are welcome to write about your experience as a GitLab team member on your personal blog or for other publications and you do not need permission to do so, as long as you follow the company\u2019s SAFE framework. If you would like someone to check your draft before submitting it, you can share it with the Corporate Communications team who will be happy to review. Please post it in the #external-comms Slack channel with a short summary and allow 5 business days for review. Posting in and discussions occurring within a public GitLab issue should follow the same guidelines as if you were posting about GitLab on social media, engaging with community members in a forum or conducting an interview with a media outlet. You are externally representing and communicating on behalf of GitLab. When representing and/or communicating externally on behalf of GitLab, please follow the SAFE framework. Being mindful of how you say things within open issues will help keep the company SAFE. We all represent the company. GitLab\u2019s Corporate Communications (PR/Social Media) team is the DRI (directly responsible individual) for the GitLab Master Messaging Document, Guide on Speaking About Remote work at GitLab and company Fact Sheet. These documents are regularly kept up-to-date and should be the single source of truth for all company information used for media interviews and award submissions. GitLab\u2019s Corporate Communications and Product Marketing teams are the DRI (directly responsible individual) for the GitLab Master Company Deck. This deck is regularly kept up-to-date and should be the single source of truth for all company information used for external speaking presentations and engagements. Some media outlets (including these ~14,000 newspapers and magazines) require GitLab to hold a license to share (and do the various other things noted below with) extracts, quotes or headlines of print and online articles - both internally (eg. via slack, email or in confidential GitLab issues) and externally (eg. on GitLab\u2019s social media channels). The sharing of bare hyperlinks to articles (without extracts, quotes or headlines) does not require a license. A license may be required to do any of the following with extracts, quotes or headlines of print and online articles: If you are interested in doing any of the above with a media article (or an extract, quote or headline) internally or externally beyond just sharing the bare hyperlink, please reach out to the Corporate Communications team via the #external-comms slack channel before proceeding to confirm if a license is required. The communications team develops training and certifications for GitLab team members to build up their practices when representing the company with the media, at an event, or on social media. Visit our training page and consider taking a communications training to learn more about: This process allows us to determine the best channel to communicate different types of updates and news to our users, customers, and community. Please follow the instructions below to request a formalized announcement around any of the following: Please submit a request via an announcement issue template in the Corporate Marketing project before opening an issue for a blog post, for example. In the issue template, you will be able to provide additional information on the proposed announcement. As a general guide, below the team has outlined three levels for announcements based on the type of announcements and suggested communications activities associated with each tier. The Corporate Communications team will assess your request in the issue and determine how to proceed. If you are requesting a joint announcement and you are not part of the Partner Marketing team, please ensure you ping them on your issue. If your request for an external announcement meets the Level 1 criteria, please open an issue using the press-release-template issue template. The issue template will prompt you to fill in logistics details, such as timing, and answer the following questions: Any use of GitLab\u2019s name, brand, or logo requires prior email approval by GitLab according to the process outlined below. If you receive a vendor request for GitLab to act as a reference (case study, blog post, GitLab logo on their website, etc.) for the product, service, and/or technology that your GitLab team is using, please refer to the process outlined on the Brand Strategy team\u2019s handbook. If the vendor requests a press release, please refer to the Corporate Communications handbook page. GitLab\u2019s corporate communications team is the DRI (directly responsible individual) for writing all press releases that are issued by the company and routing through the appropriate approval process. If you have questions about the press release process or how to make an announcement request, please reach out via the #external-comms Slack channel or submit an announcement issue template (see Requests for Announcements section above). For partner-led blogs or press releases, please refer to the partner PR request section of the handbook. Note that due to the volume of requests, GitLab rarely writes joint press releases. If you would like to use a GitLab public issue to communicate an update to customers/users or gather feedback from customers/users, please complete the announcement issue template with the details of the specific request and draft of the issue announcement copy. The Corporate Communications team will review the request details and issue copy, as well as recommend other relevant teams (product, product marketing, legal, etc) to loop in for review before posting the public issue. In some cases, it may be more appropriate and efficient to communicate with users in a public issue. Below are some examples of the types of communications that may suit an issue as opposed to a blog post, press release, or email, for example: Using a public issue has a few advantages: Below are some examples of using an issue to communicate something with GitLab\u2019s audience. Feel free to use these examples as a template for your issue. At a minimum, your issue should: We can spread the word about a public issue in the same way that we would promote a blog post or press release: We can promote other items this way as well: for example surveys, landing pages, or handbook pages. GitLab team members will find embargo and announcement guidelines in a confidential issue (must be logged in to access). This answers the following questions. If you would like to propose an award for consideration by the Corporate Communications team, please start by creating an issue, using the pr-award-submissions issue template. The template will prompt you to provide a few key pieces of information, including deadlines, fees, and a brief description of the award. Please flag awards as soon as possible \u2013 ideally, six weeks ahead of the deadline. This helps the PR team create and stick to a timeline, and allows for the necessary stakeholder and legal reviews. As a standard practice, we don\u2019t issue press releases for award wins. However, there are many ways to spread the word about your recognition, both within GitLab and externally. The publication that arranges the award will typically conduct its own promotion cycle. The accolade will be shared on its website, social media platforms, and in some cases, will be presented as part of a virtual or in-person event. In addition to the publication\u2019s promotion, other recommended mediums for promotion include submitting a blog post request and sharing the accolade via GitLab\u2019s social media channels. Internally, we share the recognition in our #whats-happening-at-gitlab channel with links to GitLab social posts, as well as posts for our team members to share on their own social media accounts. We also share award wins in our monthly newsletter. (Coming Soon) (Coming Soon) description, twitter_image, and twitter_image_alt would be the three, net-new tags needed to be custom to every single release. twitter_creator and twitter_site would be static with the value \u201c@gitlab\u201d. When you have added a press release, be sure to update the index page too so that it is linked to from /press/#press-releases. (Coming Soon) The Corporate Communications and Developer Advocacy teams want to enable everyone to contribute and spread the message about GitLab, DevSecOps, AI, and cloud-native to the entire world. We are happy to help speakers in any way we can, including public speaking coaching and building out slides. Below you can find some resources for becoming a speaker, finding an event, submitting a talk, and putting together the presentation and speech. \ud83e\udd1d These steps are required. The Corporate Communications and Developer Advocacy teams are happy to help."
    },
    {
        "title": "Sales",
        "url": "https://handbook.gitlab.com/handbook/sales/",
        "content": "The GitLab Field team includes multiple functions: Enterprise Sales, Commercial Sales, Customer Success, Channel Partners, Alliances, Field Operations. The Sales team is led by the Chief Revenue Officer (CRO). Reporting into this individual are the: The Sales team is organized into Large, Mid-Market, and SMB segments. (Descriptions of Sales segments can be found in the Field Operations Handbook - Segmentation section.) The people working with each segment and their quota are: The GitLab Sales team embodies our CREDIT values in every aspect of our work. Specifically, we constantly work to overperform and achieve strong results. We prioritize efficiency in our processes and operations. We succeed because of transparent, cross-functional collaboration. We are committed to hiring for and celebrating diversity, and we strive to create an environment of inclusiveness and belonging for all. And, we embrace a spirit of iteration, understanding that we can always improve. For information regarding the tech stack at GitLab, please visit the Tech Stack Applications page of the Business Operations handbook where we maintain a quick reference table of who should have access to various tools and the designated owner for each to contact with questions. To see a full list of the tools that make up our tech stack, visit the Tech Stack Details page. Please use the Handbook as much as possible to document important information. You should also use the Handbook as a starting point for any questions. Read here for guidance on how we take notes on the GitLab Sales team. Dogfood GitLab whenever you can \u2013 to collaborate on ideas, gather feedback, organize projects, and more. When you have to use office applications, always use G Suite applications instead of Microsoft Office; for example, Google Sheets instead of Excel, Google Docs instead of Word, and Google Slides instead of Keynote or Powerpoint. Give the entire company editing rights whenever possible so everyone can contribute. Please avoid contacting individuals directly so that discussions can be available for everyone to review and learn from. We strongly encourage every team member to review the GitLab Communication Handbook page upon joining the team, and occasionally return to it during your tenure here as a refresher. (You can also get certified on communication at GitLab.) The Sales team works cross-functionally, both with teams within and outside of our organization. These teams include: The Customer Success department is part of the GitLab Sales function and partners with our large and strategic customers to deliver value throughout their journey with GitLab. See our Customer Success page in the Handbook for more details. The Inside Sales department is part of the GitLab Sales function and partners with the sales and customer success teams to deliver maximum value to GitLab customers throughout their journey with GitLab. See our Inside Sales page in the handbook for more details. These teams help accelerate GitLab\u2019s trajectory by connecting our business and customers to companies that can help compliment our product mission and/or drive customer adoption and usage of the GitLab platform. See our Channel and Alliances Handbook pages for more details. Sales Development Representative (SDR) - focused on inbound leads Business Development Represenative (BDR) - focused on outbound leads This team sits within the Marketing department and provides territory support to Sales team members through outreach, prospecting, and lead qualification. Key priorities include: See the Sales Development page in the Handbook for more details. This team provides technical support to GitLab.com and Self-Managed GitLab customers. For an overview of support levels based on plan tier, see the Support Page. The Support \u2192 Customer Success Manager (CSM) escalation process can be found here. During the sales cycle, potential customers who have questions that are not within the scope of Sales can have their queries escalated in different ways depending on the account size: We work with the Product team to help drive the GitLab Direction based on customer feedback and needs. When you hear of feedback or you personally have feedback, you are encouraged to comment within the issue, if one exists, or create your own issue on our Issue Tracker. When you have an organization that is interested in a feature and you have commented in the issue and added a link to the account in Salesforce, please follow the process outlined on the Product Handbook to arrange a call with the product manager and account to further discuss the feature request. If a client has a question or suggestion about a particular part of the product, find out which individual on the Product team you need to speak by looking under DevOps Stages on the Product stages, groups, and categories page. To standardize our messaging around Coronavirus and the impact it is having on our prospects and customers, please reference the below processes: GitLab\u2019s Export Control Classification (or ECCN) is 5D992.c. As a consequence of this classification, we currently do not do business in: Iran, Sudan, Syria, North Korea, Cuba and the Crimea, Donetsk, or Luhansk regions of the Ukraine. Sales KPIs are Not Public and documented in the Internal handbook. The Commercial Sales department is part of the overall GitLab Sales Division. We focus on delivering maximum value to SMB and Mid-Market customers throughout their entire journey with GitLab. Please ensure you read the Commercial Sales onboarding page. Sales Commissions is a part of Field Operations, reporting into Sales Operations. Our goal is to incentivize the field to close business, process commissions in an accurate and timely fashion to help make GitLab more successful. We aim to be viewed as a trusted business partner for Field Sales, Lead Generation and management. Quota setting and Compensation Design are led by the Go-To-Market Planning & Operations team. This team sits under Sales Strategy & Analytics, also a part of Field Operations, and work hand-in-hand with the Sales Commissions team. Our goal is to engender growth for the CRO org by setting ambitious but achievable quotas and motivating our team members to act in the best interests of the company and of our customers. Fireside chats are less formal than an interview but more structured than a typical GitLab AMA. The fireside chat series with key customers is meant to be informal yet structured chats between a moderator and their guest. In this scenario, the guest is a current GitLab customer or partner and the moderator is a member of E-Group or Senior Leadership. Contrary to its name, there is no fire or flames involved, and the term \u201cfireside chat\u201d was first used to describe a series of evening radio addresses given by U.S. President Franklin D. Roosevelt during the Great Depression. This page has been deprecated and moved to Business Operations Please see the Sales Handbook Definitions Document Every Account Executive regardless of segment or geo should have a plan for how they\u2019re approaching their patch. A sales territory plan is a workable plan for targeting the right customers and implementing goals for income and consistent sales growth over time. It\u2019s usually done annually and updated throughout the year. It can be used for plotting a specific geographical location, or for different industries, customer types and other segments. Please see the Internal Sales Definitions Document Please see the Sales Handbook Definitions Doc"
    },
    {
        "title": "GitLab Alliances Handbook",
        "url": "https://handbook.gitlab.com/handbook/alliances/",
        "content": "We invite organizations interested in becoming a GitLab Partner to APPLY NOW. \u201cTo go fast, go alone. To go far, go together.\u201d - Proverb At GitLab, we collaborate with well-respected, industry-leading\u00a0cloud, platform and technology providers across all major industries to deliver the best curated modern devops platform.\u00a0 Our partners are a critical element of GitLab\u2019s mission:\u00a0to enable our customers with modern software-driven experiences, and to ensure \u201cEveryone Can Contribute\u201d through a robust and thriving partner ecosystem that cultivates innovation and stimulates transformation. Together, we can help enterprises lead the digital transformation necessary to compete effectively in the market today. The commitment to helping customers and partners succeed - how we contribute our time, technology and know-how to improve the communities where we work and live and grow our business - is a journey that is transparent, ethical and honorable.\u00a0 We demand high performance and high standards from ourselves and our partners. We look forward to working with you - to build and deliver the solutions that delight customers. GitLab Team Members: Please visit the internal* Alliance Handbook Page for additional information. We are firm believers that partnership is the foundation from which collaboration and innovation is built upon. As a GitLab Alliance Partner, you\u2019ll have access to the resources, tools, and support you need to accelerate business growth providing greater customer value through solution offerings that are integrated and interoperable with GitLab. We recognize that not all partners have the same needs or goals, and as such, our program is designed with three Alliance Partner types in mind. Mutually beneficial value exchange drives mutual partner success. We believe these pillars ensure a more sustainable future. There are a variety of ways to partner together to develop solutions. Partner type, solution and/or services offering, and route to market are all considerations when determining the best option, resale or co-sell.\u00a0 Below are a few examples of how GitLab works with Alliance Partners to deliver consumable customer solutions. GitLab Alliance Partners are a key part of GitLab\u2019s commitment to the DevOps community. Alliance Partnerships help customers get more value by uniting the capabilities of our products and technologies to provide end-to-end customer solutions. The GitLab Alliance Partner Program provides partners with the following program benefits: Brand Recognition Solution Validation Sales & Marketing Alliance Partner Onboarding If you are interested in becoming a GitLab Alliance Partner, you can learn more on our Alliance Partner Onboarding page. License Requests Alliance Partners may be eligible for NFR (not for resale) licenses to develop and test integrations with GitLab. You can learn more about the NFR program here. Acquisitions If you are a Partner interested in inquiring about a potential acquisition of your company please visit our acquisition handbook."
    },
    {
        "title": "Commercial Sales",
        "url": "https://handbook.gitlab.com/handbook/sales/commercial/",
        "content": "The Commercial Sales department is part of the overall GitLab Sales Division. We focus on delivering maximum value to SMB and Mid-Market customers throughout their entire journey with GitLab. Please ensure you read the Commercial Sales onboarding page. Below is a list of resources considered highly valuable for continuous learning and development by Commercial Sales team members at GitLab. Note, that some of these resources are not publicly available, so consult a fellow teammate for access where necessary. When traveling please consider ROI of both any costs plus your time:\nIf you are going to an event you think first: Given the rough calculation above, you\u2019ve to be committed driving/booking enough Net ARR at the event prior to you going to the event\nNote: this doesn\u2019t mean you can\u2019t get travel approval without booking meetings. It means once you get travel approval it is on you to go get people to the event/meetings to create pipeline. The ultimate purpose of attending any GitLab field event is to gain insight and add value. Sid Sijbrandij, our CEO, talks about the importance of conferences and events here. He believes the main goal of GitLab team participation should always be to connect with our customers and prospects and not to solely attend presentations. Trip notes are our internal process for tracking and capturing this data. Trip notes are required for the entire Commercial Sales Team anytime a team member travels for the company while working at GitLab. We believe it would be fun and valuable if you also shared trip notes when you traveled for personal reasons; however, that is up to your discretion. Please follow the best practice process and use the trip note template as a format to prepare for your future trip. Customer AMAs: Meetings for GitLab team members with current customers that provide an opportunity to ask them about anything in regard to their experience with GitLab Customer Meetings: Sharing the best practices for conducting any kind of external meeting at GitLab Trip Notes: allows team members who attend field events to track and capture data in order for the rest of the team to gain insight Doing Business with Partners/Channels: Guidelines on how to work with partners and resellers in order to ensure value is maximized in these areas How to Handle New Customers After They Purchase: Best practices for handling new GitLab customers based on the scope of their purchase Technical Evaluation of Customers: How to properly evaluate a customer\u2019s current technical environment in order to create organizational alignment and prescribe how GitLab can best solve their problems For a complete list of our Give Back Projects and other Onboarding assignments our team is working on, please click the private link here. We have found following steps beneficial to make the process of time off easy for Sales and keep business continuity.  This does not serve as a replacement to the company wide Guide to Paid Time Off or add process for Sick Time Policy. This is the expanded approach to preparing yourself and the team for time off planned specific to the group. On the day before time off: Area Sales Managers have additional steps to consider before leaving for time off: Backup AEs are not required to: New team members should familiarize themselves with The Required 7. These are the 7 tactical skills required to be an excellent Commercial Sales Account Executive: It is a requirement for the Commercial Sales Team to tier their accounts using the fields on the Account Object. This helps prioritize the accounts to go after when prospecting for new or expansion. Please see below definitions specific to SMB and Mid-Market AEs. Commercial Sales: Account Ranking Training Clippet First, forecasting, down to even the opportunity level, is a routine exercise for accuracy, not motivation or aspiration. Each week on Wednesday it is required to update five values in Clari by close of business (5 PM) local time.\u00a0 This is Renewal Loss Best Case, Renewal Loss Best Case, Gross Net ARR Best Case, Gross Net ARR Commit, and Net 50/50.\u00a0 At this time, it is required to double-check pipeline cleanliness and always follow the close date conventions listed here. The three close dates: Example: It\u2019s April 23rd, a new business Mid-Market opportunity is identified for a company at 410 employees and growing at an unknown rate (unclear due to being an agency). The company completed their evaluation with a trial ending this month, there are defined problems initially trying to solve, with some people who have used GitLab before. A recording Chorus license is mandatory for all Commercial Account Executives. Our intent is to record customer calls for the following reasons: Follow instructions for using Chorus Scheduler As we continue to grow as an organization, developing our sales skills to deliver an impeccable sales experience is a critical component of the customer experience, either leading them to enjoy working with GitLab or not, depending on the quality of that experience. We\u2019ve created a program called \u201cProject 35\u201d to help you improve your selling skills. We are utilizing our largest opportunities for the quarter to hone in our selling skills with the goal of these skills being valuable on all other sales opportunities. As part of Project 35 we will be focusing on the following core selling skills: During a Project 35 call, The AE who is discussing their opportunity will answer the following questions: An Opportunity Consult (OCF) is an in depth, two-way conversation between the AE and the ASM to review the opportunity Command Plan. The AE should expect to provide the ASM with more detailed information about the Opportunity Overview fields, the customer\u2019s pain points and desired outcomes, challenges or gaps in qualification aligned to the MEDDPPICC opportunity qualification framework, articulate a Close Plan and identify the biggest opportunity risk(s) and action(s) to mitigate those risks. A Lightweight Deal Review (LDR) is a shorter (5-10 minute) deal review that is designed to identify gaps in the Command Plan and specific next steps. At the end of an LDR, an AE and ASM should have a plan in place to capture the information that is not in the Command Plan, and a specific plan of action on and before the next call. It is required that all opportunities above $10,000 (Mid Market) and $5,000 (SMB) in total amount (not Net ARR) will have a custom slide deck that is shared with the customer or prospect. The custom deck must be attached to the opportunity by pasting the deck link in the SalesForce field \u2018Link to Custom Pitch Deck\u2019 on the opportunity home page. This will enable Mid Market Account Executives and SMB Account Executives to capture critical account information. Additionally, this will facilitate selling on value rather than features. Effective ASM coaching of the why now, why do anything, why GitLab and specific next steps the Account Executive will take with the prospect/client. The goal of the red/green process is to accurately forecast which opportunities will close for each designated fiscal period (Month/Quarter). The red/green process is  meant to most acutely build skills around identifying the timeline that is most comfortable for the customer to close. Designating each opportunity that has a shot to close at the end of each fiscal period as either Red (not going to close before the end of the month), or Green (going to close before the end of the month), and updating manager notes with a defense of the color and a specific next step the AE will complete by the next check in (usually the next day). For context, a green account will have a \u201cwhy now\u201d that corresponds with a close before the end of the period.\n- The threshold (unless otherwise stated) for accounts that will be reviewed during Red/Green is:\n- SMB: $2,000 NetARR or greater\n- Mid-Market: $7,000 NetARR or greater Red/Green meetings are held the 15th (or closest non-weekend day prior to the 15th) of each month, and the last five work days of the month. Area Sale Managers should conduct R/G meetings live with each of their Account Executives. This discussion should not be held asynchronously. Checklist of items below in this order. Advance to next question once prior is confident Once Red/Green discussion is complete on the account, the ASM will enter notes in the \u201cmanager notes\u201d section of the opportunity to reflect the discussion and the immediate next step the account executive will take. Repeat the same process the following date for all accounts above the threshold. Hit the forecast we commit to and build better sales skills for our AEs and better coaching skills for our ASMs.\n- Ideal skills that need to be built are:\n- Understanding the concepts and execution around knowing the ideal timeline the customer wants to close.\n- Identifying pain and having customers understand both the negative impacts of not switching to GitLab as well as the realized positive business outcomes by switching to GitLab.\n- Building a time-bound mutual success plan with the customer based on the severity or the ability for the customer to devote resources to a project. At the first R/G meeting of the following period, the leadership team will submit their actual closed-won for the prior period as well as their final R/G commitment. Team will then discuss the reasons why each finished where they did and identify any items that led to variation from commitment. SMB Account Executives \u201cSMB AEs\u201d act as Account Executives and the face of GitLab for SMB prospects and customers. They are the primary point of contact for companies that employ between 1 to 99 employees. SMB Account Executives are designated into one of the following pod positions: SMB Account Executives in First Order will assist prospects in their evaluation through the first buying process. Depending on the account, the other three roles will be the customer\u2019s primary point of contact for any renewal and expansion discussions.  Collectively the team is responsible for working new business in their territory as well as handling the customer journey for new and existing customers. AMER SMB Pooled Account Executives are responsible for managing a subset of SMB customers who range from companies on day 1 of using GitLab, all the way to companies who\u2019ve used GitLab since their day 1. The Pooled AEs work collectively in a \u201cpooled\u201d account ownership model meaning customers are aligned at the team level and all AEs are equipped to help. Pooled AEs work with customers to evaluate product and plan expansion, making recommendations to ensure a successful renewal with GitLab based on their needs. Please read below and through the SMB handbook page for more information. Zendesk: Managing incoming requests received through support.gitlab.com The goal and focus of working Zendesk tickets for the SMB team is to help with upselling and renewals Within timezone (WIP), the Support team is responsible to take the lead on all incoming ZD tickets in the Upgrades, Renewals, and AR (refunds) queue. In off-hours, the SMB team will triage and handle any tickets which will breach during their timezone. Support will take the lead on all incoming requests in the queue and only forward to the sales owner when:  Note: if you need access to a system, open an Access Request GitLab Trials & Subscription Management Detailed instructions on how to handle problems with licenses and subscriptions can be found in these instructions and resources. More information about sales order processing can be found in the Business Ops handbook section. Midmarket Account Executives are the primary point of contact between prospective and existing customers of GitLab within a space defined as mid-market, which currently works with companies that employ between 100 to 1,999 employees. These GitLab team members manage the spectrum of project sizes, ranging from small fast growing teams in smaller agile organizations to complex enterprise projects advising on the journey with GitLab to achieve specific business outcomes. Mid-Market AEs work closely in tandem with the business development team and sales management to manage a broad book of business spread over a large opportunity value range and focus on exceeding client expectations. \u201cMM Key Accounts\u201d can be used to refer to MM Key Accounts First Order and MM Key Accounts Named collectively. MM Key Accounts are the sub-set of MM accounts with a higher LAM and potential LAM. The Commercial Sales Team follows the Account Ownership Rules of Engagement\nThis section provides step by step clarity on how to follow the ROE. Account will be organized into the following two categories: It is the responsibility of the Account Executive who owns the account to qualify how many employees the account has prior to February 1st.\nAccounts who have less than 100 employees on or before February 1st will be owned by SMB for the fiscal year\nAccounts who have 100 or more employees on or before February 1st will be owned by Mid Market for the fiscal year Accounts will be separated into the following categories For sales assisted first orders, it is the responsibility of the account executive who conducts the initial discovery with the prospect to research and qualify the number of employees and headquarter location for the account.\nIf the account has less than 100 employees the account will be managed by SMB for the remainder of the fiscal year\nIf the account 100 employees or greater the account will be managed by Mid Market for the remainder of the fiscal year\nIf the account has greater than 500 employees or greater than 100 LAM dev please see the Rules of Engagement Between MMKAFO and Mid-Market Territory for FY \u201823 for proper lead routing For web direct first orders we understand there may be a degree of differentiation of actual employee count versus what our systems capture based on the tools utilized to enrich data. It is the responsibility of the Account Executive who owns the first order to identify the correct number of employees after the web direct first order and ensure that the employee count is not \u201cwholly wrong\u201d. Wholly wrong is used only for accounts that upon initial assignment are assigned by automation i.e. no team member reviewed them at first transaction. Wholly wrong is defined as the following\nMid Market owned accounts with less than 80 employees\nSMB owned accounts with greater than 120 employees If an account is wholly wrong, it is the responsibility of the account owner to chatter @sales-support to reassign the first order and the account to the correct segment. If an account is not wholly wrong but above or below the segment line (respectively) is it the responsibility of the account owner to chatter @sales-support to flag the account to move to the appropriate segment at the beginning of the following fiscal year. All accounts that are not researched or identified as being assigned to the wrong segment will be reassigned. If the AE qualifies this and then keeps it, this can lead to disciplinary action. As part of the qualification process tt is expected to qualify the location of company headquarters and employee count so we can best support the customer. It is not acceptable to qualify location and employee count in a manner that jeopardizes the customer experience. If you are unsure, always tag your manager in chatter to review the data before involving the customer. For all accounts that are in SalesForce.com as of February 24, 2022 the Mid-Market Key Accounts First Order team will own all accounts that are: To avoid confusion the logic is [1 AND 2 AND (3 OR 4)]. Note: If an AE suspects that the employee count or potential user count is not accurate in our data sources, it is the AEs responsibility to uncover the employee count and potential user count during the discovery phase. If an account is identified to belong to either territory or First Order and the other party continues to work the lead without doing proper due diligence, the account will be reassigned to the appropriate party. Co-selling is the responsibility of both the Account Executive and their Area Sales Manager to join sales calls together. This is to ensure the best client/prospect experience, along with jointly finding the highest potential within that account.\nArea Sales Managers have an expectation to log a minimum of 5 co-selling calls per rolling 7 days, although we are aiming to achieve closer to 10-12 calls over a rolling 7 days. The GitLab partner network is ready to work with GitLab Account Executive\u2019s in order to extend the customer selling and services capacity offered by Commercial Sales. Channel\u2019s approach to this is called Partner Co-selling and working with Partners involves building a simple, clear, mutual customer opportunity plan establishing \u201cwho will do what, when?\u201d. GitLab has a mature Partner network with good coverage of GitLab-trained Sales and Technical resources. There are a few ways in which AEs will work with a customer including a Partner. After the first transaction is closed by the MMKAFO team, the First Order AEs are responsible to kickstart the handover process. Below are the responsibilities of the Mid-Market Key Account First Order team and the Mid-Market Key Account Named team. When to Pass an Account to Named / Territory\nMid-Market First Order AEs will own an account until the customer has a working license. Once this happens, the handover process will commence. First Order AE Responsibilities Named/Territory AE Responsibilities 99 LAMDev for Key Accounts\n->49 LAMDev for Territory Accounts This pilot program is for Commercial team members interested in learning more about Sales management and building foundational leadership skills. This program is designed to give team members: The program will run for a total of 8 weeks;  each week focusing on a new topic. See the proposed topics by week for the pilot program: The GitLab Commercial department expects all Team members to uphold the highest standards of moral and ethical behavior in harmony with GitLab\u2019s CREDIT values. Engaging or promoting activities that are inconsistent with GitLab\u2019s values is not acceptable. It is expected that Team members who are enrolled will uphold both stated and inferred values of working at GitLab. Items include but are not limited to: Additionally, it is our expectation that if participating in the program, team members will make their best effort to attend meetings and learning activities. If they are unable to attend, participants should give the facilitator as much advance notice as possible. If participants are not present in the course, they will be removed from the program. Who is eligible to participate?\nAny Commercial team member that is in good performance standing (not currently on a performance or behavioral warning) and has been in their current role for over 3 months.  We will be selecting 12 participants for this first cohort. It is our itention that this program continue after the first pilot program to continue to give Commercial team members a chance to grow their skills."
    },
    {
        "title": "Customer Success",
        "url": "https://handbook.gitlab.com/handbook/customer-success/",
        "content": "The Customer Success department is part of the GitLab Sales function who partners with our customers to deliver value and positive business outcomes throughout their journey with GitLab. The team can be reached in Slack channel (internal only). To deliver value to all customers by engaging in a consistent, repeatable, and scalable way across defined segments so that customers see the value in their investment with GitLab, and we retain and drive growth within our enterprise customers. The \u201cCustomer Success Vision Page\u201d provides the long-term view of company wide success to which the customer success will be building in partnership with the value centers of the GitLab organization (i.e., Marketing, Sales, Product/Engineering, Support, Finance, and IT). Our large and strategic customers are in need of an ongoing partnership that combines expert guidance with flexibility and adaptability to support their adoption and continuous improvement initiatives. These customers expect that partner to provide a streamlined, consistent and fully coordinated experience that encompasses the full span of their needs as well as the fully lifecycle of the relationship.\nNeed to focus on 4 main areas in order to grow in our existing accounts as well as land large and strategic: Opportunity to improve the overall awareness of GitLab in order to promote and evangelize our brand and solution in a meaningful way to provide big business impact to our customers so that they believe in our vision and strategy. Ensuring paying customers are successful in their onboarding in order to gain adoption and get the most out of our platform and remain happy, paying GitLab team-members and brand advocates. Collecting and making use of customer data and insights is key to customer success. It\u2019s important to do more with data and when necessary share back with customers, which in turn helps and encourages our customers to improve and drive adoption. Utilizing built-in monitoring instrumentation and a scalable HA architecture, the Customer Success team helps ensure implementations of GitLab are operating at peak performance as organization scale and adopt more features. See the Playbooks Page Terrain Mapping discovery engagements provide customers with the benefit of GitLab\u2019s experience with DevOps methodologies, Git, GitLab, CI, CD, and monitoring by brainstorming a high level, first draft discovery of the elements of a success plan to address various challenges. They are also mapped to professional services that can help with some of the elements identified in the engagement. See the Terrain Mapping Engagements Page CSMAE Decision Tree - internal only The account team is comprised of the Strategic Account Executive/Account Executive, Solutions Architect (Enterprise), and Customer Success Manager. More information about the account team SA owns 1) pre-sales technical evaluation and relationships prior to the initial sale and 2) tier upgrades and new business units (i.e., connected new) within an existing customer. CSM owns 1) post-sales customer relationship and 2) license upgrades within an existing customer. More information on the transition and ownership between Pre-Sales and Post-Sales As a Customer Sucess team member, it is important to be continuously learning more about our product and related industry topics. The education and enablement handbook page provides a dashboard of aggregated resources that we encourage you to use to get up to speed. CSM-Created, Enablement Focus: CSE-Created, Enablement Focus: Visit this page for more info on using Salesforce within Customer Success. Visit this page for more information on using Gainsight within Customer Success. Outside of Engineering the Customer Success team has the largest concentration of tooling development capability. The team has unique needs that can\u2019t always be solved by GitLab\u2019s single DevOps platform. However, it is important to dogfood and avoid dogfooding anti-patterns. As a result the Product organization heavily weights internal customers when considering prioritization. If you are considering building tooling in support of Customer Success priorities outside of GitLab, please follow the dogfooding process. In an effort to keep AWS spend down, initiatives are being taken to automatically clean up our AWS account. This account is primarily used as a proof of concept for IaC and creating demos for GitLab customers. An automated cleanup script is currently being tested that will tag, shutdown and delete old resources as they are no longer needed. The automation will: By customer or internal request, we sometimes develop tools to automate certain GitLab tasks using the API. The resulting tools and scripts are publicly available for everyone to use and contribute to in the GitLab CS Tools group.\nNote : Those tools are not supported by GitLab Support. Community of Practice are cross-functional groups of SME\u2019s (or aspiring to be!) within the CS organization dedicated to a topic within GitLab or the broader DevOps space. The goal is to build assets, best practices, demonstrations, and share experiences we learn from prospects and customers. In turn, CoP will build broader technical depth within our CS organization to better advise our customers and influence our product roadmap. Anyone can establish a Community of Practice, and anyone can be a part of one. To be efficient and transparent, we have set guidelines on how Communities of Practice should operate. Customer Success team members maintain a FAQ to keep questions customers ask documented in a place where everyone can view and contribute to. Customer Success has a few standing meetings: The different groups within CS also have standing meetings, including meetings for the Customer Success teams and Renewal Managers, regional groups, and social calls. The APJ Customer Success department is part of the GitLab Sales function under the WW Customer Success organisation who partners with our large, mid-market and strategic customers to deliver value throughout their GitLab adoption in the code development lifecycle. The team can be reached in WW Customer Success Slack channel (internal only).  Further to that, the APJ Customer Success team also communicates via our Slack channel (internal & private only) amongst themselves. To deliver value to all customers by engaging in a consistent, repeatable, scalable way across defined segments so that customers see the value in their investment with GitLab, and we retain and drive growth within our enterprise customers. View the Customer Success homepage for additional Customer Success handbook content. Customer Success playbooks assist in selling, driving adoption, and ultimately delivering more value to customers via GitLab\u2019s DevOps platform. The below playbooks will include original content as well as links to other parts of the handbook. Procedure: Each Playbook contains the outline of steps to position, apply discovery questions, lead value discussions, and drive adoption (CSM only). The will be driven and tracked via Gainsight. Team members in Customer Success face questions from customers every day about a variety of topics related to GitLab. In an effort to maintain GitLab\u2019s values of collaboration, results, efficiency, Diversity, Inclusion & Belonging, iteration, and transparency, we are collectively updating this FAQ as a Customer Success team with questions received by customers, in the hope to help other GitLab team members (both iin and out of Customer Success), our customers, and our wider GitLab community. Customer Terrain Mapping Engagements provide customers with the benefit of GitLab\u2019s experience with DevOps methodologies, Git, GitLab, CI, CD and monitoring by brainstorming a high level, first draft discovery of their specific challenges that need to be addressed for success in a scoped area of DevOps (a Terrain). The need for this generally arises when the customer is getting ready to utilize technologies and/or methodologies they are less familiar with. Please reference the Workshops section on the Customer Success page\nfor up-to-date information on and links to CS Workshops. The Success Services department is part of the Customer Success function who partners with our customers to deliver value and positive business outcomes throughout their journey with GitLab. The team can be reached in Slack channel (internal only). For content for positioning the value of the service, how to price/quote the service and how to handle objections, please visit the internal handbook page here. Our Success Services drive adoption and value realization of GitLab products whilst providing customers with Best Practices and a higher tier of White Glove support.   We achieve this by bundling a named Support Engineer, a Customer Success Architect (CSA) and Education services into a single orderable SKU as an annual renewable service. On an account view in Salesforce, there is a Customer Success section, with the following fields: Salesforce operates using a series of objects. Standard objects are objects that are included with Salesforce. Common business objects like Account, Contact, Lead, and Opportunity are all standard objects."
    },
    {
        "title": "Customer Success Management Handbook",
        "url": "https://handbook.gitlab.com/handbook/customer-success/csm/",
        "content": "CSM AMER\nCSM EMEA\nCSM APJ\nCSE Accelerate customer success by aligning passionate CSMs with customers to: CSMs are accountable for customer adoption, measurable outcomes, customer satisfaction, and creating true customer advocacy. We create successful customers by enabling, training, and nurturing them throughout their journey. The following areas incorporate the remit of a CSM: Please reference this page for an overview of the CSM Rhythm of Business (daily to yearly)\nPlease reference this page for an overview of the areas your CSM will engage with you in: CSM Points of Engagement  CSM Team Metrics Overview (VIDEO) Landing Zones Customer Metrics Platform Metrics The following articulates where collaboration and customer management is owned: In Customer Success Management, it is important to be continuously learning more about our product and related industry topics. The education and enablement handbook page provides a dashboard of aggregated resources that we encourage you to use to get up to speed. To ensure that opportunities are listed with the correct Order Type, this Salesforce report shows you all of the opportunities that have closed, or are soon to close, with your SAEs. Tracking Order Type is important since CSM team quota and compensation depend on this. Please reference the latest Sales Compensation Plan information to know what is counted. Next steps for you: View the CSM Handbook homepage for additional CSM-related handbook pages. Customer Success Managers will typically manage customer engagements via a GitLab project in the account-management group. This project will be based off the Enterprise or the Commercial Customer Success Plan Template and customized to match the customer\u2019s needs as outlined above. The project is pre-loaded with milestones, issues, labels, and a README template to help kick off the project and outline a proof of concept, implementation, and customer onboarding. The following is a short introduction video on GitLab\u2019s first iteration of the Customer Success Plan. View the CSM Handbook homepage for additional CSM-related handbook pages. CSMs will need to occasionally transfer accounts they have been working with to another CSM (e.g. a CSM changes territories, a realignment occurs in Sales, a need to equalize books of business, etc.), and they should use this handbook page to help guide them through important questions and topics during the handoff. Below are checkpoints during the account handoff process that CSMs can use to keep track of information they will need in order to successfully transition accounts. For the sake of this page, most of this guidance is directed towards the new CSM but is helpful information for everyone involved. View the CSM Handbook homepage for additional CSM-related handbook pages. One of the primary tools CSMs have to become a trusted advisor and assess and improve account health is the customer cadence call. This is an opportunity for the CSM and the customer team to sync on business outcomes, priorities, progress on initiatives, and concerns, and it is a great opportunity to bring in other GitLab team members that the CSM feels should be included (for example, Product to review feature requests and the roadmap). View the CSM Handbook homepage for additional CSM-related handbook pages. Define the process for how the CSM interacts with the systems and processes designed to provide customers with technical support. During the onboarding process, the CSM will ensure that customers are correctly established in the support system. GitLab manages support requests through a system called Zendesk. GitLab has integrated the GitLab instance of Salesforce with Zendesk to facilitate the establishment of users in Zendesk. The integration synchronizes account-level data so that the Zendesk ticket has accurate information on the customers\u2019 purchase of products that include support. View the CSM Handbook homepage for additional CSM-related handbook pages. At GitLab, successful partnerships between our Customer Success Managers and their customer executives are crucial to the success of our customers and our business. As CSMs position themselves to be more strategic and reach Director, VP, and CISO personas, we have to adjust our communication styles and consider how to cater them to executives. This page provides guidance on how CSMs can effectively partner with executives to drive value for our customers. View the CSM Handbook homepage for additional CSM-related handbook pages. Objective:  Define the 3 \u2018big rocks\u2019 to take on in FY23 with the overall goal of moving our team forwards.  These rocks need to move us forwards as a team and as individuals, enabling us to scale, be impactful, and be inspired/fulfilled in our roles. What are \u2018big rocks\u2019?\nAs outlined in this article, they are our priorities, our mission-critical objectives that we need to solve for in the coming year. We arrived at this list through CSM leadership discussions and final input from individual contributors. This page describes best practices for an internship for learning with the CSM team. Internships are a great way for a GitLab team member to learn about being a Customer Success Manager at GitLab. Use this guide for planning and executing an internship under an IC CSM who acts as the \u2018Intern Mentor\u2019. The first step you will need to take in order to start an internship in Customer Success is to find a mentor from the CSM team. Feel free to reach out to any CSMs, particularly ones who are in a similar timezone to you to discuss an internship, or to reach out to a CSM Manager for guidance. View the CSM Handbook homepage for additional CSM-related handbook pages. Onboarding for Customer Success Managers is a guided, methodical process to ensure new team members have the knowledge they need to be effective. There is a lot to learn to make you a great GitLab Customer Success Manager. It is important for new team members to gain competency on how our platform solutions provide customer value, and how we partner with customers to build a productive relationship. This handbook page will provide an overview of what can be expected during the onboarding journey including learning objectives, milestones, and ways in which a manager and onboarding buddy can support a new team member during their onboarding. View the CSM Handbook homepage for additional CSM-related handbook pages. As part of GitLab\u2019s paid time off policy, team members are encouraged to take time off. However, as customer-facing team members this can feel difficult, so this page is intended to help guide CSMs to ensure they can regularly take time off, avoid burnout, and keep their customers successful. To take PTO, please follow the guidelines in the PTO policy and be sure to enter your time off in Time Off by Deel. View the CSM Handbook homepage for additional CSM-related handbook pages. A successful CSM is pulled into various tasks across multiple territories and accounts. It is critical for a CSM to manage time effectively and concentrate on tasks that have the most positive impact for GitLab and the customer. The CSM Rhythm of Business has been designed to focus CSM efforts on the most fruitful daily, weekly, monthly, quarterly, and yearly tasks. View the CSM Handbook homepage for additional CSM-related handbook pages. Customer Onboarding is the beginning phase of the customer lifecycle. The customer onboarding phase is critical to getting a customer started on a successful journey with GitLab. This is our opportunity to ensure the customer achieves value and success from the start of their GitLab usage. The onboarding process should begin when the customer opportunity reaches stage \u201c5-Negotiating\u201d for Booked ARR in order to introduce the CSM while we have high-touch engagement to close the opportunity. Once an opportunity that will newly qualify a customer for CSM alignment reaches stage 5, a Gainsight CTA will be created for the CSM Manager to assign the customer to a CSM. The assigned CSM should then start the onboarding process with the rest of the account team. View the CSM Handbook homepage for additional CSM-related handbook pages. Escalations\u00a0can take at least two different forms: The purpose of this handbook\u00a0entry is to describe the process for account escalations.\u00a0 Please see\u00a0the Support Ticket Attention Requests for details on how to request\u00a0a support ticket escalation. View the Customer Success Handbook homepage for additional related handbook pages. The Customer Success team is distributed across different customer segments, depending on the customer\u2019s Annual Recurring Revenue or the purchase of GitLab\u2019s Success Plan Services (SPS). CSM\nCSE\nCSA\nRenewals Managers The following Digital Programs constitute \u201cCustomer Success Services\u201d as included with your Subscription to Software, governed by the GitLab Subscription Agreement available at: https://about.gitlab.com/terms. Programs are developed using input from CSMs, customers, and other GitLab resources. Our goal is to provide customers with useful ways to serve themselves. We provide the following: For more information about Customer Programs, including how to request new or contribute to existing programs, or add contacts to Gainsight, see the Customer Programs page. CSM-Assigned Customer Accounts GitLab Partner team introduces CSM & SAE/AE to Partner - ideally before sale closes to not slow down post-sales implementation CSM and SAE/AE connects with Partner to align on the role the Partner will play post-sale. If the Partner has an ongoing engagement with the customer, CSM & Partner to align on post-sale Kick-Off call, collaborating on the Kick-Off deck content and ownership/roles for the call View the CSM Handbook homepage for additional CSM-related handbook pages. An Executive Business Review (EBR) is a strategic meeting with stakeholders from both GitLab and the customer. It is an extension of the account planning process and part of the CSM\u2019s regular business rhythm. The EBR aims to demonstrate to the Economic Buyer the value they are getting in their partnership with GitLab. It is interactive from both sides, discussing the customer\u2019s desired business outcomes and related metrics, progress against these metrics and desired outcomes, and aligning on strategic next steps. The most crucial element in all EBRs is giving the customer stakeholders the time to speak about what matters to them, and creating a framework to enable them to do so. View the CSM Handbook homepage for additional CSM-related handbook pages. FY24 Annual OKRs (Big Rocks)\nObjective: The 3 \u2018big rocks\u2019 to take on in FY24 with the overall goal of moving our team forwards. These rocks need to move us forwards as a team and as individuals, enabling us to scale, be impactful, and be inspired/fulfilled in our roles. What are \u2018big rocks\u2019? As outlined in this article, they are our priorities, our mission-critical objectives that we need to solve for in the coming year. We arrived at this list through CSM leadership discussions and final input from individual contributors. The objective of this retrospective program is to facilitate a structured and collaborative process for reflecting on Renewal events in our book of business, identify areas for improvement, implementing actionable changes to enhance future performance and share learnings across the organization. The scope of this program is limited to Customer Renewal events occuring during FY25 that are managed by the CSE, CSM and RM teams. View the CSM Handbook homepage for additional CSM-related handbook pages. The Leadership Recurring Check-In call is a strategic discussion with customer leadership to ensure we are progressing toward our success plan objectives together. While an Executive Business Review (EBR) aims to establish business goals and report on progress annually, the Leadership Recurring Check-In allows for a more focused conversation with leadership to allow for progress checks, and review the prioritization of objectives. It is less granular than a cadence call, but more focused than an EBR, and still has the aims of being strategic and requiring company leadership, even if they are not at the executive level. Oliver Falk, Manager, Customer Success Engineering, EMEA This page is intended to help others understand what it might be like to work with me, especially people who haven\u2019t worked with me before. It\u2019s also a well-intentioned effort at building some trust by being intentionally vulnerable, and to share my ideas of a good working relationship to reduce the anxiety of people who might be on my team. View the CSM Handbook homepage for additional CSM-related handbook pages. Service Ping generates customer analytics on self-managed instances that enable GitLab to collaborate with our customers to accelerate value attribution, achieve return-on-investment (ROI) goals, and accomplish business outcomes with the GitLab solution. Specifically, it helps GitLab understand product adoption to: For the definition of each metric, please see our Service Ping Metrics Dictionary. View the CSM Handbook homepage for additional CSM-related handbook pages. As part of the CSM\u2019s mandate to drive stage adoption and expansion with customers, we need to define exactly what it means to adopt a stage at GitLab. For more information on how stage expansion is recorded and reported on, please visit this page\nThe detail below is a guide to defining what it takes to say a customer has adopted that stage within GitLab. We define stage adoption as >25% of the account using a stage as defined below. Less than 25% (roughly) is presumed to be a pilot or work in progress toward a significant foothold of a stage providing value within the company. View the CSM Handbook homepage for additional CSM-related handbook pages. The CSM team\u2019s primary focus is to align with a customer\u2019s desired business outcomes, enable the customer in their current use cases, and expand their platform adoption. Customers who adopt additional DevOps use cases with GitLab see an increased return on investment (ROI). They receive this ROI by increasing operational efficiencies, delivering better products faster, and reducing security and compliance risks."
    },
    {
        "title": "GitLab Channel Partner Program",
        "url": "https://handbook.gitlab.com/handbook/resellers/",
        "content": "We invite organizations interested in becoming a GitLab Channel Partner to APPLY NOW. This is the primary Handbook page for prospective and existing GitLab Channel partners and is organized into the following sections: Welcome to the GitLab Channel Handbook, Channel Program Guide, Channel Partners: Working with GitLab, and Channel Partners: Developing your GitLab Practice. This services as an introduction to the GitLab Channel Program and provides links to individual sections with additional detailed information. The GitLab Partner Program supports organizations ranging from value added resellers (VARs) to systems integrators (SIs) to managed service providers (MSPs) and beyond looking to resell or refer GitLab sales opportunities, or provide services for GitLab customers. In addition, the program empowers partners to capture value from and support the entire customer lifecycle with guidance and support for everything from pre-sales engagement through full customer adoption of GitLab. The right product at the right time. In any given market there are only a few times when the stars align with a product that is creating and leading a category, a product that helps customers redefine what success can look like, and with a robust opportunity for an ecosystem of partners to help customers maximize their ROI in that product. GitLab represents one of those opportunities. We are still in the early phases of capturing an estimated $40 billion dollar addressable market[^1].  A market that\u2019s evolving from point solutions to a platform and where GitLab offers the most comprehensive offering with proven ROI that partners can monetize by accelerating customers\u2019 successful adoption of GitLab. From a strategic perspective, the comprehensive GitLab DevSecOps platform can be a driving force in your application modernization, digital transformation, cloud adoption, and even your security & compliance practices. If you have browsed the GitLab Handbook before or this is your first time, we want to make your experience navigating the Channel Partner Program Handbook as easy as possible. These pages document our shared team philosophy and processes, while the individual sections contain more detailed information. If you ever need to find your way back to either page or section, you can locate navigation links at the top or bottom of each page or section, as well as helpful Outline links located on the right of each page. How to Navigate: To find your way back to the 1st Page CLICK HERE. Welcome to the GitLab Channel Handbook, Channel Program Guide, Channel Partners: Working with GitLab, and Channel Partners: Developing your GitLab Practice. All authorized GitLab resellers are invited to the GitLab #resellers Slack channel. This Slack channel allows you to reach out to our sales and marketing team in a timely manner, as well as other resellers. Additionally, you can email the GitLab Channel Team at partnersupport@gitlab.com. We\u2019re only just getting going at capturing our mutual piece of the $40bn DevSecOps platform[^1] market, and one of the keys to success is a focus on customer success. One of our programmatic goals is to make it as simple as possible for you to develop a GitLab practice that meets and supports customers and prospects at all phases of their customer journey.  The GitLab Partner Champions Program will empower, support, reward, and recognize members of the GitLab Partner community who champion great customer outcomes based on the GitLab DevSecOps platform. GitLab Champions enlists, supports, rewards, and recognizes members of the GitLab Partner community who make outstanding contributions to GitLab and our community around the globe .\nBecome a GitLab Champion - Themed and Sponsored Community: Designed with a distinctive GitLab theme and is financially supported by GitLab. It is led by Channels SAs in each region. In this section of the Partner Programs Handbook we review assets and enablement from the perspective of GitLab Partners\u2019 Technical constituencies. Beyond our Partners Handbook pages you will find sales guides, use cases, training materials, and program guides reviewed below. Additional partner-specific content is hosted in our GitLab Partner Portal. The materials should be a great place to start effectively selling, serving and hitting your number with GitLab. Remember that some of the links below require you to login to GitLab\u2019s Partner Portal first. If you haven\u2019t already, here is where you register for portal access."
    },
    {
        "title": "Field Operations",
        "url": "https://handbook.gitlab.com/handbook/sales/field-operations/",
        "content": "\u201cManage field business processes, systems, architecture, enablement, champion data integrity, provide insights and predictability through analytics\u201d The term \u201csales\u201d refers to the Sales Team and \u201cfield\u201d includes the Customer Success, Channel, and Alliances Teams. Clarity: for definitions, processes and events\nPredictability: of the business by leveraging data and systems\nScalability: for processes and systems that allows for growth Field Operations works to deliver Field Ops changes related to Sales Ops, CS Ops, Channel Ops & Deal Desk (QTC) in a batched, bi-weekly release cadence. To learn more, see the Field Ops Release Schedule page. For a running log of Field Ops changes related to Sales Ops, CS Ops, Channel Ops & Deal Desk since Q3-FY22, see the Field Ops Changelog page. Data Intelligence (DI) is a part of Field Operations reporting to Revenue Operations. Our goal is to ensure the field has reliable and quality Salesforce.com sales data to empower them to make repeatable and structured decisions to increase sales and make GitLab more successful. We aim to manage data well and be viewed as a trusted business partner for Sales Operations, Marketing Operations, and Management. Seat expansion is at the heart of our revenue growth. This has a strong impact on IACV and both Net and Gross Retention. There are various ways to determine the seat counts for a subscription: The best way to view Seat Counts for a GitLab.com customer is to access the Customers Portal admin section. It\u2019s important to note that ultimately the Customer Portal admin will have the most accurate and up-to-date view of this information. Workflow for internal GitLab users on how to get help when working on an opportunity or account in Salesforce. Background: Historically, GitLab used Chatter to handle internal requests in Salesforce. Users could send a Chatter message to user groups (ie. @sales-support, @billing, @renewalops, @partneroperations) for support. This process led to the creation of thousands of cases each quarter; but there were inefficiencies in the system."
    },
    {
        "title": "IT Enterprise Applications",
        "url": "https://handbook.gitlab.com/handbook/business-technology/#reporting",
        "content": "The IT Enterprise Applications oversees the business technology architecture and systems that power GitLab as a business entity. We ensure that the systems are fit-for-purpose, available, reliable, integrated and secure.\nWe continue to build business aligned technology to run operations, layering integration and automations to support remote work, enhance team member and customer experience, and generate value. Be a trusted business partner providing world-class solutions and value. Provide a stable, secure, compliant and highly integrated solutions ecosystem to empower business with technology and services that enables productivity to fuel growth of GitLab. Company-wide Business Technology - Tech Stack Application EcoSystem We Support Services Services We Support: Finance Systems Service Desk Partnerships & Collaborations with: Join Our Team - Current Job Openings Contact Us Other References"
    },
    {
        "title": "Solutions Architects Handbook",
        "url": "https://handbook.gitlab.com/handbook/solutions-architects/",
        "content": "Mission Statement: \u201cAs a learning organization, we enable our customers to realize value as they achieve outcomes faster and more efficiently and drive GitLab sales through technical and business consultation.\u201d Elaboration: Leveraging our technical and domain-specific expertise, along with strong cross-functional collaboration, Solutions Architects strive to become trusted advisors, fostering a collaborative learning environment with our prospects, customers, partners, and internal teams. Our primary objectives include: Here\u2019s how the SA organization fosters value creation through the lens of a learning organization and DevOps culture: Shared Vision & Value Creation Personal Mastery & DevOps Expertise Systems Thinking & Customer-Centric Approach Challenging Established Mental Models & Encouraging Innovation of Thought Teamwork & Knowledge Sharing Building and leveraging continuous feedback loops Conclusion: By embracing the principles of a learning organization the SA team becomes a powerful catalyst for customer value realization. They not only provide technical expertise but also foster a collaborative and innovative environment where customers are empowered to achieve their goals and maximize the value they derive from GitLab solutions. Field Solutions Architects (SA) are the trusted advisors to GitLab prospects and customers during the presales motion. We demonstrate how the GitLab platform and GitLab Professional Services address common and unique business requirements. SA\u2019s add value to GitLab\u2019s customers by providing subject matter expertise and industry experience throughout the sales process and collaborate internally with product. In addition, SA\u2019s identify and propose comprehensive solutions to complex business problems and workflow scenarios after compiling inputs from customer requests during conversations. Desired inputs include pain points, role-based visibility concerns, opportunities for improved efficiencies, current technologies and tools (3rd party to GitLab) and therefore opportunities to improve integrations, corporate initiatives, target outcomes and more. SA\u2019s also act as the technical liaison between the sales team and other groups within GitLab, engaging GitLab employees from other teams as needed in order meet the needs of the customer. Our Field SA\u2019s also engage proactively with existing GitLab customer to provide thought-leadership, engage in innovative solutions, collaborate around evangalism activities around unique customer requirements (i.e. meetups and presentations) and continously seek market feedback to improve the GitLab platform. The Strategic Field Organization is a team of Principal Solutions Architects that support global strategic sales opportunities and customers. This team collaborates with the regional account teams to work together on large engagements that require a higher degree of strategic planning, consulting, executive-level technical leadership, and internal GitLab cross-departmental collaboration. Ecosystem Solutions Architects are the trusted advisors to our strategic alliances partners, professional services partners, and channel resellers. The focus of this team is to develop relationships and provide technical assistance and leadership to drive joint GTM strategies. This team helps grow and strengthen the partner ecosystem by building new capabilities and growing GitLab revenue together with partners. In addition to core responsibilities, Solutions Architects may assist in other client-facing activities aligned to Partner and Strategic Marketing such as blogs, videos, webinars, presentations and industry trade show presence. See the Solutions Architect role description for additional details, and Engaging an Ecosystem SA when you need help with a partner cooperative opportunity. Demo Architects are tasks with maintaining public facing demo content (Workshops/Hands on Labs/ Pre-baked demos) as well as running the systems these events run on. There main goal is to create processes & new tools to help assist & enable Solution Architects when selling to customers. The Field and Partner SA Management (referred as SA management going forward) around the globe collaborates around unique requirements, identifies improvements in the go-to-market approaches and focussed on prioritises on strategies to address the market\u2019s requirements. The SA management is aligned in the interest of technical matters to address exisiting needs raised by customers and priotise on innovative requirements. The SA management will collaborate with product teams to achieve required outcomes. Being a Trusted Advisor is referencing a role/skill that a person takes on when working with customers to solve their business problem. Building Trust (Trusted Advisor):\nConnects with key stakeholders on both a personal and professional level and shows up as a credible and reliable champion for customers. Effectively positions GitLab as a partner to the customer rather than just another vendor with a focus on following through on commitments and delivering results. \u2013 Solution Focus Field Competency For more information and development see the \u201cTrusted Advisor Skill Development\u201d, Community of Practice As the DRIs helping position, prepare, and guide a customer\u2019s technical evaluation the SA team ensure that GitLab can surface the right points of value to the customer\u2019s key stakeholders post technical evaluation.  The following embody GitLab\u2019s technical evaluation philosophy and help guide successful technical evaluations. These offerings are delivered each within a specific context of a particular customer journey. This is the Solution Architect handbook. If you see any typos, copywriting improvements or content clarifications you\u2019d like to contribute, please create a merge request and ask your managers to merge. Please add the label \u201cSA-HANDBOOK\u201d to your merge request, and post a link to the solutions-architects slack channel, mentioning @sa_leaders, as a heads up and so we can thank you! Since we have a bias for action, we trust your judgement. Solution Architects have various practices: Communities of Practice Deliberate Practice Effective Objection Handling Recognizing Cognitive Bias Ride Alongs Value Stream Discovery SA Office Hours for AE/CSM/SA Collaboration Solution Architecture Retrospective Feedback Monthly Release Quiz SA Subject Matter Expert program The following practice and process are lead by the Solutions Architects during pre-sales: Proof of Value Day In The Life of a Developer The SA organization uses process mapping as a framework for structured and continuous improvement.  LucidChart is used to document SA execution workflow and details; in other words, what we do and how we do it is documented as a visual process map. This provides a single location to find reusable artifacts, enablement, and tooling. The goals of SA process mapping are inclusive of the following:"
    },
    {
        "title": "Finance",
        "url": "https://handbook.gitlab.com/handbook/finance/",
        "content": "Welcome to the GitLab Finance Handbook The GitLab Finance Department includes multiple Teams: Accounting, Financial Planning & Analysis, Tax and Business Operations Programs.  Quick Links For commonly requested company information, please visit our wiki page. Login information for the following accounts can be found in the Secretarial vault\non 1Password: If you need this information but cannot find it in your shared vaults, check with the People Connect Team members to get access. A fiscal year is a one-year period that corporations use for accounting and budgeting.\nGitLab\u2019s Fiscal Year runs from February 1 to January 31. Refer to our writing style guidelines for proper use of date formats. Vendor invoices are to be sent to ap@gitlab.com and payroll@gitlab.com for contractors. An invoice template can be found in Google Docs by the name of \u201cInvoice Template\u201d. Non-US contractors not from Hungary, Italy, Japan, New Zealand, Nigeria, South Africa, Switzerland, and Ukraine will get pay their monthly wages and expenses through iiPay. Here is the process: Non-US contractors from Italy, Nigeria, South Africa, Switzerland, and Ukraine will need to send their monthly invoice for salary/bonus/commission and any expenses by the 15th to payroll@gitlab.com. In many cases, VAT will not be payable on transactions between GitLab BV and EU-based\nvendors/contractors, thanks to \u201cShifted VAT\u201d. To make use of this shifted VAT: Budgets are aligned to departments, and budgets follow the owner who requested the spend. When determining who should request the spend, consider the owner of the outcome. For example, work to enable a sales partner that will not be incorporated into the product would go to Sales. Work that will be part of the product and supported by engineering, should be charged to the Engineering budget. This page contains GitLab\u2019s accounting and reporting policies, which can be made public. Please find our internal processes in the Accounting and Reporting internal handbook section. Calculated Billings Calculated billings is defined as revenue plus the sequential change in total deferred revenue as presented on the balance sheet. We do not believe that calculated billings provides a meaningful indicator of financial performance as billings can be impacted by timing volatility of renewals, co-terming upgrades and multi year prepayment of subscriptions. This page contains GitLab\u2019s Accounts Payable department policies, procedures and guidelines. Our goal is to enable payments in a timely manner to both our team members and our external partners. We also provide useful links to other areas of the handbook that are relevant to the Accounts Payable procedures. Welcome to Accounts Payable, commonly referred to as AP. You should be able to find answers to most of your questions in the sections below. If you cannot find what you are looking for, then please connect with us: Please refer to the authorization matrix here GitLab has established the disclosure committee (the \u201cCommittee\u201d) to help satisfy its obligation under the Securities Exchange Act of 1934 (Exchange Act) to maintain effective disclosure controls and procedures.\nGitLab\u2019s CEO and CFO adopted the Committee charter to outline the company\u2019s Committee\u2019s governance and disclosure procedures.  Please click here to read the Disclosure Committee Charter. Welcome to the GitLab Finance Growth and Development Page The GitLab Finance Department is dedicated to the growth and development of our team members. To ensure that this is a focus area, we have come up with five programs for FY22. On-Boarding Growth and Development Finance Team Member on-boarding will include specific tasks and information to foster a culture of continued development. This will include: Work Style Assessment Variance Actual to Forecast of recurring revenue, excluding joint ventures. This metric falls under \u201cAccurate and reliable financial forecast\u201d umbrella. Learn more about working with various members of the marketing team GitLab\u2019s Global Travel & Expense Policy is meant to provide guidance to all Team Members to ensure that we act in the best interest of our Company at all times. The purpose of this policy is to: Team Members: We have an externally facing investor relation website.\nThe page you are on now the handbook that describes internal processes around investor relations. As a public company we share financial results publicly after the close of each fiscal quarter or fiscal year. The key deliverables for each earnings cycle are: A cross-functional working group collaborates on the earnings cycle each quarter. Key contributors are the e-Group, IR, FP&A, Accounting, PR, Exec Comms, and Legal teams. The DRI for this project is the CFO; each work-stream has functional DRIs. Please refer to the Payroll internal handbook page https://internal.gitlab.com/handbook/finance/payroll/. FY23 Compensation T&Cs can be found in the Internal Handbook: https://internal.gitlab.com/handbook/sales/sales-commission/#fy23-sales-commission-policies All team members and contractors must protect our Company assets, such as equipment, supplies, cash, and information. Treat Company assets with the same care you would if they were your own. No team member or contractor may commit theft, fraud or embezzlement, or misuse Company property. This table captures all of the links for different policies that are documented around using Company money. This includes information of when to use our expense tool Navan, when to use a virtual credit card and when to get a PO from Zip. The Procurement team manages GitLab\u2019s Supplier Lifecycle through the process of strategically vetting and selecting vendors, negotiating commercial terms, the purchasing of goods and services, and managing the renewal or vendor offboarding process.  Division alignment for spend over >$25k USD / year: Procurement is a cross-functional team that supports GitLab as a public company. We have four key objectives monitored in the following ways: Please refer to the Internal Audit page in the internal handbook. Internal handbook link Team member safety and security are a top priority for GitLab. If a team member feels uncomfortable or unsafe traveling to a location on GitLab\u2019s behalf due to concerns about the location, region, personal health, or other safety or security risks, please contact People Connect via Slack or email. The People Connect team will assist by helping to connect the team member with the right resources."
    },
    {
        "title": "Accounts Payable",
        "url": "https://handbook.gitlab.com/handbook/finance/accounts-payable/",
        "content": "This page contains GitLab\u2019s Accounts Payable department policies, procedures and guidelines. Our goal is to enable payments in a timely manner to both our team members and our external partners. We also provide useful links to other areas of the handbook that are relevant to the Accounts Payable procedures. Welcome to Accounts Payable, commonly referred to as AP. You should be able to find answers to most of your questions in the sections below. If you cannot find what you are looking for, then please connect with us: Vendor Invoices - These invoices are processed in Coupa either PO Backed or Non PO backed. Vendors must be set up or onboarded in Coupa and invoices must contain all required information like Invoice Number, Invoice Date, Payment Terms, PO Number, Invoice Amount, Currency, and Service Dates/Period to proceed with processing. Quotations, Order Forms, Agreements, Contracts are not valid for invoice processing, only \u201cInvoice\u201d is allowed. Payroll Invoices - These are invoices provided by the Payroll Team for processing and will be manually input in Netsuite. Approval signatures are indicated on the invoice. Special Invoices - Mostly these are related to reimbursements (e.g. Speaker Reimbursement, Interview Candidate Reimbursement, Ex-Team Member Reimbursement and BOD Reimbursements). GitLab\u2019s preferred method of payment for suppliers is electronic funds transfer with supplier invoice provided as supporting documentation. In the instances where this option is not available with the supplier, Virtual Card, which is a temporary credit card, can be used as an alternative payment method.  Invoicing and Payment\n Corporate Credit Card\n Procurement This policy applies to:"
    },
    {
        "title": "Accounting and Reporting",
        "url": "https://handbook.gitlab.com/handbook/finance/accounting/#accounts-receivable",
        "content": "This page contains GitLab\u2019s accounting and reporting policies, which can be made public. Please find our internal processes in the Accounting and Reporting internal handbook section. Calculated Billings Calculated billings is defined as revenue plus the sequential change in total deferred revenue as presented on the balance sheet. We do not believe that calculated billings provides a meaningful indicator of financial performance as billings can be impacted by timing volatility of renewals, co-terming upgrades and multi year prepayment of subscriptions. For order approval and invoicing process please view the Billing Ops page. Invoicing: One Time Events Amendments to Subscriptions  To amend a customer\u2019s account, choose one of the options below from the subscription page in Zuora. Zuora Subscription Data Management Basic Assumptions New Accounts vs New Subscriptions There are instances where a new account in Zuora is required rather than just a new subscription in an existing account. This is determined by the sold-to contact person. Within the customer account portal, customers can only see a single Zuora account at a time. If a customer wants to add a subscription and the contact information is the same, then the subscription can be added to the existing account. If a customer wants an additional subscription for a different sold to contact, then a new Zuora account will be created so that every sold to contact can log into the portal and manage their subscriptions. Linking Renewal Subscriptions When a customer renews their subscription, a new subscription is typically created. This can create challenges for calculating metrics like dollar retention for a subscription because once subscription has ended and another has started. To address this, a linkage is made between the original subscription and its renewal(s). The field Renewal subscription is used to create the mapping. These are the following constraints on this field: The process to make the linkage is as follows: The active subscription status in Zuora needs to be reviewed in connection to the end date.\nIf the end date is in the future it means that the subscription is still within the term and the customer is able to use the product.\nAn \u2018active\u2019 subscription with an end date in the past means that the subscription was not renewed and the customer doesn\u2019t have access to the product since the end date.\nWe currently don\u2019t actively cancel these subscriptions as this is a manual process and the cancellation or lack of it does not have any impact on other processes.\nAdditionally, where subscriptions remain in an active status they can be renewed by the customers on the CustomersDot For step by step processes please view Billing Ops page. How to process a partial refund in Stripe Posting Swag Shop transactions in NetSuite Transactions from the Swag Shop are remitted to the Comerica checking account daily and should be booked in NetSuite at the end of each month. Accounting for customer collections Cash Receipt\n Credit card customer Follow this procedure if the customer paid by credit card.\nYou may recall from the invoicing process that there was still a balance due when saving the invoice.  The following steps will record the payment and remove the balance due. Login to Stripe dashboard and click on Payments under Transactions (left hand side). You will see a listing of the latest Stripe transactions listed by amount, Recurly transaction, name, date, and time. There is also an option to filter the report by clicking on XXX at the top left. Click on XXX to export to excel. This will give you a workbook area and also a breakdown of the fees which we will work on later. In NetSuite, click on the \u201cTransactions\u201d tab on the left. Match invoice #s  between the Stripe dashboard and NetSuite. If you click on a transaction in the Stripe dashboard, it will take you to a screen that shows more detail, including the invoice # being paid. You can work your way from the bottom up. In NetSuite, click \u201cReceive Payment\u201d on the matched payment and invoice. Receiving the payment Post a journal entry to record Stripe Fees. This transaction transfers the payment obligation from the customer to Stripe.  The payment obligation from Stripe is removed when Stripe transfers  the funds to GitLab\u2019s bank account. Posting a payment from Stripe when a transfer is received from Stripe Post a journal entry: Posting a payment from a \u201cbank customer\u201d In Netsuite: For step by step cash collections process please view Billing Ops page. Account receivable provisions, bad debts and other period close adjustments Time for Invoices to be generated when a deal is closed won in Salesforce < 24 hours The time from when a deal is closed won in Salesforce to when the invoice is generated. Professional services are excluded from this performance indicator. This is tracked over a calendar month. The target is < 24 hours. Procure to pay is the process of requisitioning, purchasing, receiving, paying for and accounting for goods and services. It includes the following sub processes of both the Procurement and Accounts Payable departments: Coupa is a procure-to-pay system that streamlines the purchase request process, initiate workflow with approvals, and enable Purchase Orders. We will be rolling out in a phased approach, with the US and Netherlands entities (GitLab Inc, Federal, IT BV and BV) in Phase I (2021-06-01). The remaining entities will be part of Phase II (2021-12-13). You can learn more about Coupa on our FAQ Page How vendors are added into Coupa: Entering a Bill (invoice) in NetSuite Please note the below steps reference how to manually enter bills into NetSuite.  Effective 2019-11-01 all AP invoices were processed through Tipalti. Effective 2021-06-01 (Coupa Phase I) and 2021-12-13 (Coupa Phase II), AP invoices will be processed in Coupa. These systems will automatically record the transaction into NetSuite after the invoice has been approved by the corresponding business partner in the respective system. Coupa is a Procurement and Invoicing Tool. Similarly to purchase requests for goods/services that must be initiated in Coupa, invoices are also created and approved in Coupa. Invoices in Coupa can be created via 4 different channels: A NetSuite error log identifying invoice integration issues will be emailed to the Accounts Payable Team every Tuesday and Friday. The email is sent from Finance Systems Admins and the Subject is Coupa2NS Invoices - Integration Log. Download the attached file and filter by Type = Error and Audit. Review the Details field to find the invoice number/document number that needs to be reviewed/corrected. For information regarding common errors and how to correct them, please review this file; under the column labeled Script search for Coupa Invoice Integration. If any troubleshooting assistance is needed, please ask in the #coupa_help Slack channel. There is also a View in Coupa that will list invoices not exported to NetSuite. Under Invoices, select View = Not Exported\n However, there will be no details regarding the integration issue. You will need to review the NetSuite error log (referenced above) for the details. Invoices requiring PO receipts or approval will appear in user\u2019s To Do list within Coupa. Users will also receive email notifications from Coupa (depending on user\u2019s notification setting in Coupa). PO receipts notifications will enable users to \u201cCreate Receipt\u201d by clicking on the button and entering the quantity received and receipt date. Please watch the End Users training video (starting at the 30:15 mark) for more information. Approval notifications will enable users to reject or approve invoices by clicking on the appropriate button. \n\nVerify invoice copy is attached\nVerify correct PO is matched\nVerify coding (Billing) is correct\nVerify service date is entered and correct\nVerify tag/class is entered (if applicable)\nVerify invoice total is correct\n\nIf there are issues with any of the above items, please tag @Accounts Payable Approval Group in the Comments section with details.\n If there are issues with any of the above items, please tag @Accounts Payable Approval Group in the Comments section with details. The invoice dispute process in Coupa enables the Accounts Payable team to request corrections on invoices from suppliers. Invoices in \u201cAP Hold\u201d, \u201cPending Action\u201d, \u201cPending Receipt\u201d, \u201cOn Hold\u201d, \u201cPending Approval\u201d or \u201cRejected\u201d statuses can be disputed to the supplier for corrections. Disputing an invoice requires a dispute reason and sends an email notification to the supplier contact on record and any additional listed recipients. Once disputed, an invoice can be Withdrawn from Dispute by Accounts Payable or Voided; or Resolved by the supplier. The invoice rejection process in Coupa allows the Accounts Payable team to make adjustments on invoices before restarting approvals, continuing approvals or disputing the invoice back to the supplier. This is an internal status that suppliers cannot see indicating that an approver or approval group rejected the invoice. Comments are required when rejecting an invoice - please provide as much detail/information as possible. Please note the below steps reference how to manually enter bills into NetSuite.  Effective 2019-11-01 all AP invoices should be getting processed through Tipalti and Effective 2021-06-01 we will begin to process in Coupa as well. These 2 systems will automatically record the transaction into NetSuite after the invoice has been approved by the corresponding business partner in the respective system. If adding a new vendor, follow the bullets below before proceeding, otherwise skip to step 3 Billable Expenses If you have an expense report that can be billed back to a customer please make sure to check the \u201cbillable\u201d flag in Navan along with tagging the customer name under the \u201ccustomer\u201d field in Navan. Supplier Payment Accounts (SPAs) are required in order to pay suppliers from Coupa Pay. There are four different ways that suppliers will be able to provide their payment information: After the supplier submits their supplier payment account information, it will transfer into Coupa automatically and create a supplier payment account record. For more information regarding how to set up SPAs or Coupa Pay, please check out the lower section of our Coupa FAQ page. A NetSuite error log identifying payment integration issues will be emailed to the Accounts Payable Team every Tuesday and Friday. The email is sent from Finance Systems Admins and the Subject is Coupa2NS Pay Payments Integration Log. Download the attached file and filter by Type = Error and Audit. Review the Details field to find the payment number that needs to be reviewed/corrected. For information regarding common errors and how to correct them, please see this file; under the column labeled Script search for Coupa Invoice Payment Integration. If any troubleshooting assistance is needed, please ask in the #coupa_help Slack channel. There is also a View in Coupa that will list payments not exported to NetSuite. Under Payments, select View = Not Exported\n However, there will be no details regarding the integration issue. You will need to review the NetSuite error log (referenced above) for the details. Coupa is available via Okta. To access the platform: If your job function requires you to submit purchase requests in Coupa, follow the below steps: \n\t\t\nDue to the limited number of licenses available for Coupa, it is recommended that each department identify power users responsible for creating purchase requests on the team's behalf.\n Please refer to GitLab\u2019s Expense Policy for further details. Entites included: GmbH, BV, PTY LTD, Ireland, IT BV and GK. Further details on the Expense reimbursement process can be found here Average days to action <= 3 business days Number of days from when an team member\u2019s manager approves report to when AP analyst does final approval for payment or responds to team member in Navan if there is a concern. (Approval for payment is not the reimbursement date.) This is calculated on a calendar month basis. The target for this is currently three business days. Time to get a new team member set up in Navan < 3 business days Have new team member set up in Navan within 3 business days from team member start date. When reducing spend, we will not take the easy route of (temporarily) reducing discretionary spending.\nDiscretionary spending includes expenses like travel, conferences, gifts, bonuses, merit pay increases and summits.\nBy reducing in these areas we put ourselves at risk of increasing voluntary turnover among the people we need most. Discretionary spending is always subject to questioning, we are frugal and all spending needs to contribute to our goals.\nBut, we should not make cuts in reaction to the need to reduce spend; that would create a mediocre company with mediocre team members.\nInstead, we should do the hard work of identifying positions and costs that are not contributing to our goals.\nEven if this causes a bit more disruption in the short term, it will help us ensure we stay a great place to work for the people who are here. In order to purchase goods and services on behalf of the company, you should first consult the Signature Authorization Matrix to determine the approval requirements. Note that this does not include travel expenses and other incidentals. These expenses should be self-funded then submitted for reimbursement within Navan, or in the case of independent contractors, included in invoices to the company (per the guidelines above). If further approval is not required, then proceed to the Procurement \u201cWhat are you buying\u201d page for further instructions on the purchasing process at GitLab. Once those procedures are complete, have your vendor send their invoice to Accounts Payable: ap@gitlab.com.  Most importantly, the team member making the purchase request is ultimately responsible for final review and approval of the invoices. Final review and approval are critical process controls that help ensure we do not make erroneous payments to vendors. All original invoices and payment receipts must be sent to Accounts Payable. If you would like to track spend for a particular campaign, project and/or event you can do that through expense tag, also known as classes in NetSuite.  If you would like to request an expense tag/class to be set up please open this tracker and enter the information required for the General Ledger (GL) team to create the tag. Create Classes In NetSuite: Navan will auto-sync any new \u201cexpense tags\u201d on a daily basis, but if the Navan admin wants to manually sync they can do so by following these steps: Import new Classes/Tags In Navan:  Please review this page for the current policy/procedures. Please see the campaign expense guidelines in the Marketing handbook. (Previously GitLab Summit) Tracking expenses for company Contributes enables us to analyze our spend and find opportunities to iterate, and in turn, improve subsequent Contributes. To enable tracking we create an expense tag that will allow GitLab team-members to tag Contribute related expenses in Navan. This should be done prior to the announcement of each Contribute. Property, plant and equipment is the long-term asset or noncurrent asset section of the balance sheet. Following are the sub-processes: Purpose This policy establishes the minimum cost (capitalization amount) used to determine the capital assets recorded in GitLab\u2019s financial statements. Capital Assets Defined A \u201cCapital Asset\u201d is a unit of property that has an economic useful life extending beyond 12 months and was acquired (or in some cases, produced) for a cost of $5,000 (USD) or more. Capital Assets must be capitalized and depreciated for financial reporting purposes. Capitalization Thresholds GitLab establishes $5,000 (USD) as the minimum amount required for capitalization. Any item with a cost below this amount is expensed on the date of purchase. Exceptions are Key Component Assets (i.e. computer laptops). Bulk purchases (\u201clike\u201d items acquired with a single purchase order, which are received within a reasonable period of time of one another (less than 60 days) and that individually have an Acquisition Cost less than the Individual Purchases Capitalization Threshold) have a Capitalization Threshold of $50,000 (USD) Methodology All capital assets are recorded at historical cost as of the acquisition date. These assets are depreciated on a straight-line basis, with the number of depreciation periods being determined by asset class. Invoices and purchase receipts for capital assets are retained for a minimum of five (5) years. Items paid for by the company are property of the company. Assets with purchasing value in excess of $5000 USD or Key Component Assets are recorded and tracked through NetSuite Fixed Asset Management (FAM) module, which includes details of individual asset purchased. The Asset Register report provided by NetSuite FAM provides each individual asset purchased with the following information: Once the information is captured in NetSuite FAM a depreciation schedule will populate and NetSuite FAM will post a journal entry each month to record the depreciation of the asset until it is fully depreciated. The asset will remain on GitLab\u2019s balance sheet until the asset is no longer being used and is identified to be disposed. Assets will be disposed of if purchased by an employee upon termination (if approved by IT Ops) or if the item is no longer useful before the useful life. IT Ops will need to identify the asset and inform Accounting to properly dispose of the asset from NetSuite FAM. Record to report process is governed by the following accounting policies: Refer to Legal page for Related Party Transactions policy Our ability to accomplish our Finance and Accounting mission of providing timely, fact-based information to drive business results as a public company depends on the participation of team members during certain critical times of year. Our accounting function provides critical, time based deliverables that directly impact our ability to support business growth and meet our public company obligations. These activities require the entire team\u2019s support. Team Members should prioritize taking time off to refresh and recharge outside of these critical windows. While these exact windows vary by team, generally we need all team members to support the last week of the quarter and first two weeks of the next quarter. Check with your manager if you are unsure what is applicable to your role. When these windows overlap a weekend (particularly the last day of the quarter) or public holiday/ Family and Friends day, we recommend team members work with their manager to reschedule the day off to a day outside of this critical end of quarter time period. If a team member is unavailable to work during this time period, they should provide their manager with at least one months\u2019 notice whenever possible to allow for coverage to be arranged. When appropriate, we will create rotational coverage plans over holidays/weekends, while remaining in line with applicable jurisdictional requirements. Purpose The purpose of this policy is to establish the responsibility, authority and guidelines for the investment of operating surplus cash.  Surplus cash is defined as those funds exceeding the operating requirements of the Company and not immediately required for working capital or near term financial obligations. Scope This policy shall apply to the Company and all subsidiaries.  This investment policy will be reviewed periodically to ensure that it remains consistent with the overall objectives of the Company and with current financial trends. Approved Brokerage Institutions The Company may use the following brokerage institutions: Investment Objectives The basic objectives of the Company\u2019s investment program are, in order of priority: Eligible Investments United States Government Securities: Money Market funds Money Market Funds must be rated AAA or equivalent by at least one NRSROs. At time of purchase investment restrictions: Investment Products (Rating, Sector Concentration, Issuer Concentration) Purpose This policy describes the methodology used to monitor and account for GitLab\u2019s prepaid expenses. Prepaid Expenses Defined A Prepaid Expense arises when a cash disbursement is made for goods and services prior to realizing the associated benefits of the underlying goods and services. These transactions are recorded as assets until the goods and services are realized, at which point an expense is recorded. Our minimum threshold for recording prepaid expenses is $5,000 USD Identification and Recording of Prepaid Expenses Once a purchase request makes it through the company approval workflow, Accounting will take the following steps to ensure prepaid expenses are recorded accurately: The amount involved is equal to or exceeds $5,000. Prepaid expenses below $5,000 must be recorded as period expense immediately as incurred. The prepayment is for a time period greater than 12 months; (period of time is excluded for the Deposit of an event) if an amount is equal or greater than $50,000 on a single item in one invoice, it can be capitalized if the prepayment time period spans across fiscal quarters. Any deposits made for events in Marketing, Corporate or other departments of less than $5,000 USD will be recognized as an expense immediately on the day the invoice is received regardless of whether the event has taken place or not. The $5,000 clip level normally applies per invoice or per item. However, situations may exist that would require exercising business judgement on a case by case basis (i.e. any clip level by total amount of purchase per vendor). Also, there are situations when each individual prepaid may not meet the clip level but as a whole, these prepayments are similar in nature and are purchased in a bulk and therefore, the total amount of all the prepaid should be combined and used to decide if the prepayment should be recorded. Any exceptions should be pre-approved by the Corporate Controller or PAO. Amortization is recorded straight line based on a mid-month amortization method as follows:\nIf the first month of service begins on the 1st to the 15th of the month, a full month amortization will be recorded in the current month.  If the first month of service begins on the 16th to the last day of the month, amortization will begin on the 1st day of the subsequent month. Mid-Month Amortization Method does not apply to prepaid expenses with a monthly amortization equal to or greater than 50,000 USD or if the amortization if spread only over 1 period.  If monthly amortization is equal to or more than 50,000 USD, the first month amortization will be calculated based on actual number of days where services were rendered. Prepaid Not Paid:  For any prepaid expenses not processed for payment, an adjustment for \u201cprepaid not paid\u201d is posted to the respective prepaid expense account and AP manual adjustment account (GL Account 2001).  A prepaid expense is not treated as an asset if a liability remains in the AP sub-ledger.  Prepaid not paid adjustments are performed on a quarterly basis at minimum.\nAny deposits paid which will be held for more than 12 months such as security deposits or deposits to retain consultants will be booked to Security & Other Deposits (GL Account 1620) Prepaid Bonuses with a Clawback will be recorded to Prepaid Bonus w/Clawback (GL Account 1152) and will be amortized in accordance with the bonus agreement terms, using the mid-month convention. Finally, the balance is reviewed one last time when the Senior Accounting Manager performs a review of the financials prior to closing the period. Contribute related expenses Team member travel expenses are expensed in the period incurred. Costs related to third party vendors such as hotels, facilities, excursions are recorded to prepaid expenses and recognized as expense at the time of the event. Purpose To provide clear guidance concerning the identification and recording of items included in GitLab\u2019s accrued and other liability accounts. The purpose of monthly accrual processes is to allocate expenses to the proper accounting period and match expenses with related revenues. At the close of each month, accrual processes ensure that all expenses related to that month are correctly included in the company\u2019s financial statements. Additionally, this policy establishes standards and guidelines for ensuring that GitLab accounts for monthly accruals in a manner that is compliant with management\u2019s objectives and generally accepted accounting principles (GAAP). This policy applies to GitLab and all subsidiaries. Identification We require that all expenses be recorded where expense exceeds $5K USD or above, in the period the expense was incurred. The accrual process should be completed on a monthly/quarterly basis to ensure liabilities are recorded accurately in their respective periods and/or quarters. In order to meet industry standards for Month-End close deadlines the Finance and Operations teams are responsible to provide on Working Day -1 (ex. Friday July 30th = WD -1, Monday August 2nd = WD 1) the calculations, information, details and backup needed to support the accruals. The following items should be accrued monthly as necessary (note: this list is not all-inclusive): Accounts Payable: Wages and Compensation: Any other material obligation not mentioned above that is a liability of GitLab Timing Obligations that accrue over time are recorded throughout the accounting period in a methodical and rational manner. Obligations that accrue when an event occurs should be recorded at the time of the event. Factors that are considered in determining the time of recording accrued liabilities include: Procedural The Finance team is responsible for having procedures in place to reconcile accounts monthly and for keeping documentation to support accrued liabilities. Payables and accrued liabilities are recorded at face value, plus or minus any applicable adjustments. In most cases, the payable amount can be determined from the vendor bill. If not, then the amount should be verified against any relevant documents before recording the liability. When actual values are not available, the recorded value should be based on best available estimates. Estimates should be based on current market price and experience/history. The Sr. Accounting Manager is responsible for performing an overall review of accrued liabilities, one to three business days after accounts payable closes each month, to help ensure that all expenses are captured accurately. Please see Procure-to-Pay Overview Foreign currency translation describes the method used in converting a foreign entity\u2019s functional currency (as determined and documented in GitLab.com>Finance>Issues>#630) to the reporting entity\u2019s financial statement currency. Prior to translating the foreign entity\u2019s financial statements into the reporting entity\u2019s currency, the foreign entity\u2019s financials must be prepared in accordance with generally accepted accounting principles (GAAP), specifically under Financial Accounting Standards Board (FASB) Statement No.52. GitLab\u2019s financial statement reporting currency is USD. The functional currency of our non-U.S. subsidiaries is the local currency. Changes in foreign currency translation are recorded in other comprehensive income (loss), which is reported in the consolidated statement of equity and ultimately carried over to the consolidated balance sheet, under equity. Exchange Rates Exchange rates used in the currency translation process vary across the three primary financial statement components: Transaction Risk vs Translation Risk Currency Transaction Risk Currency transaction risk is due to company transactions denominated in foreign currencies. These transactions must be restated into the entity functional currency equivalents before they can be recorded. Gains(losses) are recognized when a payment is made or interim balance sheet dates. Currency Translation Risk Currency translation risk occurs due to the company owning assets and liabilities denominated in a foreign currency. Cumulative Translation Adjustment A cumulative translation adjustment (CTA) is an entry to the comprehensive income section of a translated balance sheet that summarizes the gains(losses) resulting from exchange rate differences over time. Currency values shift constantly, affecting how a currency is valued against others. The CTA is a line item in the consolidated balance sheet that captures gains(losses) associated with international business activity and exposure to foreign markets. The changes in CTA are recorded in other comprehensive income (loss). CTA\u2019s are required under GAAP since they help distinguish between actual operating gains(losses) and those that arise from the currency translation process. Additional information on our reporting standards surrounding CTA\u2019s can be found in FASB Topic 830, \u201cForeign Currency Matters.\u201d Recording CTA - Exchange rate gains and losses for individual transactions are captured automatically by our ERP system, NetSuite. However, a CTA entry must be made in order to properly distinguish currency translation gains(losses) from other general gains(losses) in the consolidated financial statements. This entry includes reconciliation of any inter-company activity that generates foreign exchange gains(losses). The CTA is made on a monthly basis as part of our financial statement reporting cycle. Scope This policy establishes GitLab\u2019s guidelines regarding the structure, responsibilities and requirements underlying the chart of accounts (COA). Purpose This policy establishes formal responsibilities and accountabilities for how GitLab handles requests for new, modified or closed data elements on the COA. The Controller is responsible for all aspects of financial accounting and reporting, and governs the COA.  All requests for new or modified (including closure/deactivation) COA segments, hierarchies, and configuration attributes are subject to approval by the Finance team. Changes to the COA All requests for new or modified accounts must be submitted to the Accounting Manager for review and approval through a request using the Finance issue tracker. There are other stakeholders associated with the COA that may influence certain business decisions or financial system configurations. The Controller and Accounting Manager will include selected stakeholders in the related procedures and processes when and if appropriate. Potential stakeholders include, but may not be limited to: The general ledger attributes subject to this policy will be defined by the Controller based upon factors including but not limited to: Once an amendment to the COA has been approved, the Accounting Manager will ensure the necessary changes are implemented by updating and then closing the issue. Administration The COA is maintained in NetSuite. Changes to the COA can only be made by the Controller and/or Accounting Manager. Scope This policy applies to GitLab Inc. (\u201cGitLab\u201d or the \u201cCompany\u201d) and all of its subsidiaries. Purpose To establish guidelines for assessing, preparing and reviewing balance sheet account reconciliations on a consistent basis in accordance with corporate policies and US Generally Accepted Accounting Principles (\u201cGAAP\u201d). Policy Account reconciliations are prepared and reviewed monthly or quarterly for each active balance sheet account at the natural account level based upon the risk rating assessed (see risk rating assessment below).  Account reconciliations will be prepared consolidated in USD or by entity in the respective functional currency. Each month end close the Accounting Manager assigns each balance sheet account or groups of accounts to its respective preparer and reviewer using FloQast (Account Reconciliation Tool).  The assignments are set once and will roll over into the next accounting period.  The Accounting Manager will make changes to assignments as needed.  The preparer and reviewers can not be the same person to ensure segregation of duties. The balances from NetSuite will be auto synced into FloQast each period end so the preparers can prepare their recons based on the NetSuite ending balance for their respective assigned accounts. The preparer(s) will ensure the following: The reviewer(s) will ensure the following: FloQast will auto sign-off the recon on our behalf if the following is met: If the balance changes after review, approval or auto sign-off the recon will be automatically unreconciled by FloQast and the preparer and reviewers will need to follow the above steps again. Risk Rating Assessment Once a year in the beginning of Q4, the Controller and/or CFO will review each active balance sheet account and rate it from High, Medium and Low.  The risk level of each account is evaluated based both on the quantitative value (to determine materiality) and the qualitative factors listed below: High Risk Accounts will be reconciled by the preparer monthly (for the exception of tax and equity related accounts which will be reconciled quarterly) and will require 1st level review by an accounting manager or above and 2nd level review by the CFO or PAO. Medium Risk Accounts will be reconciled by the preparer monthly and will require 1st level review by an accounting manager or above. Low Risk Accounts will be reconciled by the preparer monthly or quarterly and will require 1st level review by an accounting manager or above. If there is no activity and/or the account balance is zero the reconciliation will be auto certified by BlackLine. Once each reconciliation is reviewed/approved the account reconciliation is locked in BlackLine and no further changes can be made for that period. Completeness Check Once the period is officially closed the Senior Accounting Manager will ensure all recons are in approved, reviewed or in a auto-certified status before moving into the next period."
    },
    {
        "title": "IT Enterprise Applications",
        "url": "https://handbook.gitlab.com/handbook/business-technology/",
        "content": "The IT Enterprise Applications oversees the business technology architecture and systems that power GitLab as a business entity. We ensure that the systems are fit-for-purpose, available, reliable, integrated and secure.\nWe continue to build business aligned technology to run operations, layering integration and automations to support remote work, enhance team member and customer experience, and generate value. Be a trusted business partner providing world-class solutions and value. Provide a stable, secure, compliant and highly integrated solutions ecosystem to empower business with technology and services that enables productivity to fuel growth of GitLab. Company-wide Business Technology - Tech Stack Application EcoSystem We Support Services Services We Support: Finance Systems Service Desk Partnerships & Collaborations with: Join Our Team - Current Job Openings Contact Us Other References"
    },
    {
        "title": "Global Travel and Expense Policy",
        "url": "https://handbook.gitlab.com/handbook/finance/expenses/",
        "content": "GitLab\u2019s Global Travel & Expense Policy is meant to provide guidance to all Team Members to ensure that we act in the best interest of our Company at all times. The purpose of this policy is to: Team Members: Managers and/or Budget Owners: Accounting: Finance: Payment method Following expenses are categorized for reimbursement purposes with specific policy definition attached to it. The limits below are in USD, please use local currency equivalents when considering other currencies. All business related flights need to be booked through Navan, and will be paid by GitLab travel card. For each flight search, Navan determines the price in real time. Also to note that while it is sometimes possible to find a cheaper flight outside of Navan, we get overall better rates in the aggregate with the buying power of the whole company. Even if a flight is cheaper outside of Navan, please book in Navan. Also submit a request under the Expenses -> Travel Related Expenses page of HelpLab with screenshots of Navan\u2019s rate and the other airlines rate so the Expense team can address with Navan. The airfare policy in Navan is set up as a \u201cDynamic Policy\u201d which calculates a fair market price for every search based on travel dates and destinations. Any purchases that are over 20% of the Dynamic Policy will be flagged for further review by your manager. Also note that anything booked outside of Navan will flag as \u201cOut of Policy\u201d, and will need to be reviewed by your manager and the AP team. \nExpense Type / Navan Policy Category: Airfare\n Expense Type / Navan Policy Category: Airfare A. Third Party Liability Purchase the liability insurance that is excess of the standard inclusion of State minimum coverage in the rental agreement at the rental agency. GitLab\u2019s insurance policy provides liability insurance for rental cars while conducting company business, but it may be excess over any underlying liability coverage through the driver or credit card company used to purchase the rental. Purchase the liability offered at the rental counter if there are Non-US Team Members renting autos in the US or Canada. While workers\u2019 compensation would protect an injured US Team Member, other passengers may have the right to sue. To ensure that GitLab has protection when a Non-US Team Member invites another person into the car we recommend the purchase of this insurance when offered at the rental counter. B. Physical Damage - Collision Damage Waiver Do Not purchase the Collision Damage Waiver offered at the rental counter. GitLab purchases coverage for damage to rented vehicles. If travel to Mexico is required, purchase the liability insurance for Mexico offered at the rental counter. You should verify that the rental agreement clearly states that the vehicle may be driven into Mexico and liability coverage will apply. Countries other than the US and Canada: In the event of an accident resulting in damage to the rental car, the Non-US rental agency will charge the credit card used to make the reservation with an estimated amount of repair costs if insurance is not purchased. If this happens, GitLab does not purchase Foreign Corporate Hired Auto Physical Damage Coverage to reimburse for damages. \nExpense Type / Navan Policy Category: Rental cars\n Expense Type / Navan Policy Category: Rental cars \nExpense Type / Navan Policy Category: Lodging\n Expense Type / Navan Policy Category: Lodging \nExpense Type / Navan Policy Category: Traveling: meals for myself\n Expense Type / Navan Policy Category: Traveling: meals for myself \nExpense Type / Navan Policy Category: Distance Driven\n Expense Type / Navan Policy Category: Distance Driven \nExpense Type / Navan Policy Category: Train travel\n Expense Type / Navan Policy Category: Train travel \nExpense Type / Navan Policy Category: Public transport, tolls & parking\n Expense Type / Navan Policy Category: Public transport, tolls & parking The company will cover all work-related travel expenses. This includes lodging and meals during the part of the trip that is work-related. Depending on the distance of your travel, it can also include one day before and one day after the work related business. For example, if you are attending a 3 day conference in a jet lag-inducing location, the company will cover your lodging and meals those 3 days as well as one day before and one day after. \nExpense Type / Navan Policy Category: Traveling: internet access\n Expense Type / Navan Policy Category: Traveling: internet access \n\nExpense Type / Navan Policy Category: Other\nGL Code NON-COGS: 6080 - Other Travel- Visas, Permits, Covid Tests\nGL Code COGS: 5080 - Other Travel- Visas, Permits, Covid Tests COGS\n\n \nExpense Type / Navan Policy Category: Books, dues & subscriptions\n Expense Type / Navan Policy Category: Books, dues & subscriptions \nExpense Type / Navan Policy Category: Office Supplies\n Expense Type / Navan Policy Category: Office Supplies \n\nExpense Type / Navan Policy Category: Other\nGL Code NON-COGS: 6076 - Coworking Space\nGL Code COGS: 5076 - Coworking Space COGS\n\n \nExpense Type / Navan Policy Category: G&D (Growth & Development)\n Expense Type / Navan Policy Category: G&D (Growth & Development) \nExpense Type / Navan Policy Category: Work from home\n Expense Type / Navan Policy Category: Work from home \n\nExpense Type / Navan Policy Category: Gifts - internal\nClassification: EmployeeGiftsFlowers\n\n \nExpense Type / Navan Policy Category: Internet access\n Expense Type / Navan Policy Category: Internet access \nExpense Type / Navan Policy Category: Office Supplies\n Expense Type / Navan Policy Category: Office Supplies $5,000 needs to go through the procurement process in Zip. \n\nExpense Type / Navan Policy Category: Other\nGL Code NON-COGS: Multiple- will be required to choose GL account\nGL Code COGS: Multiple- will be required to choose GL account\n\n \nExpense Type / Navan Policy Category: Entertaining clients\n Expense Type / Navan Policy Category: Entertaining clients \nExpense Type / Navan Policy Category: Office Supplies\n Expense Type / Navan Policy Category: Office Supplies \nExpense Type / Navan Policy Category: Cell phone\n Expense Type / Navan Policy Category: Cell phone \nExpense Type / Navan Policy Category: Shipping & postage\n Expense Type / Navan Policy Category: Shipping & postage \nExpense Type / Navan Policy Category: G&D (Growth & Development)\n Expense Type / Navan Policy Category: G&D (Growth & Development) \n\nExpense Type / Navan Policy Category: Team members to please use T&E accounts for their own individual expenses relating to any team building events (ie meals, travel, transportation)\nClassification: FY25 Team Building Budget\n\n \n\nExpense Type / Navan Policy Category: Other\nGL Code NON-COGS: 6065 - Training & Development\nGL Code COGS: 5065 - Training & Development COGS\n\n \n\nExpense Type / Navan Policy Category: Other\nGL Code NON-COGS: 6060 - Software Subscriptions\nGL Code COGS: 5060 - Software Subscriptions COGS\n\n \n\nExpense Type / Navan Policy Category: Other\nGL Code NON-COGS: 6080 - Other Travel- Visas, Permits, Covid Tests\nGL Code COGS: 5080 - Other Travel- Visas, Permits, Covid Tests COGS\n\n If a Team Member is missing a receipt, a Missing Receipt Affidavit will need to be completed and attached to the expense when submitted. Missing Receipt Affidavit located here (please ensure to make a copy). When attaching the receipt affidavit, the Team Member should attach the document as a PDF. The procedure by which reimbursable expenses are processed varies and is dependent on contributor legal status (e.g. independent contractor, Team Member) and subsidiary assignment. Global Upside, Remote.com and Papaya Global iiPay CXC Global Please see Navan Physical Card policy here. Navan Purchase Card These virtual cards within Navan are only utilized by the AP team, and they are used solely for providing new Team Members with a $1,500 USD (or local currency equivalent) stipend for their home office set up. These cards were set up to ensure that Team Members do not spend outside of this amount, as well as ensuring the stipend is only available during their first year of employment. Within the controls in Navan, these cards are only accessible to the AP Admins team, and are not accessible to Team Members. Below is some more information to help you get set up with your Navan account. This policy applies to all GitLab team members registering, or maintaining a registration for, GitLab-related Domain Names, including GitLab-related Domain Names registered or used for sandbox or testing purposes. Domain names are key assets in GitLab\u2019s intellectual property portfolio. Centralizing the registration and maintainance of domain names under the Infrastructure Shared Services group using GitLab\u2019s approved domain name registrar helps us track and protect these valuable assets. Please refer to the Domain Names and DNS Records Handbook Page. \u201cGitLab-related Domain Names\u201d when used in this policy means any domain name: This relates To Laptop Advances only - If more information is required please email the AP team on AP@gitlab.com If a team member whom you manage has left GitLab and comes to you with final expenses that are valid for reimbursement, please verify that they were not already processed in Navan and then contact Accounts Payable. You must submit valid receipts and a completed copy of the Expense Reimbursement template along with your approval. Please note that we may also ask the terminated team member to provide valid banking details in order to process the payment to them. AP will do their best to process and pay the reimbursement to the individual within 1 week."
    },
    {
        "title": "Financial Planning & Analysis",
        "url": "https://handbook.gitlab.com/handbook/finance/financial-planning-and-analysis/",
        "content": "Maximize GitLab\u2019s long-term valuation by enabling e-group and FP&A to plan, prioritize, and execute effectively FP&A comprises five different sub-teams to support our FP&A goals: Final FY24 Planning documents are on Google Drive, please find the links in the Internal Handbook. These include: All of the data for these planning documents are locked in our Adaptive Planning instance (Adaptive Planning can only be accessed by FP&A.) Key planning milestones are listed below. For a more detailed timeline and planning checklist please engage your FP&A business partner. The LRO is refreshed on an annual basis, occurring shortly after the fiscal year plan is finalized. After the LRO is refreshed, there may be additional updates throughout the remainder of the year, on a quarterly and ad-hoc basis to determine whether near-term priorities and funding are needed in order to achieve long-term goals and financial targets. As part of the quarterly and ad-hoc updates to LRO, the following are included: The following are inputs in the LRO refresh and subsequent LRO updates: The Corporate Finance team leads the LRO refresh and updates in collaboration with: e-group members to determine key investments, capabilities, and dependencies; GTM Finance team for sales productivity/capacity models, CTB, and bookings attainment; G&A Finance team for total rewards strategy, benefit assumptions; and the R&D Finance team to help inform on allocations, hosting/infrastructure expenses. For GitLab\u2019s top growth drivers and new products, drive and document alignment between contributors to success. Writing a business plan drives clarity of thought and operations. Agree on governance models to manage initiative success and cross-functional accountability. At a minimum, each business plan should cover: GitLab\u2019s FP&A team participates in a rigorous monthly close process. These dates are based on an 8-day accounting close. Corporate FP&A will confirm the close date with the accounting team and update the FP&A Close calendar in Google accordingly. For FY23, the target is to close by WD 5 with full consolidation (including tax entries, eliminations) by WD 10. The Accounting close calendar can be found here. Each month after the financials have been published, GitLab reviews all aspects of the business including Corporate Metrics, Bookings, Revenue, Gross Margins, Expenses. The goal of this meeting is to do a comprehensive review so that finance leadership has a pulse on the business and signs off on the financials. Based on insights from variance analysis, the FP&A team makes actionable recommendations to the CFO and e-group to ensure continued performance to Plan/Forecast. The variance analysis will compare department budgets with actual results and examine any material differences between budgeted and actual costs. Additionally, the actuals for expenses will be compared to the quarterly rolling forecast. The expenses are reviewed at the divisional department level, allowing GitLab to measure progress in meeting its Plan or rolling forecast. The team also evaluates the accuracy of forecasts and will make adjustments to the next rolling forecast. The study of differences between actuals and the Plan or Forecast. During the variance analysis processes the GitLab FP&A team analyzes and isolates any variance in question to the lowest level possible. The team reviews detailed items in order to identify the root cause of the variance. This could include transaction date, cost center, vendor, location, department or additional low level details. The FP&A team takes the following into consideration while evaluating variances in relation to materiality thresholds: The FP&A team delivers an FP&A expense flux review document at each monthly close, documenting and quantifying business drivers for variance. The goal is two-fold: We measure our team performance based on our forecast accuracy, also known as variance percentage. Variance percentage is defined as the difference between actuals and Plan or rolling forecast. We calculate it as follows: Variance analysis should address any inputs or additional requests from the last Variance meeting, as applicable. Generally accepted accounting principles (GAAP) does not provide definitive guidance in distinguishing material information from immaterial information. Therefore, GitLab uses a percentage based approach for defining materiality thresholds and can be found below. The Plan vs Actuals vs Forecast Sisense dashboard provides the data for the threshold analysis via a color coded legend. Our goal is to have revenue and EBIT variance percentage within +/- 2% on a quarterly basis.\nKey accounts and expenses by division should be within +/- 2% versus Plan or rolling quarterly forecast every quarter. EVPs are held accountable to meet the budget in dollars that they are given. The budgets typically are broken into headcount and program spend. Each finance business partner will run a meeting with their Finance leader and the EVP to review the past month. The information should be presented as timely as possible. Given the accounting close is 8 days, the team is asked to use pre-close numbers for the review to increase the speed of information. During the meeting, the Finance Business Partners will review GitLab results in addition to a detailed overview. Each division can expect to review the following during the monthly meetings: Following the month-end close, the Finance Business Partners will create a variance deck and distribute department income statements to the related budget owners and the e-group members. Each department is then responsible for comparing these reports, which contain actual costs, to the budget. Departments, with guidance from the Finance Business Partners, should analyze their data and if necessary, discuss items of interest and take appropriate action. Any questions regarding the cost data should be discussed with the Finance Business Partner. The close timeline for each quarter follows the timeline above for monthly close and includes additional key dates and processes: As a public company we share financial results publicly after the close of each fiscal quarter or fiscal year. The purpose, timeline, and deliverables can be found on our Investor Relations page here. Financial Planning & Analysis (FP&A) team is the owner of SSOT for GitLab\u2019s Hiring Plan which contributes to our Headcount Forecast. Headcount Forecast is a live forecast in Workday Adaptive (a financial planning software) Hiring Plan is maintained by the Finance Business Partners (FBPs) and shared with Talent Acquisition (TA) team and Business Partners (BPs) Finance owns the Hiring Plan to ensure there is only one Headcount Forecast and Hiring Plan for the business Hiring Plan increases our predictability as a company and streamlines the hiring process Based on historical time to start data, new requisitions released via RLOA in a quarter can be expected to start in the following quarter at the earliest For questions specific to TA\u2019s process and REQ creation, please refer to TA\u2019s section of the handbook Position ID is a unique identifier and is the link between approved headcount and the Hiring Plan FP&A and TA discussed and agreed upon the above process. This SSOT process ensures consistency in Hiring Plan execution Planned Positions include all Net New positions to existing GitLab active employees. Backfill Positions include all positions created due to departure or termination of an existing employee. Both PID and GHPID are created and maintained by FP&A team as unique identifiers in Hiring Plan All PIDs are created by the Corporate FP&A team and are tied to Headcount Forecast (including Hiring Plan) FP&A Position IDs increase visibility and accuracy for headcount forecasting (count and dollars) and simplify & provide transparency on modeled headcount (attrition and backfill). All GHPIDs are system-generated by a FP&A internal Google Sheet FP&A team is the owner and maintainer of SSOT for GitLab\u2019s Hiring Plan The FP&A team and Talent Acquisition Managers collaborate to ensure understanding and implementation of the most up-to-date view of forecasted headcount-related expenses. This interlock enables GitLab to respond quickly and make live decisions through a weekly P&L forecast and the rolling list of asks (RLOA) process. This process also ensures alignment and accuracy of headcount forecasts when FP&A locks its annual plan and monthly rolling forecasts. This process also tracks company metrics against Wall Street expectations related to non-GAAP operating income and non-GAAP earnings per share. Please see the Headcount Metrics and Processes page for definitions and key metrics. The Hiring Plan data is divided into four headcount forecast templates, one for each cost center with Cost of Goods Sold allocated among Sales and R&D. The data and analysis from the four templates roll into the Summary file. The four templates can be found in the Headcount Live Summary Dashboard. Unless otherwise noted in the HC Forecast calendar or communicated via Slack, the interlock process occurs weekly as follows: By noon (PST) Monday, the Corp FP&A team downloads the data from Adaptive and refreshes the headcount forecast templates. Talent Acquisition also refreshes the headcount forecast templates with the latest data from Greenhouse. By end of day (PST) Wednesday, the Talent Acquisition Managers and Recruiters review their respective roles line by line and make adjustments and comments related to expected start dates and other role details provided by the Finance Business Partners. If no indication is made for a specific role in the headcount forecast template, Talent Acquisition signals that the current indication is reasonable and indicative of a 50/50 \u201cmost-realistic\u201d forecast. The Talent Acquisition Managers also pay close attention to any recruiting capacity restraints within any given quarter. In order to maximize transparency and understanding of any changes, the Talent Acquisition Managers and Recruiters provide comments (e.g., wrong GHP ID, rejection of an offer, delay due to business decision, etc.) for specific roles. By end of day (PST) Thursday, the Finance Business Partners update Adaptive with their best estimates of the start dates of all planned personnel for the forecast period based on the input from Talent Acquisition in the headcount forecast templates. This reflects a 50/50 \u201cmost realistic\u201d view of headcount expenses/timing. By end of day (PST) Friday, the Corp FP&A team sends a P&L snapshot to the CFO incorporating any headcount forecast adjustments. Note: P&L snapshots are not provided during accounting close. Communication related to the interlock takes place in the #fpa-ta_headcount_forecast Slack channel. All parties involved in the interlock are also granted access to the \u201cHC Forecast\u201d Google Calendar. The Finance Business Partners and Talent Acquisition Managers collaborate to provide the most current and 50/50 \u201cmost-realistic\u201d view of headcount-related expenses. This is done through the interlock process in the headcount forecast template and is ultimately uploaded into the Planned Personnel sheet in Adaptive. The inputs loaded into Adaptive are then used to provide the CFO a weekly P&L snapshot in order to facilitate in-quarter spending decisions and ensure the company tracks vs.  guidance and consensus expectations. The primary mechanism to ensure efficient spend of company assets is the Procure to Pay process, and specifically completion of the vendor and contract approval workflow prior to authorization. The procurement team or your finance business partner can assist with questions related to this process. The second mechanism is the budget vs actual review to determine reasons for variances vs plan. See the section on Variance Meeting with CFO\nand Variance Analysis. A manual on how to update and maintain Adaptive integration can be found here. This document is maintained by the Corporate FP&A team. Adaptive Quarterly Roadmap Throughout quarter, FP&A maintains alignment with business needs. During quarterly RLOA process, FP&A team finalizes RLOA proposal to share with e-group, and communicates decisions to functional leaders to enable business execution. Below is the timeline Note: WD is defined as Working Days, which are Mondays through Fridays, excluding Federal holidays. File Welcome to the R&D Finance Handbook! Ellen Boyd, Director, FP&A @eboyd1 @eboyd1 can approve Coupa and Greenhouse Reqs as needed for Finance Business Partners."
    },
    
    {
        "title": "The GitLab Procurement Team",
        "url": "https://handbook.gitlab.com/handbook/finance/procurement/",
        "content": "The Procurement team manages GitLab\u2019s Supplier Lifecycle through the process of strategically vetting and selecting vendors, negotiating commercial terms, the purchasing of goods and services, and managing the renewal or vendor offboarding process.  Division alignment for spend over >$25k USD / year: Procurement is a cross-functional team that supports GitLab as a public company. We have four key objectives monitored in the following ways: The Procurement team is responsible for ensuring there is a process for suppliers to be managed throughout their lifecycle of doing business with GitLab from initial selection and contracting to recurring reviews and renewals to cancellation. All new spend, changing of vendors for existing services, and market reviews every 3 years for existing contracts should follow the RFP and Vendor Selection process, unless approved by your Procurement Category Manager, to ensure we are choosing the best partner for GitLab with the best commercial terms. This must be done prior to verbally agreeing to terms or contracting with any new or existing vendor. Before sharing details and/or confidential information regarding GitLab business needs, obtain a Mutual Non-Disclosure Agreement from the potential vendor(s). Refer to the Signature Authorization Matrix for signing authority. All vendors must adhere to the GitLab Partner Code of Ethics. It is mandatory all vendors contractually adhere to this if they would like to do business with us. (Note these are typically not required in event related agreements unless the vendor is providing services). Depending on the amount of spend, Procurement will assist or lead in negotiating the pricing and commercial terms of the contract. Depending on the types of data shared with the vendor, Privacy and Security will need to complete a review of the vendor For more information on these requirements and steps, see the Review Steps, Timeline, and Considerations section All work that is done with a vendor must have a completed contract to be compliant and work may not be started until a contract is in place. Contracts include NDAs, Master Service Agreements and Statements of Works. Our legal team assists with this step in the process. Please see the legal review process for more details. Additionally, please note that a small number of team members can sign agreements on behalf of GitLab - please see the Authorization Matrix for more details. In order for vendors to be paid, they need to complete their onboarding in our systems. Please see the New Vendor Onboarding section for more details. Procurement will work with you through the Quarterly Procurement & Business Spotlights to review upcoming renewals and cancellations, new spend projects, and identifying vendor\u2019s segmentation tier: Strategic, Niche, Commodity, or Transactional. Identifying the Segmentation Tier your supplier(s) falls within helps determine the right vendor management approach, e.g. renew the contract, RFP, business reviews on a recurring cadence, continuous improvement plans, etc. If holding a business review with a vendor, the following topics should be discussed: On a quarterly basis, the Procurement team will meet with business stakeholders in each department to review a rolling 12 month list of renewals, focusing on the upcoming 2 quarters. This list is pulled from Zip and Coupa. The list should be reviewed and prioritized with the business owners. The renewal process should start at least 90 days ahead of the renewal date providing ample time to review the terms and decide: The following methods will be used to capture cancellations (which include terminations and/or non-renewals): For each of the above, if a cancellation is desired (which include terminations and/or non-renewals) please follow the \u201cCancellation Process\u201d outlined below: Upcoming terminations/non-renewals should be discussed with Procurement during the Quarterly Category Spotlight meetings that Procurement holds with category leads/budget owners. As Procurement is made aware of upcoming cancellations during these meetings, Procurement will review on a quarterly basis any known cancellations with Legal to ensure notification requirements are met. Procurement and Legal will then work with the business owner on completing the above process. If a cancellation is determined outside of this quarterly cadence, notify your Procurement Category Manager and complete the above process as soon as possible. Anytime a group of suppliers are being evaluated for services/goods or a purchase is being made on behalf of GitLab that does not qualify as a personal expense or meet the list of exceptions, Procurement must be engaged BEFORE a purchase and/or work can begin. Start the Procurement Process Majority of the Procurement Process lives within our Procurement system called Zip. You can access Zip via your Okta home page, or if you need Zip access, submit an access request here. For more Zip training materials, review the Zip End Users Guide and the Tips for Submitting a Zip Request page. Depending on a few factors of your purchase, there are different ways to engage Procurement and start the Procurement process: Requests can take 5 days to 3+ weeks for processing depending on a number of factors that will impact the time for review of a Purchase Request including, but not limited to: Each review\u2019s targeted approval time is outlined below, but as mentioned above, this is dependent on many factors and the accuracy and completeness of information provided by the requester. If your request meets any of the additional approval criterias outlined below, please plan accordingly and submit your Zip request allowing each cross-functional team enough time to complete their review. Please follow the steps outlined for urgent requests that cannot meet the below timeline and have specific and quantifiable impact to the business. Note: The amount of time for review, and to reach execution, is based on the details below. Use these SLA\u2019s as guidelines, noting that each contract review process is unique and if additional terms, requirements, and/or risks are identified the timeline for completion may be extended. The ability for GitLab to process and work efficiently through an agreement negotiation relies on the vendor, and vendor counsel, to respond promptly to GitLab red-lines and comments. Types of Vendors and Review Times Types of Agreements Negotiation, Security, Privacy, and PeopleOps reviews are only required if the purchase request meets certain criteria, as described below. In the event two or more of these activities are required, they will happen in parallel to one another and Legal\u2019s review. If you are unable to plan and have a legitimate reason to escalate a purchase request, follow the process below. Exceptions to the PO Policy are: The procurement team from a compliance and risk perspective has developed a process to handle third party risk to reduce the risk of the following: When any of the following is met: Any time GitLab engages with a third party for the procurement of goods and/or services, which require GitLab to engage in a contract, the GitLab Legal Procurement team will review the terms and conditions. The purpose of this team is to review the contract which GitLab will enter into, and ensure the following: In addition to ensuring terms and conditions, the GitLab Legal Procurement team collaborates frequently with procurement and business stakeholders to ensure any (and all) contracts align with the needs of the team. The GitLab Legal Procurement team addresses the needs of stakeholders ranging from complex technical application and platform services, to creating and drafting event contracts to meet the needs of GitLab events. As GitLab does with its own customers, agreements with third parties include obligations that vendors have to GitLab. These can include, but are not limited to: For any large internal events with a total cost greater than $1M, such as SKO, President\u2019s Club, Commit, etc, the following should be completed before any contracts are executed or any work is conducted. The planning stages for events of this size should be completed at least 18-24 months prior to the actual event. This allows for ample time to get the necessary internal approvals, run any RFPs needed, and book large hotel blocks or buyouts. If you have a request to donate GitLab funds to a charitable cause, please refer to the Philanthropy Policy for more information about who we support, how we support, exclusions, and delegations/approvals. Once all necessary approvals have been documented for your charitable contribution, if the donation is >$5,000, we will need to set the recipient up in Coupa and follow the PO process in order to issue payment. Please create a purchase request in Zip to get the organization registered and to process payment. If the donation is <$5,000, please contact AP@gitlab.com to process payment as an exception to the PO process. Please note that if it is a new recipient that we have not paid before, an invitation to register in Coupa will be sent to the main contact on file to get their payment & tax information set up in the system. Here are some useful links with information on the Coupa Supplier Portal: GitLab will from time-to-time bring in the expertise of External Consultants to work on a specific task for a pre-defined period. Depending on the nature of this engagement and the tasks at hand, the aforementioned External Consultant(s) may require access to certain GitLab systems and information which may include Slack, Customer Data, and Infrastructure Environments. Once this process is complete the External Consultant will be added to ContractWorks and not Workday which is strictly for GitLab Team Members. For questions on our policy and how to submit your home office expenses, including which categories in Navan to use, please refer to the Global Travel and Expenses handbook page\u2019s \u201cEquipment\u201d section. For any additional questions about this process or about utilizing your Virtual Card (new hires only), please reach out in the #expense-reporting-inquiries Slack channel or email expenses@gitlab.com. Individual use software is characterized as software essential for executing job responsibilities and that is distinct from the existing tools and platforms already owned or accessible to your team. An individual\u2019s annual expenditure on Individual Use software should not surpass $5,000. Should the cost of your software exceed this threshold, or if multiple people on your team need access, please follow the Procurement process for submitting a new purchase request. Note that all software purchases charged to either personal or corporate credit cards will be DENIED for reimbursement. You must follow the process below to cover your software purchases, which will be paid via Navan virtual card once all necessary approvals are obtained and documented. If you have documents from a vendor that are not cost-related, such as a Trial/Demo Agreement, Engagement Letter, etc., please open a ZIP request selecting a Request a Demo/Trial ($0 Contracts) workflow and proceed with completing the form.  On the request, provide received from the vendor documents for Legal and Security review. Please, do not sign any document before Legal and Security approvals are collected. After Legal and Security approvals are provided, the Procurement Team will route documents first for GitLab signature and then to the vendor for countersignature. If purchasing Home Office Equipment and/or Software for your individual work use that is <$5K USD, see Other Services since a Zip Purchase Request is not required in these instances. Getting started with Zip: Depending on the commodity type of your request, specific conditional questions will populate in the Zip request intake form to include the required approval groups in the workflow and provide them with the needed information to review your request. To help ensure your request is completed within the SLAs, follow these tips: When procuring goods/services, GitLab will enter into an agreement with its vendors. This agreement will take the form of either, (i) a negotiated agreement which establishes the parties rights and obligations, or (ii) reference to the GitLab Standard Vendor Terms and Conditions (seen below). With respect to either form of agreement, the terms and conditions will be referenced (and applicable) for any transaction document, Order Form, SOW or other document establishing GitLab\u2019s intent to procure goods/services."
    },
    
    {
        "title": "Board of Directors and Corporate Governance",
        "url": "https://handbook.gitlab.com/handbook/board-meetings/",
        "content": "This page is intended to capture GitLab Board practices, but we evolve these over time and the page may not capture all changes. The source of truth for Board details is GitLab\u2019s Investor Relations site. Audit Committee Charter Meeting Process The Staff EBA to the CFO is the DRI of scheduling the quarterly Audit Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA All Audit Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Audit Committee meetings are attended by: Compensation and Leadership Development Committee Charter Meeting Process The Legal and People Group EBAs are the DRIs of scheduling the quarterly Compensation and Leadership Development Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA All Compensation and Leadership Development Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Compensation and Leadership Development Committee meetings are attended by: Nominating and Corporate Governance Committee Charter Meeting Process The Staff EBA to the CEO is the DRI of scheduling the quarterly Nominating & Corporate Governance Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA All Nominating & Corporate Governance Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Nominating and Corporate Governance Committee meetings are attended by: Mergers and Acquisitions Committee Charter Meeting Process The Staff EBA to the CEO is the DRI of scheduling the Mergers and Acquisitions Committee meeting in conjunction with the Chairperson, Management DRI and their Sr. EBA All Mergers and Acquisitions Committee materials being reviewed during the meeting will be uploaded into Boardvantage 5 business days prior to the Committee meeting by the Corporate Paralegal. Committee members will be notified of such by the Management DRI. Mergers and Acquisitions Committee meetings are attended by: Board meetings can happen remotely or in-person. We establish the meeting calendar in advance of the coming fiscal year. During this time, we agree on meeting locations. The Staff EBA to the CEO shall ensure that there are separate calendar invites for all attendees within each session, all including exact session start and end times, the appropriate Zoom link, and links to the agenda document. Any supplemental materials are required to be linked in the agenda document for each session. This is the outline of a past agenda, but we adapt agenda based on what is important to discuss: This section is updated after every Board Meeting by the Staff EBA to the CFO for the next Board Meeting. GitLab uses Nasdaq\u2019s Boardvantage (NBV) portal for the electronic dissemination and storage of materials relating to GitLab\u2019s Board Meetings. For a more detailed overview of navigating the NBV portal, please click here to view the Internal Reference Guide. We usually have a Board Dinner on the evening before a Board Meeting. The EBA to the CEO is responsible for coordinating this dinner. Board Members, Local E-Group members, and the CoS to the CEO are all optional attendees. Bios for attendees of the Board Dinner should be sent by the EBA to the CEO 3 business days in advance of the Board Dinner. Each quarter, E-Group can choose to invite an additional team member as a Key Talent Guest. If this is desired in a specific quarter, at least a month before the dinner, the CoS to the CEO will gather nominations and ensure that E-Group has identified an invitee. Criteria for consideration includes: Once the Key Talent Guest has been identified, it is the relevant E-Group team member\u2019s responsibility to ensure that managers of this person are aware of the invite. The EBA to the CEO will then confirm that the guest is able to join. If not, the invite will go to the runner up. Once a Key Talent Guest is confirmed, the EBA to the CEO should enter their name in the Key Talent Board Dinner Guests. GitLab will cover this person\u2019s travel expenses. A person\u2019s location will not be considered in the selection criteria though the person\u2019s travel must be allowed under GitLab\u2019s travel policies and guidelines. As part of joining the dinner, the Key Talent Guest should come prepared to discuss: Though no formal presentation is required, the Key Talent Guest should advise on how they want to discuss these topics with the Board and E-Group and coordinate with the EBA to the CEO. The EBA to the CEO will ensure that the Key Talent Guest has dedicated time at the dinner. Past and future Key Talent Dinner Guests are listed below. Board member onboarding from an internal processes checklist perspective: To be completed prior to onboarding: Board member onboarding from a GitLab orientation perspective: New Director will be provided with: Links to relevant Handbook pages, including: Certificate of Incorporation Access to the Legal Board Drive Org chart Summary of Director and Officer Liability Insurance Executed Indemnification Agreement Update Board distribution list with Board Member and support staff Send calendar invites to Board member and support staff for: Update Board Member contact information list and circulate to Board and support staff Schedule AMA with New Board member Schedule Functional Reviews within the first month: Corporate Strategy (CEO) - 50 mins Finance (CFO) - 80 minutes suggested Legal, Compliance, Regulatory, Governance (CLO)  - 50 minutes suggested People Group (CPO) - 50 minutes suggested Sales (CRO) - 80 minutes suggested Marketing (CMO) - 50 minutes suggested Product Overview (EVP, Product, EVP, Engineering, CEO) - 80 minutes suggested Investor Relations (Sr. Director of IR) - Optional 50 minutes suggested"
    },
    {
        "title": "The Internal Audit Function",
        "url": "https://handbook.gitlab.com/handbook/finance/internal-audit/",
        "content": "Please refer to the Internal Audit page in the internal handbook. Please refer to the SOX Program page in the internal handbook."
    },
    {
        "title": "Equity Compensation",
        "url": "https://handbook.gitlab.com/handbook/total-rewards/stock-options/",
        "content": "At GitLab, we strongly believe in team member ownership in our Company. We are in business to create value for our shareholders and we want our team members to benefit from that shared success. This guide is meant to help you understand the piece of GitLab that you\u2019re going to own!  Its goal is to be more straightforward than the full GitLab 2015  & GitLab 2021 Equity Incentive Plans (the \u201c2015 Equity Plan\u201d) and (the \u201c2021 Equity Plan\u201d) and your stock option agreement or RSU agreement which you are advised to read, which both go into the full legal details. Please note, however, that while we hope that this guide is helpful to understanding the stock options and/or stock issued to you or RSU grants under the both Equity Plans, the governing terms and conditions are contained in the 2015 and 2021 Equity Plans and the related stock option agreement. You should consult an employment attorney and/or a tax advisor if you have any questions about navigating your stock options or RSU grants before you make important decisions. Two things must happen for your stock options or RSUs to be meaningful,  for example: If a team member leaves GitLab, they have 90 days post termination to exercise their vested options. Unvested RSUs and options are forfeited upon the date of the team member\u2019s exit from the company. 2015 Equity Incentive Plan and related form agreements would cover information related to GitLab options. 2021 Equity Incentive Plan and related form agreements would cover information related to GitLab RSUs. 2021 Employee Stock Purchase Plan would cover information related to GitLab ESPP purchases. In the past at GitLab, we have given equity grants in the form of Incentive Stock Options (ISOs) and Non-Qualified Stock Options (NQs). It\u2019s called an option because you have the option to    buy GitLab stock, subject to vesting terms, at the exercise price provided at the time of grant. The difference in these two types of grants are, generally, as follows: GitLab is not giving equity grants in the form of options at this time. In September 2021, in connection with our IPO that occurred on October 14, 2021, our board of directors and stockholders approved the  2021 Equity Incentive Plan (the \u201c2021 Plan\u201d) as a successor to our 2015 Plan (together the \u201cPlans\u201d). The  2021 Plan authorizes the award of both stock options, which are intended to qualify for tax treatment  under Section 422 of the Internal Revenue Code, and nonqualified stock options, as well for the award of  restricted stock awards (\u201cRSAs\u201d), stock appreciation rights (\u201cSARs\u201d), restricted stock units (RSUs), and performance and stock  bonus awards. Pursuant to the 2021 Plan, NQ stock options may be granted only to our team  members. Since September 2021, we have issued RSUs for grants of shares of the Company\u2019s common stock, the vesting of which is based on the requisite service requirement. Generally, the Company\u2019s RSUs are subject to forfeiture and are expected to vest over two to four years ratably on a combination of bi-annual and quarterly basis. For RSU Grant Cadence and Vesting please see the following slide deck Shares are sold to pay the taxes due on the RSU vesting.  This is an automatic sale and the shares sold are based on the tax rate for your country.  For example, if 100 shares vest, and your tax rate is 30%, then 30 shares will be sold to cover the tax and the remaining shares will be placed in your E*TRADE account.  Taxation for selling of options or GitLab stock owned: Taxation of Ordinary Income - RSU - More Detail (You should always consult with your own tax advisor concerning how holding periods, capital gains and losses, and your personal circumstances may affect your taxes, and before taking any action that may have tax consequences.  Your actual taxes paid will vary depending on your personal circumstances. ) Please note that all tax withholding is based on tax rates provided by Baker McKenzie - You can find our current Tax Matrix here An ESPP is a benefit GitLab offers that allows team members to optionally purchase shares of their company\u2019s stock at a discount through regular payroll deductions over specified Offering Periods. In September 2021, the Company\u2019s board of directors and its stockholders approved the 2021 Employee Stock Purchase Plan (\u201cESPP\u201d) to enable eligible team members to purchase shares of the Company\u2019s Class A common stock with accumulated payroll deductions and provides a 15% purchase price discount of the fair market value of the Company\u2019s Class A common stock on the IPO date or purchase date, whichever is lower. The 2021 ESPP also provides up to a 24-month look-back period with four purchase dates in May and November of each year, and the first purchase occurred in May 2022. Details on eligibility, enrollment, calculations, pricing and dollar value can be found at ESPP Training Deck The Alternate ESPP is for team members not eligible for the ESPP, mainly in PEO countries.  Team Members in the Alternate ESPP will be eligible to receive RSUs on the expected earnings as if they would have been able to participate in the ESPP.  There are no payroll deductions or contributions required. The RSUs will be automatically granted to team members as calculated by the following formula for each 6 month purchase period:  Details on eligibility, enrollment, calculations, pricing and dollar value can be found at ESPP Training Deck ESPP Calendar for Offering periods can be found at ESPP Training Deck On the respective Purchase Dates at the end of each Purchase Period. Only whole shares can be purchased.  Purchase dates are normally May 31 and November 30 of each year. RSUs and at times Option Grants (Option Grants are rare since September 2021) are determined by Grade Level. If you have any questions on what grant should be offered to a new hire, please reach out to the Compensation and Benefits team by email to total-rewards@gitlab.com. References and information for Grant Levels is held within the  compensation calculator. Note: All stock options and RSU grants are subject to approval by the Board of Directors and no grants are final until such approval has been made. The Company reserves the right in its own determination to make any adjustments to stock option grants at its sole discretion including the decision not to make a grant at all. Promotion grants are based on the differential between the new hire equity dollar value at the new grade minus the new hire equity dollar value at the current grade using the median of the compensation range. The vesting schedule for the new equity grant will align to the terms and conditions of the equity plan for RSUs. Formula for number of Promotion Equity Grant: (New Hire Equity Grant Dollar Value Median at Promoted Level - New Hire Equity Grant Dollar Value Median at Previous Level) For example, if my current role is Backend Engineer and the median new hire equity grant dollar value grant for my role, level, and location is 20,000 USD, and I am promoted to Senior Backend Engineer and the median new hire equity grant dollar value for that role, level, and location is 40,000 USD, the calculation would be: 40,000 USD - 20,000 USD = 20,000 USD. The output of this calculation will also be compared to 0.5x of the Refresh Equity Grant Dollar Value Median at the Promoted Level. If this calculation yields a higher dollar value than the standard Promotion Equity Grant Formula then this value will be used for the promotional grant value. As part of the updated Annual Compensation Review process, eligible GitLab team members will be reviewed for a refresh grant once per year. Refresh grants use the formula above to determine the range of equity dollar value a team member may be eligible for in that cycle based on their current role/grade. Refresh grants will vest in accordance with the equity plan agreement between GitLab and the team members. Note: All equity grants are subject to approval by the Board of Directors and no grants are final until such approval has been obtained. The company reserves the right in its sole discretion to make any adjustments to equity grants including the decision not to make a grant at all. Team members may be eligible to participate in the annual refresh grant cycle review if they have completed six months of service with the company. However, participation will be based upon individual team member talent assessments (including if a team member is currently in good standing) and key talent criteria. Therefore, not all team members will receive a refresh grant in the annual review cycle. Leaders will have discretion on the size of the refresh grant based on talent assessments and equity budget as allocated to each E-group member\u2019s division. All proposed grants will be reviewed by the People team for pay equality. All proposed equity grants are subject to review and approval by the GitLab Board of Directors. Vesting means that you have to remain employed by, or are otherwise a service provider to, GitLab for a certain period of time before you can fully own the stock under your stock option grant. Instead of giving you the right to purchase and own all of the common stock under your stock option on day one, you get to own the stock under your stock option in increments over time. This process is called vesting and different companies offer vesting schedules of different lengths. At GitLab, our standard practice is to issue options with a four year vesting schedule so you would own a quarter of your stock after 12 months, half of your stock after two years, and all of it after 4 years. Vesting happens on a monthly basis after the first year for new hire grants and monthly after grant for refresh grants. A cliff on a new hire grant is the period at the beginning of the vesting period where your equity does not vest monthly, but instead vests at the end of the cliff period. At most companies, including GitLab, this cliff period is generally one year. This means that if you leave your job either voluntarily or involuntarily before you\u2019ve worked for a whole year, none of your options will be vested. At the end of that year, you\u2019ll vest the entire year\u2019s worth (12 months) of equity all at once. This helps keep the ownership of GitLab stock to team members who have worked at the company for a meaningful amount of time. RSUs are grants of shares of the Company\u2019s common stock, the vesting of which is based on the requisite service requirement. Generally, the Company\u2019s RSUs are subject to forfeiture and are expected to vest over two to four years ratably on a combination of bi-annual and quarterly basis. New hire grants vest after 6 months, quarterly thereafter over the 4 years.  Refresh grants vest quarterly over 4 years. Per our SAFE framework, we do not add specific dates to the handbook regarding equity. For more information on grant cadence & vesting, please see the following slide deck. \u201cExercising your options\u201d means buying the stock per your option agreement. You pay the exercise price that was set when the options were first granted and you receive stock certificates back. To give team members an opportunity to benefit from any existing tax incentives that may be available (including under the US the Dutch tax laws and tax laws of your country of residence) we have made the stock immediately exercisable. This means you can exercise your right to purchase the unvested shares under your option to start your holding period. However, the Company retains a repurchase right for the unvested shares if your employment or other services ends for any reason. An early exercise of unvested stock may have important tax implications and you should consult your tax advisor before making such a decision. While the company has the right to repurchase the unvested shares upon your termination of services, the company is not obligated to do so. Accordingly you could lose some or all of the investment you made. Because we are a young company there are lots of risks, so be aware and informed of the risks. You may exercise and hold your options even outside of an open trading window. If you are a Designated Insider, please email stockadmin@gitlab.com and they will enable you to do so in your E-TRADE account. Team members will have 5 trading days to execute their exercise. Please seek advice from your financial advisor or tax advisor prior processing your exercise. For trading in an open trading window, please find the following instructions for specifics on exercise and trading options. If you would like to purchase GTLB shares, this must be done through your E*TRADE retail account during an open trading window. We would ask that you send us a message at stockadmin@gitlab.com as we will need to get consent from you to track your GTLB retail shares. If you leave GitLab, you will generally be able to exercise your options that are vested (as of the last day of service).\nIn addition, if not otherwise expired (through termination of your employment), your stock options expire 10 years after they were issued. If your employment ends for whatever reason, you have a three month window to exercise your vested options, or lose them. During this window you would have to pay the exercise price and in some cases the tax on the gain in value of your stock options, which could be considerable. Administration of (i.e. RSUs, stock options, ESPP share transactions) and equity grant transactions at GitLab are conducted on the ETrade platform.  Equity Grants are approved by the Board of Directors \u201cor their designee\u201d at regularly scheduled quarterly board meetings, which contain  information relevant to the grant including the number of shares, exercise price, vesting period and other key terms. This information is then recorded in your account at ETrade. New participant grants, will need to accepted the Grant Agreements in ETrade document under \u201cGrant Acceptance\u201d under the Plan Elections section in your E-TRADE account. Please see GitLab Stock Plan RSUs & Stock Options. With the implementation of WorkDay, interfaces to ETrade provide for electronic files for status updates to participants, such as terminations and change in Cost Centers. Tax law is complex and you should consult a tax attorney or other tax advisor who is familiar with startup stock options before making any decisions. Please go to the tax team\u2019s stock options page for more information on taxation of stock options. Taxation from the US perspective is not as straightforward as you might like. You aren\u2019t taxed when you exercise your options. Tax is due on the gain or profit you make when you sell the stock. Depending on your holding period, the tax may be treated as ordinary income or capital gain. Moreover, when you hold the options long enough you may be subject to 0% capital gains tax. To outline the five possibilities of the different scenarios that may apply: Please note, however, that any gain upon exercise of an ISO (difference between the exercise price and fair market value at date of exercise), even if you do not sell the shares, may be counted as a \u201ctax preference\u201d towards the Alternative Minimum Tax limit. For instance, under scenario 1 above you have to make an adjustment in your tax return for the Alternative Minimum Tax (AMT) that equals the so-called bargain element. Each scenario has a different tax treatment, so be careful of the tax consequences when you exercise your options. In the long term, holding onto your stock does save taxes, however be aware of the AMT that you will be confronted with. It is strongly advised that you contact a tax advisor to be aware of the US tax consequences. In addition to the benefits of a longer holding period, the IRS does have an additional benefit for holders of Qualified Small Business Stock (QSBS for short). GitLab meets the criteria for QSBS treatment for options exercised prior to August, 2018, however (again), the Company is not in a position to offer tax or legal advice nor does it make any representation about compliance with the QSBS provisions, so check with your own tax and financial advisors. We found this article helpful  in describing the QSBS program in greater detail. For non-employees of GitLab that have been granted stock options, their stock options are treated as NQs. GitLab\u2019s stock is actively traded on NASDAQ, the NQ is taxed at exercise. The gain of the exercise (fair market value minus the exercise price) has to be reported by form 1099-MISC (box 7). Withholding is typically not required, however when the service provider fails to provide a valued tax identification number in form 1099, GitLab has to ensure backup withholding (roughly 25%). For our team members based in the Netherlands, Germany and Australia, the difference between the exercise price and the fair market value is considered taxable at the date you exercise your stock options. With respect to reporting taxes: the taxable gains are subject to employer tax withholding. The tax payable is therefore deducted from your gross payroll with respect to the exercise of your stock options. In the United Kingdom there is a small difference in the tax treatment of exercising your stock options as opposed to the other entities; the difference between the fair market value and the exercise price is taxed at the date of exercise. Often companies will create multiple classes of stock, with each class having different voting rights, in order to provide protection to the company\u2019s founders, early investors, and early employees, whose long-term vision for the company may not align with that of later stage investors. At the GitLab Board of Directors meeting held on January 31, 2019, the Board approved the creation of such a dual-class structure. Class A Common Stock - 1 vote per share Class B Common Stock - 10 votes per share"
    },
    {
        "title": "Product Handbook",
        "url": "https://handbook.gitlab.com/handbook/product/",
        "content": "We create products and experiences that customers love and value. The product handbook is widely referenced by product managers and cross-functional team members. Therefore, we want to follow a consistent change management process so all affected collaborators are aligned and informed when there are changes (specially new requirements, processes, meetings, etc.) that affect their workflow. It is helpful to indicate which type of change you are suggesting: For a small improvement, please feel free to merge the MR yourself. Otherwise, please tag the appropriate code owner for review and approval. The guidance below should be followed for driving awareness: It is your responsibility to communicate with relevant team members about your merge request. Here are some best practices to follow: If you\u2019d like to collaborate with product management see How to Engage guide. The Product Principles section is where you can learn about our strategy and philosophy regarding product development here at GitLab. For a detailed view on how we do Product Development, read up on our established Product Processes. To learn how the GitLab product and our Teams are organized review our Product Categorization section. Learn about GitLab as a product, including what does it mean to be a single application, our subscription tiers and pricing model, and the basics of permissions in the platform. Understand the roles and responsibilities of product managers. Want to know more on what being a Product Manager at GitLab is like? Checkout our Product Management guide for helpful information like our Career Development Framework and learning/development resources. Learn how we measure success in Product via our Product KPIs, which are tracked in our Product project. For best practices and guidance on how to add instrumentation for features please review our Analytics Instrumentation workflow. Understand the OKR Process for the GitLab Product Team and review current and past OKRs. Learn about our Product Leadership Team and learn about them via their personal README\u2019s. Below are team emails and handles that can be used for different departments and sub-departments in the Product Division. These groups are used for internal communication and the @mention can only be used by project members. Please remember that tagging\u00a0@mention\u00a0on issues will generate in-product\u00a0to-do items and email notifications to all team members in that project, so use it only when you need to communicate with the entire team. For communication specifically for product managers, please leverage How to Engage. When you are tagging\u00a0@mention: This document describes what Product Management does, where, when, and how to engage with the product management team. At GitLab, the PMs lead their specialization. That is, the Create PM decides what the Create group works on, for which release, and makes sure this furthers our goals. This includes bugs, features, and architectural changes. The PM can\u2019t be expected to parse every single bug or issue that comes by, so they have to rely heavily on the input of the various stakeholders. To be able to achieve this, both the PM and the stakeholders have to actively work together. It\u2019s a two-way street. Personas describe the ideal target for GitLab. They help us define our messaging and marketing delivery. They are theoretical people to target. By defining their concerns and where they go for information, we can best spend our marketing dollars and sales efforts by focusing on this ideal target. Roles are distinct job titles. These are the real people you will encounter while selling. You will find a contact at an account with a specific role. Understanding the challenges faced by each role in IT, along with what they care most about, is helpful to deliver the right value proposition to the right person. Each team is empowered to work efficiently and document their practices in the GitLab Product handbook. This section is a collection of groups that have collected their processes and best practices in a single source of truth. This section of the handbook collects all the resources related to the Product Leadership Team (PLT), or the team including the Chief Product Officer (CProdO) and the CProdO direct reports. Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership We want intuitive interfaces both within the company and with the wider\ncommunity. This makes it more efficient for everyone to contribute or to get\na question answered. Therefore, the following interfaces are based on the\nproduct categories defined on this page: The categories form a hierarchy:"
    },
    {
        "title": "GitLab Release Posts",
        "url": "https://handbook.gitlab.com/handbook/marketing/blog/release-posts/",
        "content": "Release posts are blog posts that announce changes to the GitLab application. This includes our regular cadence of monthly releases which happen every month, and patch/security releases whenever necessary. Release posts follow a process outlined here, and the templates that are used to create them also highlight what needs to be done, by whom, and when those items are due. At a high level, the Release post schedule is: Code cutoff Note: MRs added after the Thursday, 1 week before release should target the release-x-y branch, not master Note: The Monday through Tuesday of release week can fall on vacations or holidays. PMs should designate who to respond to time-sensitive inquiries should they be unreachable. Release Post Managers are empowered to make decisions and display bias for action if they haven\u2019t received a response by EOD on the Tuesday of release week. Note: Details for all of these steps are described in the Monthly release post MR template and the Monthly release post item MR template. Each month, a Product Manager, Technical Writer, and an Engineering Department Technical Advisor volunteer to manage the release post, as listed in the Release Post Scheduling page. Product Marketing Managers also sign up, but mostly as shadows for awareness for their related marketing activities. The Product Manager volunteer will lead the release post as the Release Post Manager and is listed as the Author of the release post when the post is published. To update the release post scheduling list, all volunteers need to edit the data file below: It\u2019s highly recommended that all volunteers shadow the release post prior to the one they run. Volunteers can update the previously mentioned data YAML file to indicate both when they shadow and when they help run the release post. Release Post Managers will need Maintainer access privileges for the https://gitlab.com/gitlab-com/www-gitlab-com/ project. If you need access, model your request after this confidential issue. Product Managers of any level (IC or managers) can volunteer for any release that doesn\u2019t have someone assigned yet. While we encourage IC product managers to take advantage of this opportunity to demonstrate their leadership skills, we also value that managers will bring their experience to the role. Before committing to the date of your choice, please be sure you can perform the critical path Release Post Manager tasks between Thursday, 1 week before release, and the release date of the month as defined in the monthly MR template. If you cannot perform any of the Release Post Manager tasks between Thursday, 1 week before release, and the release date of the month, please sign up for a release post that better aligns with your availability. To assign yourself as Release Post Manager or Release Post Manager\u2019s shadow, simply add your name on the Release Post Scheduling page by submitting an MR to update the /data/release_post_managers.yml file. Otherwise, PMs will be assigned using a fair scheduling principle leveraging this tracking doc: After joining the company, there is a grace period of a few months where the new Product Manager\nwill get up to speed with the process, then they will be scheduled to manage a release post. Adding members to the list is a shared task, and everyone can contribute by following the\nprinciple described above. Scheduled people are pinged in the merge request to make them aware.\nThey don\u2019t need to confirm or approve, since they can always update the list if they are not\navailable for the given release post. Each month, a Product Manager also acts as a shadow to support the Release Post Manager tasks if needed, act as back up on decisions in absence of the Release Post Manager and prepare to run the next release post. By shadowing the month prior to leading the effort, Product Managers are prepared and aware of any shifts in processes or optimizations needed since the last time they participated. Shadows should remain engaged with the release process by: In order to properly onboard the shadow, the Release Post Manager should: Remember: The goal of the shadow is to get them engaged and aware of the process so they can run one on their own. Include the shadow as much as possible so they can learn and be prepared! We recommend that technical advisors volunteer for at least 2 or 3 release posts in a row to allow proper time for orientation with the process and the ongoing technical backlog. Technical advisors are expected to: The responsibilities of a technical advisor can be seen in more detail in Technical advisors. Make sure you have Maintainer access to project https://gitlab.com/gitlab-com/www-gitlab-com/. If you need access, model your request after this confidential issue. An automated task will create the branches, MRs, and issues necessary to run the Release Post process, including making the appropriate assignments and mentions based on the Release Post Manager schedule. If you have not been assigned to a Release Post X.Y MR by the end of the day on the Monday, 3 weeks before relea: The Release Post Manager, the Technical Advisor, the Technical Writer, and PMM Lead will need to communicate about topics that are related to the release post but not relevant to the broader team, these chats should occur in Slack #X-Y-release-post-prep channel in Slack, to minimize distractions and unnecessary notifications for the broader team in Slack #release-post. The Release Post Manager posts in Slack channels most frequently with reminders. As such, if the Release Post Manager is seeking guidance on how to phrase certain posts, it\u2019s recommended to scroll to the approximate date that post would have been made by the previous Release Post Manager in the relevant Slack channel. However, here are some best practices and an example: When communicating in either Slack #release-post or #X-Y-release-post-prep, organize your announcements and requests via unique discussions threads to make it easier to track conversations. For example, avoid combining various reminders just because they fall on the same date when they address different topics. As a general rule, if there\u2019s is a unique task list item for the reminder in the MR template, that reminder should get its own separate post whether it is in Slack or the MR itself. Also, review GitLab\u2019s effective slack communication guidance. Sample post to executive stakeholders for review is below.\nThe name of the PLT member who is reviewing this month can be found on the release post scheduling page Other samples for posts include reminders and notices on any items that the Release Post Manager is taking: The Developer Advocacy Team will reach out to the Release Post Manager in Slack #release-post following their Release days process when they need help responding to inquiries about content in the release post blog. These needs will primarily arise within the first week of going live with the blog. However, as the Author for a specific release post, you may get pinged to help coordinate a response some weeks later as issues arise. You will usually just need to find the best DRI to handle the issue, often the PM of the release post item in question. Sometimes, external PR and Marketing firms reporting on the release or managing media relations may ping the RPM directly with questions, since the RPM is the \u201cauthor\u201d of the release post. If this happens, the Release Post Manager should figure out who in Marketing can take over this communication. The due dates for various reviews across all participants can be found on the release post MR template and the release post item MR template. PM contributors are encouraged to cease attempts to add new content blocks after the content merge deadline on the Thursday, 1 week before release, and especially after final content assembly happens on the Monday of release week at 3 pm UTC (11 am ET / 8 am PT). Exceptions can be made for highly impactful features, but it is up to the discretion of the Release Post Manager to work with the PM to add more content blocks up until the Wednesday, day before release. Keeping an eye on the various content reviews (TW, PMM, and Director) for the individual release post items (content block MRs) is the responsibility of PM contributor. However, it is recommended that the Release Post Manager keep an eye on how many items are not yet marked with the Ready label on the Thursday, 3 weeks before release of the month or not yet merged on the Thursday, 1 week before release, and check in with PMs in Slack Release Post channel to support and clear hurdles if needed. A really easy way to do this is to keep your eyes on the Preview page and copy-edit and link check items as new items appear. It\u2019s also important to do this because this page is LIVE to users and should be error free. The review and any needed adjustment to the ordering of secondary features due to stakeholder feedback is the responsibility of the Release Post Manager. Secondary features, removals, and upgrade notes are all sorted alphabetically by title, grouped by stage. To affect the sort order of the secondary features, a change to the content block\u2019s title is required. The Release Post Manager should work with the product managers of the content blocks to make these changes, to ensure accuracy and alignment. After the Review App for the release post has been generated, the Release Post Manager solicits additional feedback from the product leaders via Slack in the #release-post channel. It is the Release Post Manager\u2019s responsibility to make sure all content is completed by the Tuesday of release week, ensuring a one day buffer is left for final error fixes and small improvements. NOTE: To the extent possible, we strive to use GitLab\u2019s Community Code Review Guidelines when performing Release Post content review. It is recommended for the Release Post Manager to review all content for quality, including the marketing intro. But when reviewing content blocks in each release post item MRs, the RPM should look for the following: The introduction content of the release post (found in YYYY-MM-DD-gitlab-X-Y-released.html.md)  is templated to be standard across all release posts, and should not be modified without approval from @justinfarris. This file is linked at the top of the release post MR for reference and ease of editing. The Release Post Manager will make sure all primary items are approved and a top feature is designated and ask the VP of Product for feedback. Product Managers are responsible for raising MRs for their content blocks and ensuring they are reviewed by necessary contributors by the due date. These are mostly added by the Product Managers, each filling up the sections they are accountable for, but anyone can contribute, including community contributors. Content blocks should also be added for any epics or notable community contributions that were delivered. In parallel with feature development, a merge request should be prepared by the PM with the required content. Do not wait for the feature to be merged before drafting the release post item, it is recommended PMs write Release Post Item MRs as they prepare for the milestone Kickoff. The release post item generator automates the creation of release post items using issues and epics. Draft your release post content under the Release notes section of the feature issue template and then follow the release post item generator instructions. Note: The generator will not create an MR for a confidential issue. To add a release post item for work relating to a confidential issue, follow the steps below to create an MR manually and remove any confidential information or links. Create a new branch from master for each feature (primary, secondary, removal). Deprecations are handled differently Open a merge request targeted at the master branch Use the Release Post Item template Content should be one YAML file added to data/release_posts/unreleased/ on the master branch Update the data/features.yml (if applicable) to include your feature and commit the changes as part of the same merge request Complete the PM checklist included in the Release Post Item MR template, which includes but not limited to these tasks: Important note on naming files: PMs should create file names that are descriptive and have reasonable overlap with the title of the content block itself. This makes it easier to related content blocks to yml file by different participants in the review process. Either underscores _ or hyphens - can be used as long as the correct prefix is used (stagename, removal, or upgrade) as listed below. Feature file names: stagename-featurename.yml (for example, create-group-wikis.yml). Do not: Removal file names: removal-something-else-descriptive.yml Upgrade file names: upgrade-another-description.yml Some troubleshooting hints: We want to help people understand new features to increase adoption their adoption. In general, release posts should succinctly state the problem to solve, the solution, and how customers benefit from the solution. Be sure to reference your Direction items and Release features. All items which appear\nin our Upcoming Releases page should be included in the relevant release post. When writing your content blocks, be sure to reference Writing about features to ensure your release post item writeups align with how GitLab communicates. For example, we avoid formal phrases such as \u201cwe are pleased to announce\u201d and generally speak directly to our users by saying \u201cyou can now do x\u201d rather than \u201cthe user can now do x\u201d. Checking out the links to these guidelines will help you align our tone/voice as you write, ensuring a smoother and more speedy review process for your release post items. PM contributors are encouraged to use discretion if wanting to add new content blocks after the final merge deadline of the Thursday, 1 week before release, and especially after final content assembly happens at 8 AM PST (3 PM UTC). But if highly impactful features are released that can not wait till the next blog post, PMs should reach out and coordinate with the Release Post Manager. It is up to the discretion of the Release Post Manager to work with the PM to add more content blocks up until the Wednesday, day before release. When creating your content for a Release Post item you\u2019ll need to determine if it\u2019s a primary or secondary feature. Do this in collaboration with your PMM counterpart and reference this guidance if you\u2019re unsure: A feature should be primary if the feature: To include an experimental feature in the release post, use the experiment template, when creating a release post item in the unreleased directory. Experiment features are displayed in their own section of the release post. PM Director/Group Manager, PMM, and Product Design reviews are highly recommended, but the Tech Writer review is the only one required for inclusion in the Release Post. Tech Writer review is required even when late additions are made to the release post after the Monday of release week. The Tech Writing review should be focused on looking for typos, grammar errors, and helping with style. PMs are responsible for coordinating any significant content/tech changes. Communicating priority about which release post items are most important for review will help Product Section leads, PMMs, and Tech Writers review the right items by the Thursday, 3 weeks before release, to ensure the proper labels are applied to the MR and assign reviewers to the MR when it is ready for them to review (ex: Tech Writing, Direction, Deliverable, etc). As PMM reviews are not required, but recommended - and Product Leader and Product Design reviews are optional - PMs should consider a few things when determining which content blocks to request a review for: If the answer to any of these is \u201cyes\u201d, it is recommended that you coordinate with your Director, PMM, and Product Design counterpart to review the content block by the Thursday, 1 week before release. As the PM it is your responsibility to communicate what MRs need a review from the TWs, PMMs, Product Designers, and Directors as well as the MRs relative priority if you have multiple content block MRs that need reviews. Engineering Managers are the DRIs for merging these MRs when the feature is merged into the codebase itself. This allows all of the relevant parties (Product Managers, PMMs, Product Designers, Section Leads, Technical Writers) to have enough time to review the content without having to scramble or hold up engineering from releasing a feature. To enable Engineering Managers to merge their feature blocks as soon as an issue has closed, please ensure all scheduled items you want to include in the release post have content blocks MRs created for them and have the Ready label applied when content contribution and reviews are completed. After content block MRs are merged, they can be viewed on the Preview page and should be updated/edited via MRs to master up until the final merge deadline of the Thursday, 1 week before release. Starting on the Monday of release week, content block MRs should be viewed in the Review app of the release post branch after final content assembly, and updated/edited on the release post branch by coordinating with the Release Post Manager. From the release date forward you should view the content blocks on the blog. It\u2019s important to check this page after the content block MR is merged because this page is LIVE to users and should be error free. After the content assembly starts on the Monday of release week and before the end of Tuesday of release week, adding any new or removing any merged release post items must be coordinated with the Release Post Manager. This is necessary to allow them to assess the impact on the release post and coordinate any necessary adjustments with the release post team (Tech Writer, PM, etc.). Failure to do so might result in your changes not being picked into the release post. Before pinging the Release Post Manager, ask yourself if your content absolutely needs to be part of the current release post. At end-of-day on the Tuesday of release week, no late content blocks will be accepted. You can make changes to the release post after it\u2019s live to make edits to feature content blocks. To edit a content block: At the bottom of the release post you wish to edit, select \u201cEdit this page\u201d. Find and edit the relevant .yml file in the correct subdirectory. For example, to add or edit the example Widgets feature to the 14.6 release post, create or edit the data/release_posts/14_6/widgets_example.yml in an MR against master. To remove the feature block, remove the file in your MR. Or to announce it in the next release post, move the file to the data/release_posts/unreleased folder. For review and approval, assign the current cycle\u2019s Release Post Manager a Reviewer. To edit a deprecation, follow Editing a deprecation announcement entry. You are responsible for the content you add to the blog post. Therefore,\nmake sure that: As noted in the Release Post Item template: Write the description of every feature as you do to regular blog posts. Please write according to\nthe Markdown guide. Once the PMs have included everything they\u2019re accountable for, they should check their item in the release post MR description:  By checking your item, you will make it clear to the Release Post Manager that you have done your part in time (during the general contributions stage) and you\u2019re waiting for review. If you don\u2019t check it, it\u2019s implicit that you didn\u2019t finish your part in time, despite that\u2019s the case or not. Once all content is reviewed and complete, add the Ready label and assign this issue to the Engineering Manager (EM). The EM is responsible for merging as soon as the implementing issue is deployed to GitLab.com, after which this content will appear on the GitLab.com Release page and can be included in the next release post. All release post items must be merged on or before the Thursday, 1 week before release. If a feature is not ready by the Thursday, 1 week before release deadline, the EM should push the release post item to the next milestone. If you are on vacation before/during the release, fill all your items and create placeholders in the release post Yaml file for all the items you cannot add for whatever reason. To complete them, and to follow up with all the content you are responsible for, assign someone to take over for you and notify the Release Post Manager. Please respond to comments in the MR thread as soon as possible. We have a non-negotiable due date for release posts. Please add the documentation_link at the same time you add a content block to the release post. When you leave it to add it later, you will probably forget it, the reviewer will ping you later on during the review stage, and you will have little time to write, get your MR reviewed, approved, merged, and available in the documentation. Always link to the \u201cEE\u201d version of GitLab docs https://docs.gitlab.com/ee/ (not /ce/) in the blog post, even if it is a CE feature. Each PM is responsible for pinging their PMM counterpart when they need a review on the messaging for a Release Post Item MR or changes to features.yml. PMM lead is responsible for creating a release post highlight blurb for consumption by field and PR. The tasks are included in the release post MR template and in the monthly release post intro document. On or before the third thursday of the month: The TW Lead is responsible for a final review of: While individual TW reviewers and product managers have ultimate responsibility for the style and language of their release post items, including deprecations, removals, breaking changes, and Upgrades, TW leads still have an overall responsibility to notify the Release Post Manager, the product managers and TW reviewers if style and language don\u2019t seem reasonably consistent (things are obviously out of sync with known guidelines). But it is not the responsibility of the TW leads to fix style and language inconsistencies. However, TW leads do have the responsibility and ownership to make sure that all links in the release post point to relevant content and be fixed, if issues are found. Consideration: When communicating with your release post team, use the release post prep channel and organize discussions into threads to make it easier to track conversations. Also, review GitLab\u2019s effective slack communication guidance. A technical writer, once assigned to the release post merge request, will check the syntax and the content structure. The Structural check checklist in the main release post merge request description\nwill guide them through the structural check. Given that the technical writing review occurs in release post items'\nmerge requests, the purpose of the structural check is: Pay special attention to the release post Markdown file, which adds the introduction.\nReview the introduction briefly, but do not change the writing style nor the messaging;\nthese are owned by PMMs, so leave it to them to avoid unnecessary back-and-forths.\nMake sure feature descriptions make sense, anchors work fine, all internal links have\nthe relative path. The Release Post is considered a special blog post instance, so should adhere to the Marketing\neditorial team\u2019s\nstyle guide. Until 8:00 am Pacific Time on the Monday of release week, the TW Lead should be able to make changes\ndirectly to the release post. After that time, anyone who wants to include a\nchange in the upcoming release may need to submit it in a separate MR, with a\ntarget of the release-X-Y branch. For more information, see\nDevelop on a feature branch. In its frontmatter: Layout: The last two entries of the post\u2019s frontmatter give the option for a\ndifferent layout. If you want to use a dark cover image, you\u2019ll need\nto uncomment header_layout_dark: true. If you want only the release number to be dark, uncomment\nrelease_number_dark: true. These two variables work independently; you can assign either of them\nor both of them to the same post. When a new GitLab version is released every month, the Technical Writer who completed the release post structural check for the previous milestone sets up the release of the published documentation for that version. For instructions, see the GitLab docs monthly release process. Each person in the Technical Writing team is responsible for the review\nof each individual release post item and deprecation item that falls under their\nrespective stage/group. When the PM creates a release post item merge request, or creates a deprecation announcement, they should assign it to the TW\nof their group for review (required). The process for TW reviews is described in the: The deprecations doc is generated with .yml files in gitlab/data/deprecations. The html pages are not generated automatically. The TW assigned as the reviewer of the deprecation item must run a Rake task to compile the documents. They can also run a separate task to check that the docs are up to date. While the author of the deprecations MR is responsible for creating the content, they are not responsible for updating the doc. Updating the docs: Deprecation MRs must be merged by the Thursday, 1 week before release. If merged later, they might miss the code cutoff and won\u2019t be included in the self-managed release\u2019s docs. If an entry needs to be edited, the update process is similar. If you run into problems running the Rake task, check the troubleshooting steps. Each PM is responsible for pinging their Product Design counterpart when they need a review on the content or visuals within a release post. Product Designers should collaborate on release post items and review: The responsibilities of the Engineering Manager are documented in the\nEngineering Handbook. Each month, the Release Post Manager may need help with technical hurdles during the release post process. In order to provide the release post, which is a time-sensitive and highly visible asset for customers and users, with adequate technical advisement and support, we are piloting a partnership with the GitLab development team to leverage the Dev Escalation process via the Slack #dev-escalation channel as an extension. This ensures that at all times, if something breaks that the release post team can not resolve themselves, they have access to technical experts for resolution. It is recommended that technical advisors review the documented technical aspects of the release post for reference, and the escalation process. Please note that unlike other monthly volunteers of the release post, the technical advisor is not expected to follow the release post process at all times. The Release Post Manager will reach out to the technical advisor on call via Slack in the #dev-escalation channel and then cross-post to the #release-post channel for transparency that issues are being worked on. It is then expected that the technical advisor will respond to the Release Post Manager or release post DRI as soon as possible, including evenings/weekends, as the release post asks are often time sensitive, especially between the Monday of release week and the release date of the month. The technical advisor is responsible for determining if further dev escalation should proceed. The good news is that the release post technical hurdles are often reasonably easy to troubleshoot for technical experts, which is why we\u2019re excited about this partnership! Below are the types of problems the Release Post Managers may need help with. Should you exhaust your ability to resolve your blocker quickly mention the Technical Advisor in #dev-escalation channel and cross-post in #release-post channel to ask for help, and make others aware that there may be a delay in assembly.\nDescribe your blocker in detail, screenshots, videos, etc. can assist in diagnosing the problem. Indicate whether your problem is urgent or not. If you indicate it is urgent, provide a clear date/time by which you need a response or resolution. What we have seen with previous challenges during the Release Post Assembly stage is some difficulty is encountered by the Release Post Manager because of a problem with their local development environment (Ruby setup, permissions, gems, etc.) or git conflicts. You should be familiar with git, Ruby, and the command line. There are a few resources that you can use to diagnose and resolve the issue at hand: Following your best judgement with the resolution of the incident, record the diagnosis and the steps taken to resolve so that we can improve the release post process and our preparedness. Deposit this info in a new issue or as part of the current release post retrospective. We have introduced scheduled pipeline jobs that you should familiarize yourself with: Should you exhaust your ability to resolve your blocker quickly mention the Technical Advisor in #dev-escalation channel and cross-post in #release-post channel to ask for help, and make others aware that there may be a delay in release post deployment.\nDescribe your blocker in detail, screenshots, videos, etc. can assist in diagnosing the problem. Indicate whether your problem is urgent or not. If you indicate it is urgent, provide a clear date/time by which you need a response or resolution. The Release Post Deployment is a critical and time-sensitive operation. Please respond thoughtfully and quickly. Following your best judgement with the following: Release post content assembly on the Monday of release week and release post deployment on the release date are time sensitive with multiple dependencies across various departments. GitLab team members often voluntarily go out of their way to assist with blockers found during these two time-sensitive procedures, but it can be confusing as to who is doing what to resolve an active blocking incident. Some procedural detail to our response efforts is shown below. Due to the time-sensitive nature of both key Release Post actions, assembly and deployment, the initial response time must be very quick, within 15 minutes. Incident resolution should also be as quick, within 60 minutes or less, if possible. The introduction of the technical advisor role is meant to be a coordinating role responding to blockers that occur along the way. They may work alone or in tandem with other volunteers to resolve the blocker as they see fit. They are also responsible for clearing the blocker, assembly of others, delegating response tasks including engaging in dev escalation. There should only be one owner of an incident at any given time. There must be clear understanding of who has control of actions to investigate and remedy the incident. Use positive exchange of control, that is pass control to another person who will now be in charge. The extreme example is from aviation where pilots exchange control in a manner like the following where you might hear \u201cyour airplane\u201d to pass control followed by \u201cmy airplane\u201d from the second pilot to accept control followed by the acknowledgement and release of control from the initiating pilot with \u201cyour airplane.\u201d This avoids multiple people working at cross purposes from each other. Pilots operating an airplane is an extreme example, but it shows how to use clear language in your efforts to resolve the incident as to who is doing what. Only one person should be have control at a time. Similarly, the person taking action should declare their intent, \u201cI\u2019m going to merge master into the 13.8 release post branch and resolve any conflicts.\u201d See also: Google SRE Ch. 14 Anyone can contribute to technical issues that support the Release Post Process with the burden being mostly on the current volunteer tech advisor. The following outlines how to manage active and upcoming issues. Use the  ~Release Post::Tech Advisor labels for issues that require changes to the tools that facilitate the delivery of a release post. Create issues for lower priority challenges that arise during the milestone or as an artifact of decisions made during a retrospective. Creating an issue for immediate incident response isn\u2019t required since the delivery of the release post requires quick resolution and synchronous communication. This board organizes these labeled issues into a familiar software development workflow. When working on an issue, assign yourself and strive to keep the issue up-to-date with the proper workflow label and weekly async updates. Technical Advisors are welcome to make recommendations and apply milestones to the issues. It\u2019s unlikely that one technical advisor will serve in back-to-back milestones. Therefore, clearly communicating with the incoming technical advisor about the state of issues as part of release post retrospective and kickoff is a good idea. To do so: Should you prefer to continue to contribute to an issue under active development after your volunteer rotation, that\u2019s great. In that situation, make it clear through assignments and issue updates that you will be the DRI. The Contributor Success team now owns the process for nominating, selecting and adding the GitLab MVP for the release post. See the Contributor Success GitLab MVP Selection Process. The Release Post Manager no longer has any MVP-related tasks. The most relevant features of the release are included in the post by product managers. Classify the feature according to its relevance and to where you want to place it in the blog post: The top feature of the release is mentioned right after the MVP section, prior to other primary features. An image or video and documentation links are required. The TW lead will pay close attention to the content of this item, as it is the \u201cheadline\u201d feature for the release and it\u2019s especially important to get it right. The Release Post Manager will select a top feature. The following can be used as a guideline on which feature to select: A top feature should: A top feature can be: The Release Post Manager will select a top feature and ask for feedback from the assigned VP of Product in #release-post together with reviewing the primary features. The Release Post Manager should incorparating feedback on any top or primary features. To specify the top feature, change primary to top in the selected feature\u2019s release post item .yml file: Features with higher impact, displayed in rows after the top feature, with an image next to its text. An image accompanying the description is required. A video can also be added to replace the image.\nAll release post primary features should be reviewed by the TW reviewer.\nTo identify the primary features, look for primary directly beneath features in the RP .yml file: Other relevant improvements in GitLab that follow after top and primary features. Images or videos aren\u2019t required, but are recommended. All release post Secondary features should be reviewed by the TW reviewer. If the secondary feature is promoted to a primary feature, the PM or EM will be asked to supply an image on short notice. To identify the secondary features, look for secondary directly beneath features in the RP .yml file: Note: \u201cFeature blocks\u201d are now known as content blocks, as there are many that are not just features. For example, we include upgrade warnings, Omnibus installer improvements, and performance enhancements. Use content blocks to add features or other content to the YAML data file. The layout will be applied automatically by Middleman\u2019s templating system. Content blocks in the YAML data file contain the following entries, as exemplified below: Content of the description should adhere to the Marketing editorial team\u2019s\nstyle guide. Do not include UI navigation instructions in the feature\u2019s description. These instructions should be\ncontained in the relevant documentation. The second line of the content block should indicate whether the feature is a top, primary, or secondary feature. For primary features, use the primary key as shown in the sample content block above. For secondary features, replace the primary key with the word secondary and for the top feature replace primary with top. Use a short and strong name for all feature names. Use the following pattern to apply the correct badge to the feature (Free, Premium, Ultimate) and to specify any add-ons (Duo Pro, Duo Enterprise). For the subscription tier where the feature is available, use available_in with: For GitLab Free, [core, premium, ultimate] For GitLab Premium, [premium, ultimate] For GitLab Ultimate, [ultimate] Important note: The GitLab Free tier is listed as core in the data file. This is intentional and the page templates will apply the proper tier name on the frontend. For features available on both self-managed and GitLab.com: For features available on self-managed only: Use gitlab_com: false. For example: This setting greys out the orange badges on the GitLab SaaS row. For features available on GitLab.com only, use available_in: with: You can also mix the GitLab.com badges with the self-managed badges. However, for this to work, the gitlab_com variable must be set to false: To specify a subscription add-on, enter text in the add_ons: [ ] field.\nEach entry adds a badge. For Duo Pro and Duo Enterprise, specify both. For example: If only Duo Pro applies, use add_ons: [\"Duo Pro\"]. From time to time a feature may be developed behind a feature flag and made available slowly to larger audiences. If this is the case, do not include the item in the release post unless you are deliberately seeking beta testers. This may result in a feature issue being closed in a milestone earlier than it is announced. If you are deliberately seeking beta tests, include the release post as well as instructions on how to enable the feature and provide feedback. Provide a link to the updated documentation for the feature. It is a required field.\nIt can be, in this priority order: Note: documentation_text was deprecated by !13283 for GitLab 11.2. Check the section Adding Content > Illustrations for more information. stage: the stage the feature belongs to (lowercase): The stages display as an icon next to the product tiers\u2019 badges linking\nto the stage webpage using a regex:\nhttps://about.gitlab.com/stages-devops-lifecycle/<stage>/. We can\nalso override it with a custom stage URL. Although stage is a required field, if a feature doesn\u2019t\nbelong to any of the stages at all, you can delete the stage\nline and it won\u2019t output anything. Besides displaying the icon, with stage set, PMs can easily\nfind anything that is related to their area, even if reported by\nother users. For stages outside of the DevOps lifecycle, such as Enablement\nand Growth, which don\u2019t have the same path as the other stages\n(/stages-devops-lifecycle/<stage>), it is necessary to add\nthe stage_url to the content block to override the default path: If a cover image from a 3rd party is used, according to our Blog handbook, it\u2019s necessary to provide the source of the cover image. Fill in the entry below to display this info at the very end of the ...release.html.md blog post: If the image is generated by GitLab, copyright info is not required and can be removed from the .html.md file after setting rebrand_cover_img to true. To be added by the Distribution Product Manager. Upgrade warnings should be added to the release post only to describe important upgrade notes, such as: If there\u2019s no relevant info to a given release, do not add this section\nto the post. The release post will link directly to closed issues or merge requests for the relevant milestone filtered by the following labels: workflow::verification and workflow::production are being included while we adopt the addition of the workflow::complete label. workflow::complete is the desired label to indicate an issue is considered by users to be delivered. To be added by the Distribution Product Manager. This section should contain any relevant updates for packaged software, new features, and new commands relating to the administration of self-managed GitLab instances deployed using the Omnibus package e.g. (gitlab-backup). To be added by Product Managers and merged by Engineering Managers. If you have an announcement that doesn\u2019t quite fit the other content types, you can use the extras content block. If you think your announcement does fit this type, ping the Release Post Manager and @justin in #release-post for guidance. An example is provided in the /data/release_posts/unreleased/samples/extras.yml file. Multiple blocks: Apply the following labels to the MR: For review, select the technical writer assigned to the stage. When the MR is approved, add the Ready label before merging. Deprecation, removal, and breaking change announcements appear in GitLab Docs and in the release post of the announcement\u2019s corresponding milestone. Before making an announcement, review the breaking changes, deprecations and removals guidance to ensure you: This video will walk you through the process of making an announcement: To be added by Product Managers or Engineering Managers and merged by Technical Writers at least 3 milestones ahead of the planned removal date. For example, if the intended removal milestone is 17.0, given the following release schedule: 16.9, 16.10, 16.11, 17.0, then 16.9 is the third milestone preceding intended removal, and the last milestone for deprecation announcements. Create a separate MR for each announcement. Do not edit the features.yml file until the feature has been removed from the product, or the breaking change has been implemented. If you want to bundle multiple announcements in one MR, for example if it\u2019s a group of dependent deprecations that will happen on the same date as \u201call or none,\u201d reach out and first discuss this with the Release Post Manager. The deprecation template provides an option to end support for a feature prior to its removal. This option should only be used in special circumstances and is not recommended for general use. Most features should be deprecated and then removed. An End of Support milestone must be at least 3 milestones after the deprecation announcement. For example, if the deprecation announcement is made in 15.1, the End of Support milestone must be in 15.4 at the earliest. There is no requirement for the gap between the End of Support milestone and the Removal milestone. If an End of Support milestone is announced, it will be displayed under the title of the deprecation announcement on the Deprecations page. End of Support milestones are not currently displayed in the release post. When to define an End of Support period Communicating End of Support If you decide to declare an End of Support period: This process is very similar to creating an announcement entry, with the difference being that the YAML file already exists. To edit an existing entry: To be added by Product Managers or Engineering Managers and merged by Engineering Managers. Describe any considerations administrators should have when upgrading to this version. These could be warnings about potential data loss, recommendations for maintenance beforehand, and other similar concerns. Considerations for future upgrades should be noted in the deprecations sections. One notable example was in %12.10, we required administrators to migrate from Postgres 10 to Postgres 11. Upgrade items go in the same directory as regular release post items. See the upgrade template to create an upgrade notice. Create one .yml file in the /data/release_posts/unreleased/ folder, using the following content block for each notice: Apply the following labels to the MR: For review, select the technical writer assigned to the stage. When the MR is approved, add the Ready label before merging. Major releases happen once a year and start a new versioning cycle: 14.0 - 14.10 \u2013> 15.0 and so on.  Contribution to and management of content for major releases follows the same schedule as monthly releases. But for major releases, the Release Post Manager can expect some extra coordination and communication from the Social, PR, and Marketing teams, due to extra activities and needs for a major release. Additionally, during a major release, the Release Post Manager may need to support PM volunteers managing communication of removals that are breaking changes. Product Operations will lead the communication of breaking changes for major releases as part of the release post. It is important the breaking changes be flagged for SaaS users prior to the rollout of the updates in the major version, so they are prepared and their workflow is not unexpectedly disrupted. Beginning as early as 3 milestones ahead of the major release, Product operations will start communictions/coordination for announcements and a breaking changes blog. Starting as early as 2 milestones ahead of the major release, Product Operations we will use the broadcast message feature to communicate upcoming breaking changes with SaaS users. Product Operations initiates breaking changes communications when they\u2019re assigned an automated GitLab issue, with a task list and timeline. These communications rampup three minor releases before the major release. For example: if the major 15.0 release is planned for May 22, the communications rampup with the automated issue being generated  during release 14.8. For entries that support Markdown, use regular Markdown Kramdown, as we use for all blog posts and webpages on about.GitLab.com. Each image should be compressed with ImageOptim,\nTinyPNG, or similar tool. You can also try automation tools like Hazel or Automator Each image should not surpass 150KB (300KB for cover\nimage), GIFs included pngbot will compress PNG images added in\nmerge request by converting each PNG to PNG 8 (8 bit, 256 colors) using\npngquant before losslessly compressing with\nzopflipng. Application screenshots: Animated GIFs: Cover image:\nCover images for 16.x releases have been created by the marketing team and can be found here\nFor cover images after 16.x, raise a similar request.\nThis image should be eye-catching, inspiring and avoid images of people. The image should be landscape orientation, roughly 1920 x 1080, and no larger than 300 KB. To test the image and see how it fits (without waiting for a build or running the handbook locally): Image shadow:\nwhen you add images though the text,\nmake sure all images have the class shadow applied: You can add videos to release post content blocks in two ways: In either case, the video must first be uploaded to GitLab\u2019s Unfiltered YouTube channel. When adding videos to content blocks, it is important to ensure that the correct video URL is used and that the video\u2019s visibility settings are set to \u201cPublic\u201d. Follow the steps below to properly prepare a video for inclusion in a content block. Upload the video to GitLab\u2019s Unfiltered YouTube channel Make sure that the visibility settings are set to \u201cPublic\u201d. Copy the video URL and add /embed/ to it. Replace youtube.com with youtube-nocookie.com. This is the URL you will use in the content block. For example: https://www.youtube.com/watch?v=dQw4w9WgXcQ becomes https://www.youtube-nocookie.com/embed/dQw4w9WgXcQ Review the auto-generated captions for your video, and clean them up for accuracy. Machine-generated captions often mangle technical terms. In the content block, use the entry video: followed by the video\u2019s URL If both a video and an image are present, the video will override the image and only the video will be displayed When adding videos to a content block description, it is important to use the correct markup to ensure that the video is displayed correctly. To add a video to a description, wrap the video in a  element and add the class video_container. This assures that the video is displayed responsively. For example: The release post is created from many small data files, that are rendered into the final form using templates and helpers. The content files need to be created every release with the content unique to that release, as described by the section getting started. The template and helper files are used to render the blog post from the many content files, and do not need to be changed in most releases. To learn more how the template system works, read through an overview on Modern Static Site Generators. To run the project locally: In the terminal, go to the www-gitlab-com project. Depending where you cloned it: Install dependencies: Run Middleman. See the release post locally, using http://127.0.0.1:4567/ instead of https://about.gitlab.com/. For example, http://127.0.0.1:4567/releases/2021/09/22/gitlab-14-3-released/. Important note: Feature order should not be changed without approval from the Release Post Manager. Primary feature content blocks are sorted alphabetically by file name so if necessary, the ordering can be affected by adding a 2-digit numerical prefix to the file name of each individual content block. For example, 01_filename.yml, 02_another_file.yml, etc. Secondary features are first grouped by stage and within each stage sorted alphabetically by title. Features with no specified stage are grouped last. In release 13.10 and prior, bug fixes, performance improvements, and usability sections were also part of this automated sort order. Starting with release 13.11, bugs, performance improvement, and usability sections were changed from secondary features to tertiary features, so they now will automatically come after the secondary features and prior to the Deprecations Removals and Upgrades sections. Sometimes, the height of the secondary features content will be much longer in the left or right column, resulting in white space. In that case, you can force a block of content from the left to the right or vice versa by adding a force_left: true or force_right: true to an entry\u2019s yml file. (See this MR as an example.) The release post branch and most of the related directories, files, issues, and MRs are automatically created when release:start Rake task automatically runs on the Monday, 3 weeks before release.\nIf the script fails to run or there are pipeline issues, you can run bundle exec rake release:start yourself to make the following things happen: The release post item generator automates the creation of release post items using issues and epics. Issues and epics are the source of truth for what problems are being solved and how, and should have a clear description, and be well labeled. The script uses this information to pre-fill release post item MRs: Important note: GitLab Free tier is referenced as core in the data file. This is intentional and the page templates will apply the proper tier name on the frontend. To ensure the generator script runs correctly follow the process below: Once the script runs a draft MR in the /gitlab-com/www-gitlab-com project will be opened and assigned to the group PM. You can continue editing and reviewing that MR from there. If you\u2019d like to check to see when the last pipeline ran (and if it picked up your issue), you can inspect the scheduled pipeline here. You can also watch this overview video demonstrating how to use the release post item generator. *Note: If you find problems with the release post item generator, questions should be posted in Slack #release-post or add feedback to the release post retrospective issue, tagging the release post technical advisor. The generator script can also be run on your computer. Clone the www-gitlab-com project, and install dependencies using bundle install Run the script, providing your GitLab private access token, and the issue URL: Refer to bin/release-post-item --help for complete documentation. The release post item linter\nvalidates all items being merged to the data/release_posts/unreleased directory meet minimal\nstandards. Specifically, it checks: It does not check if: The schema is implemented using Rx. If you have trouble running the rake task, you can check the following troubleshooting steps: If you rebase the branch of a deprecations or removals MR, there might be multiple merge conflicts in the deprecations.md file. Do not resolve individual\nmerge conflicts from your IDE. Instead, use the removals rake task to update the file and resolve the merge conflicts. To resolve merge conflicts: In the branch you checked out in the gitlab-org/gitlab project, run the deprecations Rake task: Stage your changes: Continue the rebase: If you get merge conflicts after you continue the rebase, it\u2019s possible that deprecations.md is still out of date with\nthe latest changes in the yml. If this occurs, complete the steps again until you clear the merge conflict. The release post MR template is our checklist for every release. Let\u2019s keep it up-to-date! :) In order to display a list of deprecations and removals in the Release Post, an index must be generated from the gitlab project and added to data/release_posts/xx_y in the www-gitlab-com project. The Delivery team is responsible for creating release posts for patch and security releases. Release posts should live in sites/uncategorized/source/releases/posts. For patch and security releases,\nplease make sure to specify them in the title, add the correct category: Video walkthrough of the process \u201cWhat\u2019s new\u201d can be seen by clicking on the ? icon in the navigation menu of GitLab and choosing \u201cWhat\u2019s new.\u201d The What\u2019s New MR will be initiated by the Release Post Manager on the Tuesday of release week, finalized on the Wednesday of release week, and typically get merged by a maintainer 2 to 4 hours AFTER the release post is live on the release date. The exact timing of the merge depends on the availability of a maintainer to merge it** IMPORTANT: The MR should not be merged until after the release post is live on the release date or the images will not display. After the release post is live, but before merging, the branch should be checked out and the content checked in GDK to make sure that all images are displaying, links are accurate, and that the What\u2019s New items are part of the final release post. Only once those are confirmed should the MR be merged. Typically this means the What\u2019s New content will be live on the day or two after the release date, depending on maintainer reviews."
    },
    {
        "title": "GitLab the Product",
        "url": "https://handbook.gitlab.com/handbook/product/categories/gitlab-the-product/",
        "content": "Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership We believe that a single application for the DevOps lifecycle\nbased on convention over configuration offers a superior user experience. The\nadvantage can be quoted from the Wikipedia page for convention over\nconfiguration:\n\u201cdecrease the number of decisions that developers need to make, gaining\nsimplicity, and not necessarily losing flexibility\u201d. In GitLab you only have to\nspecify unconventional aspects of your workflow. The happy path is\nfrictionless from planning to monitoring. We\u2019re doubling down on our product for concurrent DevOps which brings the entire\nlifecycle into one application and lets everyone contribute. We are leaning into\nwhat our customers have told us they love: our single application strategy, our\npace of iteration, and our deep focus on users. Consider opportunities to take advantage of this unique attribute in early\niterations. Integrating features with different parts of the application can\nincrease the adoption of early iterations. Other advantages: Although not every feature needs to be integrated with other parts of the\napplication, you should consider if there are unique or powerful benefits for\nintegrating the feature more deeply in the second or third iteration. GitLab.com runs GitLab Enterprise Edition. To keep our code easy to maintain and to make sure everyone reaps the benefits\nof all our efforts, we will not separate GitLab.com codebase from the Enterprise Edition codebase. To avoid complexity, GitLab.com tiers and GitLab self-managed tiers are named the same. GitLab.com subscriptions work on a namespace basis, which can mean: This means that group-level features are only available on the group namespace. Public projects get Ultimate for free.\nPublic groups do not get Ultimate for free. Because: Admittedly, this is complex and can be confusing for product managers when implementing features.\nIdeas to simplify this are welcome (but note that making personal namespaces equal to groups is not one of\nthem, as that introduces other issues). For more guidance on feature tiers and pricing, visit tiering guidance for features Naming new features or renaming existing features is notoriously hard and sensitive to many opinions. The bar for renaming existing features is extremely high, especially for long-time features with a lot of usage.\nSome valid but not exclusive reasons are: When renaming features follow the process to rename a category starting with an MR to change the name in data/features.yml. Request review by the Product Director and Engineering Director of your Section for approval. Optionally, add a comment including your technical writer, engineering manager, product design manager, and product designer for transparency. When renaming a feature other items to consider are updates to documentation, blogs, direction pages and competitive information. What\u2019s New is a feature that is part of GitLab.com and Self-managed GitLab that is used to communicate highlights from each release. After each major release, a yaml file is published that contains 3-10 highlights from the release along with links to the relevant documentation to get started using them. A small notification dot appears above the \u201c?\u201d icon, and when users click on \u201cWhat\u2019s new\u201d in the menu, a drawer containing the updates slides into view. The goal of What\u2019s New is to make it easy for users to be aware of the most important changes in GitLab so we can help them stay up-to-date on all of our changes and feature updates. Use this section as guidance for using existing features and developing new ones. To keep the permissions system clear and consistent we should improve our roles to match common flows\ninstead of introducing more and more permission configurations on each resource, if at all possible. For big instances with many users, having one role for creating projects, doing code review and managing teams may be insufficient.\nSo, in the long term, we want our permission system to explicitly cover the next roles: All the above can be achieved by iteratively improving existing roles. Documentation on permissions You can now find our security paradigm on the Secure Strategy page. Also see our Secure Team engineering handbook. Traditionally, applications only reveal valuable information about usage and\nperformance to administrators. However, most GitLab instances only have a handful of\nadmins and they might not sign in very often. This means interesting data is rarely\nseen, even though it can help to motivate teams to learn from other teams,\nidentify issues or simply make people in the organisation aware of adoption. To this end, performance data and usage statistics should be available to all users\nby default. It\u2019s equally important that this can be optionally restricted to admins-only,\nas laws in some countries require this, such as Germany. GitLab is developed in English, but supports the contribution of other\nlanguages. GitLab will always default to English. We will not infer the language /\nlocation / nationality of the user and change the language based on that.\nYou can\u2019t safely infer user preferences from their system settings either.\nTechnical users are used to this, usually writing software in English,\neven though their language in the office is different. Fast applications are better applications. Everything from the core user experience,\nto building integrations and using the API is better if every query is quick, and\nevery page loads fast. When you\u2019re building new features, performance has to be top of mind. We must strive to make every single page fast. That means it\u2019s not acceptable for new\npages to add to performance debt. When they ship, they should be fast. You must account for all cases, from someone with a single object, to thousands of objects. Read the handbook page relating to performance of GitLab.com, and note the Speed Index target shown there\n(read it thoroughly if you need a detailed overview of performance). Then: You must prioritize improvements according to their impact (per the availability & performance priority labels).\nPages that are visited often should be prioritized over pages that rarely have any visitors.\nHowever, if page load time approaches 4 seconds or more, they are considered no longer\nusable and should be fixed at the earliest opportunity. In addition, to meet the ethical criteria of GNU,\nall our JavaScript code on GitLab.com has to be free as in freedom.\nRead more about this on GNU\u2019s website. The ability to monitor, visualize and improve upon cycle time (or: time to\nvalue) is fundamental to GitLab\u2019s product. A shorter cycle time will allow you\nto: When we\u2019re adding new capabilities to GitLab, we tend to focus on things that\nwill reduce the cycle time for our customers. This is why we choose\nconvention over configuration\nand why we focus on automating the entire software development lifecycle. All friction of setting up a new project and building the pipeline of tools you\nneed to ship any kind of software should disappear when using GitLab. We understand that not everyone will use GitLab for everything all the time,\nespecially when first adopting GitLab. We want you to use more of GitLab because\nyou love that part of GitLab. GitLab plays well with others, even when you use\nonly one part of GitLab it should be a great experience. GitLab ships with built-in integrations to many popular applications. We aspire\nto have the world\u2019s best integrations for Slack, JIRA, and Jenkins. Many other applications integrate with GitLab, and we are open to adding new integrations to our technology partners page. New integrations with GitLab can vary in richness and complexity; from a simple webhook, and all the way to a Project Service. GitLab welcomes and supports new integrations to be created to extend collaborations with other products.\nGitLab plays well with others by providing APIs for nearly anything you can do within GitLab.\nGitLab can be a provider of authentication for external applications. There is some natural tension between GitLab being a single-application for the\nentire DevOps lifecycle, and our support for better user experience via integration\nwith existing DevOps tools. We\u2019ll prioritize first our efforts to improve the single-application\nexperience, second to enable a rich ecosystem of partners, and third to improve integration with the broader ecosystem\nto other tools. GitLab is open-source so this should not prohibit contributors adding\nintegrations for anything that they are missing - as long as it fits with GitLab product vision. If you don\u2019t have time to contribute and are a customer we\u2019ll gladly work with you to design the API addition or integration you need. GitLab is a complete DevOps platform, delivered as a single application that does everything from project planning and source code management to CI/CD, monitoring, and security. The advantages of a single application are listed in the following paragraphs. By delivering a single application we shorten cycle times, increase productivity,\nand thus create value for our customers. Other vendors offer a kit plane you have to assemble yourself, GitLab is a type certified aircraft."
    },
    {
        "title": "GitLab Product Management",
        "url": "https://handbook.gitlab.com/handbook/product/product-management/",
        "content": "This document describes what Product Management does, where, when, and how to engage with the product management team. At GitLab, the PMs lead their specialization. That is, the Create PM decides what the Create group works on, for which release, and makes sure this furthers our goals. This includes bugs, features, and architectural changes. The PM can\u2019t be expected to parse every single bug or issue that comes by, so they have to rely heavily on the input of the various stakeholders. To be able to achieve this, both the PM and the stakeholders have to actively work together. It\u2019s a two-way street. In general terms, if you require something to happen with the product or if you need engineering staff for a particular change, you approach a PM. Preferably through creating an issue (the GitLab way), and mentioning them there. In the same vein, PMs are required to ask for feedback from the stakeholder on particular changes. If a change will affect GitLab.com and its maintenance, a PM should proactively reach out to infrastructure engineers to help with the scope, design, and decisions regarding this change. It is then up to the PM to weigh all these inputs and decide on a prioritization. It is to be expected that they are the best equipped to make this prioritization, while also keeping in mind all goals of GitLab. Please see the Product Categories to know which product manager handles which category. Generally speaking, all product feedback should be provided via issues. For detailed overview of how to create an issue, please read this section on the process. If you have any product-related questions, comments, input, or otherwise, the Product Manager is the primary person you should talk to, if creating an issue does not suffice. Creating an issue includes, but is not limited to, features, bugs, and other changes that need to be prioritized, changed, discussed, or need more attention. Product Managers will reach out to stakeholders when making or communicating any decision. The pressure of balancing priorities while ensuring we build excellent software is on the product managers and they need all the input they can get to achieve this. Paid features fall under their respective PMs, not under one PM in particular. For instance, Service Desk falls under the Monitor PM. All feedback must follow the GitLab Community Code of Conduct. Failure to do so will result in the issues or comment being deleted. If a customer has a feature request that doesn\u2019t already exist, refer to the process to create an issue in the gitlab-org issue tracker and choose the Feature Proposal template, following the instructions and providing as much information as possible. Once you\u2019ve created the issue,  make sure to add the appropriate labels for the product stage and/or group (e.g ~\"devops::plan\") if known and add a comment tagging the appropriate Product Manager. If an issue already exists, make a comment on the issue with their information and use case. Whenever you\u2019re sharing feedback on an issue (e.g. \u201cCustomer X wants this\u201d), please make sure to do the following: If a customer expresses interest by simply mentioning an issue number or e.g. \u201can integration with X\u201d, that is not sufficient information. Before creating or commenting on an issue, make sure to ask them: The Product Manager is responsible for figuring all of this out, but being one step ahead of them will speed things up. If a customer is a member of our Product Customer Advisory Board, the CSM should add two labels: ~CAB Takeaway and ~CAB Takeaway Qx FY20xx to the issue. It is highly recommended to use the feedback template below to make this easier. You can copy/paste this to make sure you don\u2019t miss anything or create a comment template for reusability: The ~customer priority::* labels are inputs for the prioritization model powering the customer issue prioritization framework dashboards: These dashboards represent the relative importance of a given issue to the specific customer. 1 is the lowest priority and 10 is the highest. These can be updated at any point in time and will be reflected in the model within 24 hours. You can find more context about priority labels on the customer issues prioritization framework handbook page. A customer with more than 1000 users mentioned they are interested in this feature to be able to do their sprint planning more effectively. The problem they are trying to solve is that with the current implementation, they can\u2019t X and need to do so because Y. They are using software X to do this today, but would be able to move to GitLab if we would do this. @productmanager this issue doesn\u2019t have a milestone right now, are we planning to address this in the near term? salesforce.com/blabla Customers that are assigned a Customer Success Manager typically have a collaboration project on GitLab.com, which is used to share information, document customer details, and track issues in a place that both the GitLab team and the customer\u2019s team can access. Generally, CSMs maintain a main issue and/or enable the CS-Tool - TAM issue tracker, which lists out all feature requests the customer is interested in with links to the public GitLab issue. When a customer expresses interest in a feature, the CSM should capture that in the public GitLab issue, as well as add it as an entry in the main feature tracking issue of the customer\u2019s collaboration project. The feature tracking issue should be maintained regularly by updating priority (elaborated on below) and milestones as the single source of truth on customer product needs. It can also be used for reviewing metrics of previously delivered feature requests. If there is a lot of discussion with the customer about a specific feature request, create an issue on the customer collaboration project about it and list that issue as a related issue on the main GitLab issue. This is another signal of the main product issue of customer interest and also allows discussion with the customer and internal GitLab team members about their needs and concerns. If you have followed the process of creating/commenting on issues and have not gotten traction, confirm that all of the necessary information is included in the issue. Follow up with the Product Manager again in the issue and in the product stage Slack channel (linking to the issue) to get additional attention and team member involvement. If a customer has identified an issue that is high priority for them, such as a work-stoppage bug or a feature required for the customer to meet a deadline, follow the expected steps for logging and tracking customer feature requests above by adding the customer\u2019s interest in a GitLab issue and including it in the collaboration project issue. In addition, reach out to the Product Manager who is responsible for the corresponding group and discuss it with them directly. A general idea of high priority is that the customer needs a particular feature as soon as possible. Critical Priority Requests are extremely rare, but, when they occur, they are agreed upon by both Product and Engineering, with the CSM facilitating the request. If a customer is unable to continue using GitLab without a specific feature, the CSM should begin the triaging the account, follow the process to indicate customer interest in the issue, then set up regular check-ins with the Product and Engineering teams to assess the status of the feature, expectations, and potential secondary plans. For the product & engineering process, please refer to the details of a critical customer merge request. The following part of this UX design article sums it up well: Listening to the right customers at the right time is a great first start, but you also need to make sure you are interpreting their feedback/requests correctly. The reason for that is generally customers ask for something to be better, not different \u2014 they interpret their problems through existing solutions. A customer is unlikely to tell you what new product to create (that\u2019s your company\u2019s job!) but they will tell you what problem that product needs to solve. To do this you need to get to the underlying why behind the feature request \u2014 what is the basic problem to be solved, and then think about how to solve that problem in a fundamentally better (e.g., 10x faster, easier, cheaper) way. This concept is best described by the (most likely misattributed) quote by the founder of the Ford Motor Company, Henry Ford: \u201cIf I had asked people what they wanted, they would have said faster horses.\u201d When the customer asks for a faster horse, you should then ask why. You would invariably hear things like:\nI\u2019d like to shorten my commute from home to work\nI\u2019d like to be able to sell my widgets to more cities\nI\u2019d like to win the Kentucky Derby\nNow that you understand the basic problem to be solved (of which there are many solutions including a faster horse), its your job to think of a fundamentally better way to solve it \u2014 e.g., what does a 10x faster horse look like? And one potential solution to that is obviously a car. If you hear a feature request from a customer, and they do not have a CSM assigned to their account, you should follow the normal procedure: create an issue and label it correctly. Let\u2019s say the customer requests an enhancement to Issues. You know by reading above that you\u2019ll have to label this with Discussion and you can mention or reach out to the Plan PM to expedite this if warranted. A salesperson for an organization asking for a paid-tier feature request shall work with the product manager to arrange conversations to further explore the feature request and desired outcome. The process will be: In the event that a paid customer is willing to pay for us to develop a specific feature, we should still respond as above. It\u2019s great that they\u2019re willing to pay for it: that means they really need it. However, we will not make a custom version of GitLab; even gitlab.com is running on GitLab Ultimate, and we move faster that way by minimizing technical complexity to determine features to follow after, it\u2019s a trade-off to make. This doesn\u2019t mean that \u201cno\u201d is always going to stay \u201cno.\u201d We keep an open mind to improvements. For example, they need support configuring a self-managed runner with a SaaS license. If you need support with a specific customer and your Customer Success Manager is unable to configure what is being requested or you are being asked to provide very specific guidelines for use of GitLab, we suggest creating an issue using the Product Support Request, and following the steps suggested in the issue. To remain focused on customer results and efficiency, we recommend setting a due date on the issue in 5 business days and assigning the issue to the Product Leader of the section for triage. Same as before, make sure an issue is made and make your case with the PM that this is becoming a problem and needs to be fixed. The PM will make sure that this is fixed or resolved in some other way. Everything in GitLab should be fast and creating files falls under the repository, so you create an issue and make the PM aware of it by mentioning it. The PM in turn will investigate whether this is a general problem or one specific to GitLab.com, in collaboration with infrastructure and others, and schedule any necessary changes for an upcoming release. The Product team maintains a Tableau dashboard to aggregate issues and customer interest in those issues. Information is automatically gathered from GitLab issues by scanning for Salesforce customer account links. A separate dashboard Customer Requested Issues (CSM) is maintained for Sales and CS to make the dashboard easily filterable by the Account Owner or CSM for example. The Tableau page automation will detect when Salesforce links are added and use the customer\u2019s Salesforce data, such as Total Account Value and seat licenses, to add them to the page. This also maintains a customer\u2019s privacy on public issues, since Salesforce links are only accessible to GitLab employees with proper credentials. If your customer would like to report a bug, refer to the example of how to express the customer\u2019s interest in an issue and use the Bug template, following the instructions and the same steps as above. You can refer to the following steps if a medium priority bug has become stale on the Product Management triage board. Another potentially helpful view is the triage report label. Follow the same steps as for logging and tracking bugs as with feature requests, but be sure that steps to reproduce and workarounds are included whenever possible. It is essential for the Product team and the CSM team to have a close working relationship, so that the business has a pulse on customer interests, feedback, and sentiment. If you are on the Product team and seeking feedback from customers, you should consult with the Customer Success Management organization, as CSMs have direct access and regular communication with customers across all regions, tiers, use cases, and industries. To request a meeting with a customer, open an issue in the CSM project and use the Product Engagement issue template, filling out the appropriate fields. If you have a specific customer in mind that you\u2019d like feedback from, please share the customer name in the issue and tag the CSM assigned if you know who it is (you can find this information in Salesforce if you have access; otherwise, someone else will check for you). The CSM team gets notified via Slack whenever a new issue is opened, and they will respond in the issue with specific customers when they are available. If you don\u2019t receive a response within a week (allowing the CSM to review with their customers), feel free to ping the @timtams group in the issue. One of the responsibilities of CSMs is collaborating with the Product team to help prioritize features by indicating demand from customers and relaying customers\u2019 use cases and experiences. Following the process described below will ensure that customer interest in features is shared with Product properly, so that Product can take appropriate action. Through following the documented process, we are able to increase our efficiences, decrease back-and-forth communication, build a better product, and get answers and resolutions to customers faster. It can be very helpful for both Product and customers to be on a call together to discuss feedback, roadmaps, etc. Take the following steps to ensure an efficient and productive meeting: In advance to the product call, have a conversation with the customer about expectations and their background. Ask the following questions, as applicable: It is best practice to ask for a PM to join your call through the slack channel for their group or category. Direct messages are problematic because it is hard to loop in other PMs if the right person for the call is not included in the DM, and it limits visibility into topics that may be discussed. If you are unsure about the right group to reach out to, you can ask in the general #product channel. Before reaching out to the PM, fill out the PM Customer Meeting Briefing Document and send it to the PM along with your request. The PM will review the doc and let you know if they are able to attend the meeting. PMs may decline meeting requests if they do not receive the context doc or if it is only partially complete. We recommend sending this context along with your request at least 3 business days before the meeting. The PM will review the document and provide feedback to ask for further clarity if needed. In addition, once the call is scheduled, make sure you have a detailed agenda set at least 24 hours before the call that is shared with both the customer and the Product team. CSMs regularly hold Executive Business Reviews with their customers and often request involvement from Product Managers. When a CSM is looking for Product involvement, they will reach out to the PM (in their group Slack channel) with the date, time, and desired topic. The CSM will involve the PM in preparation for the EBR, working with them to ensure expectations of content, timing, and desired outcomes are fully established. EBRs are usually quite long (60-90 minutes) and the product presentation is only a small portion (15-20 minutes) of the overall EBR, so the PM is welcome to only join when they will be speaking. Of course, if they want to join and/or participate in the full call, that is definitely welcome, as customers often share product feedback and requests throughout an EBR. Throughout the customer lifecycle, customer-facing teams (Support, Account Executives, CSMs, Solutions Architects, Professional Services, Renewals Managers, etc.) may need the assistance of a Product Manager. This can include a detailed discussion of our direction, and how to address specific use cases, or gaps in functionality, within an organization. To ensure these requests can be quickly triaged, easily scheduled, and later tracked, there is a standardized request process based on issues. For time-sensitive and high-impact requests, please paste a link to the issue in the #product Slack channel, and @mention the recommended PM\u2019s in the template. When a support request is opened, labels will automatically be assigned to categorize the request. Three fields are particularly important when triaging requests: All Product Managers should ensure they are set up to receive label notifications for their respective stages: GitLab is designed and developed in a unique way. Consistent with our value of Efficiency\nthe product is developed with directly responsible individuals from Product, UX, Quality and Development working together. At GitLab, we develop our product for self-managed as well as SaaS-hosted customers. We realize that while we have DRIs there are many stakeholders who must have input, including Engineering, Quality, UX, Product, Security, and Infrastructure. For example, the Security team often has the deeper context of what it takes to run a secure SaaS system. Similarly, the Infrastructure team has insights into what we should build into the product to reduce toil and enable efficient, reliable, performant, and scalable systems. We call this the Product Group model. It is an extension of the classic quad concept at the leadership level and is currently comprised of Development, Quality, User Experience, Infrastructure, Product, and Security. The Product Group can be used to facilitate a global optimization, including product-wide technical debt. There are many counterparts that PMs work with. Here are some best practices for working across the organization. In some cases, Product Managers may have items that incur expenses toward the budget. These can be related to external vendors for research, contractors for development staffing, and infrastructure. The CProdO is the DRI for the product budget and all changes or requests for budget spend must be approved through them. To request a forward-looking new budget item, open an issue in the Product project using the Product Budget Request Template and assign it to the CProdO and manager. Budgets are planned annually and quarterly, so approval may not be immediately given because it depends on the timing of budget planning. The CProdO will bring the budget request to the next budget planning session with Finance. To request approval for an increase in the expected spend for a pre-existing item, open an issue in the Product project using the Product Budget Request Template assign to the CProdO and tag your manager. The CProdO will review, approve or decline the budget change. The CProdO will then notify the Finance Business Partner of changes for forecast updates. Content marketers and Product Managers can partner together when using a Blog to communicate product changes and engaging the market with thoughtful changes. See the blog post handbook page for guidelines on when and how to start engaging Content Marketing for creating a blog post for a feature. Product marketers and managers should be joined at the hip. Just as a feature without documentation\nshould not be considered shipped, benefits of GitLab that we\u2019re not actively talking about might\nas well not exist. Product marketers rely on product managers to be guided to what is important and high impact.\nIn general, you should: A core element to use cases is effective objection handling against major competitors in the market. In order to effectively support this effort, a partnership between Product Marketing and Product Management to maintain adding competitor walkthroughs and competitive content to the existing use cases is critical. To date we have competitive sections on the following uses cases: In FY22-Q2, we are taking on an effort to continually update these Tier 1 and Tier 2 use cases and are assigning DRIs, follow along this effort in gitlab&1446 When working on the release of larger features or new capabilities, it is important the product manager consider various aspects of the go to market plan and  inform or partner with the appropriate stable counterparts for strategic and logistical considerations. As a PM you\u2019re responsible for making sure changes you\u2019ve shipped are well represented\nthroughout GitLab\u2019s documentation and marketing materials. This means that on\nrelease, features.yml is updated, documentation is merged and deployed, and\nany existing content is updated where necessary. It\u2019s not acceptable to do this after the release. GitLab is very complex, and features\nand functions are easily missed, even those that provide significant value to customers\n(e.g. the many ways you can authenticate with GitLab). You can recruit the help of the marketing and technical writing team if needed,\nbut it\u2019s highly recommended to do small updates yourself. This takes less time\nand overhead than communicating what needs to be done to someone else. It\u2019s important to keep features.yml updated because there are a number of different pages (internal-facing and external-facing) that read from that file. These include: External Internal The standard for working as a team at GitLab is the Product Development Workflow. Product Managers and Product Designers should work together as strategic counterparts to better understand the problem and discover user needs. The Product Designer and the Product Manager will pair to understand the target audience, their challenges when using a particular feature and then designing a solution that helps users solve them. It\u2019s important to remember that User Experience (UX) does not only relate to visual features or interface design. UX is the intangible design of a strategy that brings us to a solution, so it also refers to the experience of writing code, working with .yml files, designing APIs, working with a CLI, etc. All of those functionalities are meant to be read and used by people. Involving a Product Designer into their planning and development can be highly beneficial. A guide to consider is: anytime a person is interacting with something, there is an opportunity for that interaction to be designed. As the GitLab product matures, we know we must make important workflows easier to use through feedback-loop mechanisms as is captured in the \u201cImprove\u201d section of the Product Development Flow. We can use the Category Maturity Scorecards and UX scorecards as mechanisms to provide insights into how might be able to improve these user workflows. For areas with minimal maturity, or low/internal-only adoption, iteration and quickly adapting the product is the priority. In cases where the product experience desired would take longer to implement than required for the current maturity stage, it is advised the Product Manager work with the Product Designer and/or Engineering Manager to scope an iteration plan to ensure the experience is delivered incrementally over time to provide value quickly with quality. For areas with more adoption, or beyond viable maturity, we recommend using the below escalation path if there is a disagreement on the approach to solve for the product direction and experience for users/customers. As a team, there may be cases where a proposal exceeds the expected time to market to achieve the optimal customer experience. As this impacts potential business results, product managers are the DRIs of the decision. As DRIs, it is important to consider the input from other team members and to know when to trust in their experience and judgment. It is advised to use an opportunity canvas lite. The PM is expected to compile the canvas lite with inputs from the Product Designer and/or Engineering Manager. The PM then makes a decision after weighing input from the product designer and engineering, as appropriate. The PM should then share the decision, articulating the costs of waiting, and shipping earlier with less polish, as well as why no smaller iteration exists as part of this decision. In the event that a decision is made to build something that is less polished, has a lesser user experience, or otherwise doesn\u2019t live up to our standards of where we want this UI to end up the team should generate follow-up Deferred UX issues to be addressed in the next upcoming milestone(s). If a quad member remains concerned and in strong disagreement with the decision made by the PM DRI, the quad member should exercise our disagree, commit, and disagree value, by initiating an escalation to bring in management layers above into the decision. Results are the most important aspect to consider for the business and our users. If there is a perceived risk to potentially harm the business financially, reduce customer satisfaction or value, or lead to legal trouble, teammates are empowered to seek an alternative perspective for the product decision. Within the Product Division, we recommend escalating first to the management layer immediately above where the disagreement is happening for input and further escalating to PLT and ultimately the Chief Product Officer. Product Designer assignments are listed in the team.yml file. Unfortunately, we are currently unable to assign a dedicated Product Designer for every group. Instead, Product Designers are assigned to the areas of highest business priority and will continue to provide focused support to those priorities throughout the year. Due to the limited capacity, we are also not able to do UX reviews on MRs for groups without a designer. If there isn\u2019t a designer listed for a group, then that team is expected to be self-sufficient in taking responsibility for the design needs of their product area. Product Design does not have the capacity to review complex proposed design solutions or provide design solutions for unsupported groups. If you have questions or need support you can do so in the following ways: Here are some practices for how PMs work with groups outside of GitLab. Product managers are the DRI for their group\u2019s product direction\nwhich must include delivering on our greater company strategy of dual flywheels.\nCommunity contributions are a critical\npart of the product direction.\nTo support contributions product managers may consider the following guidelines: This document describes best practices for internship for learning with Product. Internships are a great way for a GitLab team member to learn about being a Product Manager at GitLab. Use this guide for planning and executing an internship under an IC PM who acts as the \u2018Intern Mentor\u2019. The first step you will need to take in order to start an internship in Product Management is to find a mentor from the Product Management team. On this page, you\u2019ll find an overview as well as links to helpful resources for evaluating a product manager\u2019s performance at GitLab. To better understand a product manager\u2019s responsiblities at GitLab, please visit The Product Manager Role at GitLab Required \ud83d\udd0e\n\nWe track progress through the skills required to be a product manager at all levels via the Product Management Career Development Framework (CDF). The single source of truth for that framework is the table below but you can use this CDF template to track your career development with your manager. We are transitioning the CDF to include the company-wide standard of evaluating performance per the Performance/Growth Matrix. In this model, performance will be considered in categories of Developing, Performing, and Exceeding, alongside evaluation of Developing, Growing, and Exceeding in Growth Output instead of using Growing, Learning, Thriving, and Expert categories of the compa-ratio. In order to make changes to the specialty of these team members follow the outlined process for updating in BamboHR. Reach out to the Total Rewards team by asking in #total-rewards slack.."
    },
    {
        "title": "Product Principles",
        "url": "https://handbook.gitlab.com/handbook/product/product-principles/",
        "content": "Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership These are core principles we believe world class product organizations exhibit. The goal is to build a PM system that fosters and honors these principles, in a way that works for GitLab. From development teams to marketing organizations, everyone needs to collaborate\non digital content. Content should be open to suggestions by a wide number of\npotential contributors. Open contribution can be achieved by using a mergeable\nfile format and distributed version control. The mission of GitLab\nis to allow everyone to collaborate on all digital content so people can\ncooperate effectively and achieve better results, faster. Ideas flow through many stages before they are realized. An idea originates in a\nchat discussion, an issue is created, it is planned in a sprint, coded in an\nIDE, committed to version control, tested by CI, code reviewed, deployed,\nmonitored, and documented. Stitching together all these stages of the DevOps\nlifecycle can be done in many different ways. You can have a marketplace of\nproprietary apps from different suppliers or use a suite of products developed\nin isolation. As a single-application for the entire DevOps lifecycle GitLab strives to enable you to bring ideas to production rapidly. We will do so AND avoid demonstrating our capabilities with toy app demos and simple trivial examples. That\u2019s because we understand that building a prototype is easy, but building a production line is hard. Minimal Valuable Change (MVC) is the GitLab path to delivering the smallest measurable improvement for our users, customers, and the wider community. Our approach requires four pillars: When considering how to scope a feature for a release, remember that it is not ok to ship an \u201cincomplete\u201d feature to customers (see the definition of done). Consider the use of Pajamas components for UI in your MVCs. When introducing a new component or pattern not found within Pajamas, it is the responsibility of that team to follow our component lifecycle guidelines to determine whether it should be added and, if so, contribute the addition/update back to Pajamas. MVC means reducing the scope so we can ship quickly. It doesn\u2019t mean shipping something that hurts the usability of GitLab. First impressions are important. A feature that does not offer enough value or hinders the user experience may have a negative effect that discourages users from trying that feature again in the future. If there are obvious gaps in your MVC or you can anticipate follow-up requests, consider whether your feature is complete enough to be released to users. If you are unsure whether your feature is complete enough to be an MVC (or if you know your feature is not complete enough to be an MVC and you want to gather additional feedback), you can use approaches such as dogfooding, beta programs, feature flags, and/or user research to help build confidence in your decision. In terms of talking about your feature, it\u2019s ok to add a release post item that announces your incomplete feature (making clear that it is an early iteration, and points to the direction for the feature) and follow up in a later release post with a new item when you\u2019ve completed more of the functionality. As long as you call it cookie dough, not a cookie, it manages user expectations. Examples: There are scenarios when an MVC approach is not advised. These include: An MVC approach is a byproduct of our spirit of iteration. That means we break problems down as small as possible, and focus on reduced cycle time. Thinking iteratively is not always intuitive, and breaking certain topics or projects down can be challenging. Here\u2019s a helpful video from our CEO with guidance on how to think more iteratively. Here is a great video that illustrates how to build MVCs using Iteration. It shows Lego climbing obstacles. The first design fails. The second one can climb a book and so on. It also illustrates how modularity and good interfaces help with iteration as things get complex. To ensure that our efforts consistently deliver value to our users, each iteration must adhere to the following guidelines: Success of an initiative is not measured by the deployment of a change or the completion of an iteration. True success is determined by whether the iteration achieved its predefined objectives, as evidenced by tangible business and product metrics. Example: We celebrate achievements when we can clearly see that an iteration or launch has resulted in tangible value for our users. Humans tend to favor solutions that add features than solutions that remove them, even when removing features is more efficient - great PMs recognize this bias and utilize subtractive thinking to create great user experiences. Customers will tell us when we\u2019re missing something they need, but they\u2019re unlikely to explicitly tell us when we\u2019re overwhelming them with unwanted features. However, we do have evidence that this challenge is already a consideration for us, as reflected consistently in our System Usability Scale verbatims. Here is an episode on the Hidden Brain podcast that explores this bias further. Our customers choose SaaS because it reduces their operating costs, helps them adopt the latest capabilities without performing upgrades, and provides them peace of mind of high availability. This implies we adhere to SaaS first principles. SaaS first implies the following: SaaS First does not mean SaaS only. For more information on parity between SaaS and self-managed, see our parity principle: #parity-between-saas-and-self-managed-deployments An MVC approach allows for maximum feedback while iterating. To help gather that feedback, Product Managers are encouraged to create feedback issues (example) to consolidate suggestions and experiences from users. Consider mentioning the feedback issue in any release post items and related implementation issue(s) for awareness. It\u2019s important that team members know they are encouraged by E-group to continue moving fast as GitLab grows and gets bigger as a company. This involves moving quickly even in the face of risk and complexity. In alignment with our transparency value, we\u2019d like to celebrate examples of failures or mistakes that were made while moving fast, where we ultimately learned from it and moved on. The following failures provided by the product team are celebrated as opportunities to gain insight, share learnings and move on with additional knowledge: If you have a failure that can serve as a learning opportunity, please make an MR to this page Just because something is not invented here\ndoesn\u2019t mean it doesn\u2019t have a perfect home within our solution. GitLab is an\nOpen Core product and is part of the broader ecosystem of Open Source tools in\nthe market. Every day there are new innovative open source tools out there that solve\nreal-world customer problems; we should not be afraid of embedding these tools\ninto our own products in order to solve those same problems for our customers\ntoo. Leveraging existing technology allows us to get to market much more quickly,\nto contribute to Open Source (and help strengthen Open Source as a whole), and\nallows us to focus our own people on making GitLab itself better. Building\nprofessional relationships with these tool creators also is a positive for GitLab\nsince they may have important user perspectives around your categories. We have achieved many successes following this approach: There are also many more examples throughout the company where this has been successful.\nAs a product manager you should be monitoring the world of Open Source as it\nrelates to your area to see where new innovative tools are being developed, and\nnot be afraid of integrating those. One thing to keep in mind, integrating could\nbe anything from a blog post describing how the tool works together with GitLab\nall the way up to bundling it inside of our own installation, and this can\nevolve iteratively. We understand that a natural inclination when using application development tools is to create an array of buttons to press and knobs to turn. We believe, however, that adding options to an application does not necessarily improve the user\u2019s experience of that application. The best way to serve our users is to create an application that reduces complexity while still offering the features they need. We admire other \u201cconvention over configuration\u201d tools\u2014like Ruby on Rails (the doctrine of which perfectly describes the value of integrated systems), Ember, and\nHeroku\u2014and we strive to offer the same advantages for continuous delivery of software. Furthermore, Ruby on Rails has significantly and positively influenced the Ruby community, uplifting the tool and making it more powerful and useful than ever before. We want GitLab to be to Kubernetes what Rails is to Ruby. You should prefer well-considered choices based on current best practices. Avoid unnecessary configuration. Avoid configuration to support fragile workflows. When considering adding new configuration, we follow the following principles: Sometimes fast deployments are needed to fix a service or application outage that can cost a business money and reputation, we understand time is of the essence in these situations. That\u2019s why we believe giving the team control over this is important in crucial moments of the development lifecycle. Controls that prevent changes from reaching Production are okay as safeguards, but they should be able to be quickly removed or disabled if necessary. When controls are changed in this way, logs or records should be created to support post-mortem analysis and allow for understanding why the control needed to be removed or disabled. We want to provide the same capabilities to end users regardless of the method they choose to use GitLab (GitLab SaaS or Self-managed). At the same time, we believe in the power of a single code base. Therefore we strive to maintain feature parity between SaaS and Self-managed installations. In line with our SaaS-first principle, some features may be released on SaaS to gain operational experience prior to recommending and supporting customers using it. All features will eventually be made available across SaaS and self-managed once those learnings have been applied. For functionality where implementation may be especially challenging without cloud services, for example with AI, self-managed functionality may be dependent on an underlying SaaS service. This allows us to provide end users the same capabilities regardless of deployment type, and not overly constrain our feature set or impose significant operational complexities on each deployment. Product managers need to be aware that this may impact the adoption of these features, as not all customers may be willing or able to leverage underlying SaaS services, such as air-gapped deployments. Exception to this product principle requires CEO approval. Work with VP, Product Management to add your request to the Product Scale agenda describing the situation and request for exception to gain CEO approval. Our simplicity and SaaS/Self-Managed Parity principles require that we adhere to our established knowledge architecture. Our established architecture is Organization, Group and Project. Note: This implies that we will take pains to avoid instance-level features as we expect to move all capabilities from instance to organization over time. After making a tier decision on a new feature, we should strive to maximize the number of users who can use it. As part of this objective, we should avoid building instance-level features when possible. Building at the instance level (in the admin area) leads to\na separation between GitLab.com and self-managed and limits\nyour audience to self-managed customers only: Historically (and even net-new proposed features) we\u2019ve often started with an \u201cinstance-wide\u201d mindset which then means we need to iterate and adjust features to work at a group-level. This often delays functionality for our SaaS customers and makes GitLab.COM feel like a second-class citizen. There are factors that may justify an instance-level feature, like engineering efficiency and high infrastructure cost, but we should always have a clear view on how we might bring the feature to GitLab.com and clearly document why we started with the instance-level in the issue. Product Managers at GitLab are frequently confronted with the choice of whether to add new configurations or not. These can frequently be times where an outside perspective is important. That\u2019s why we\u2019ve created the option to request a New Config Review. Here\u2019s an example of how to consider whether to add new configuration. Let\u2019s say you are proposing we add a checkbox or two radio boxes in a feature dialog box. Think carefully about what users really want. Most of the time, you\u2019ll find you really only need one solution, so remove the other option. When two possible choices really are necessary, the best or most common one should be the default, and the other one\nshould be available. If the non-default choices are significantly less common, then consider taking them out of the main workflow for making decisions, by putting them behind an Advanced configuration tab, for example. Avoiding configurations is not always possible. When we have no choice,\nthe secondary priority is to configure something in the GitLab\ninterface. A configuration should only appear in a file (gitlab.rb or\ngitlab.yml) as a last resort. When you have to add a new configuration, make sure that the features and services are on by default. Only add a configuration line to either of these configuration files if the feature or service cannot be fully disabled from the admin UI. If the decision to add a configuration follows the principles above, add it to the repository-specific CI configuration options and be sure to default it to the option that results in the best user experience. We are much more liberal with additions to CI configurations than Instance configurations. Features should be owned by one group, including the respective DRIs of that group. Make sure that the documentation metadata and the features.yml for your team are kept up to date to make it easier for other teams to find the correct owner. This principle is important because unowned product features are unsupervised, and continue to accrue technical debt over time. This increases the risk of performance and maintenance issues, which tend to only get resolved once the situation has become critical. In addition, by having clear DRIs for our entire surface area, teams are able to advocate for investment and/or removal of features. If you encounter a feature that does not seem to be owned or documented, work with the team that originally introduced the functionality to decide on ownership. If the feature is large and needs to be broken down, document which elements are owned by which team. If you cannot decide who should own the feature, escalate the decision to the lowest common reporting line between the involved teams. If there are features that no group wants to own, or features that a group no longer wants to own, that feature should be considered for deprecation and removal. A highly usable interface with cohesive workflows and comprehensive documentation is a must to stay ahead of our best-in-class competitors. Work closely with the individuals in UX to achieve our user experience goals. The UX team has a high level of expertise in Product Design, Technical Writing, and UX Research. They can help decipher or decide how to simplify or avoid complexity. While our Product Designers review user interface changes in merge requests, they are not limited to just the UI. Anything that impacts the user journey is relevant to them. Keep in mind these general user experience principles. Additionally, you can familiarize yourself with the UX team mission and GitLab\u2019s Pajamas design system principles. Many crazy, over-ambitious ideas sound like they are impossible just\nbecause no one else is doing them. Since we have amazing engineers and a culture of shipping minimal\nvaluable changes, we are able to accomplish many more \u201cimpossible\u201d things than other organizations. That\u2019s why we\u2019re shipping merge conflict resolution, why we shipped built-in CI\nbefore anyone else, why we built a better static pages solution, and why\nwe\u2019re able to compete.  Here at GitLab, we are an ambitious company and this means we\naim for big things with every release. The reality of taking chances and\nplanning aspirationally means that we won\u2019t always be able to deliver everything\nthat we wanted to try in every release, and similar to our OKRs,\nwe believe this is a good thing. We don\u2019t want to shy away from challenging\nourselves and always want to keep a sense of urgency, and aiming for more helps\nus do that. Also see the importance of velocity We arrived at our preference for ambitious planning after measuring our velocity and finding that our velocity was unchanged whether we scheduled ambitiously or scheduled for providing slack. Discovering new features can enhance the experience and unlock significant value for users. And the more users see and try our features, the faster we can get feedback to improve them. However, excessive feature discovery efforts can become irritating for users. This erodes trust and reduces engagement with other UI elements in the future. Even worse, they might leave GitLab due to this deteriorating experience. Context plays a significant role in how users engage with new functionality. By presenting features in a way that resonates with a user\u2019s current situation and needs you increase the liklihood of them using this new functionality. Work with your product designer to improve the discoverability of your features. The Pajamas Design System has best practices and examples to support feature discoverability. We can also design new patterns. The Growth team can also help you with this, as they think about things like onboarding new users and promoting feature use within the app while supporting, not annoying, the user. As the GitLab userbase and team members who work on GitLab continue to grow we need to support both our users and team members by helping to connect users who may be interested in speaking with a member of the sales team to that particular person. We can call this a Product Qualified Lead or a PQL. Our goal is to develop a world-class PQL system whereby we monitor product usage to understand and constantly iterate on what constitutes a usage-based PQL and provide a unified intelligent interface in the product where users can submit a hand-raise, start a trial or upgrade touchlessly. By monitoring product usage, usage PQL volume, SAO rate, and ASP we will be able to work in partnership with marketing and sales to ensure we\u2019re sending high quality leads to the sales team. In the product experience, we will develop an intelligent module for feature discovery moments whereby we help recommend what we believe should be the preferred option for the user whether it\u2019s a hand-raise, trial or touchless upgrade by updating the default CTA based on their usage of the product along with demographic and firmographic data. This experience will be present on both SaaS and self-managed instances for air-gapped instances the CTAs will provide the user with external URLs to visit to complete the associated step. This experience should be able to be deployed by any stage to further their paid adoption rate. Users can only experience GitLab\u2019s value when they actively use the product features. Therefore the Product team\u2019s mission isn\u2019t only shipping features and building products, but also driving usage and delivering value. There are two frameworks we use to think about driving GitLab\u2019s product usage: we use the AARRR framework to think about how to drive a single feature\u2019s usage, and use the Customer Adoption Journey to think about cross-adoption of product features. These two frameworks are also interconnected with each other. AARRR stands for Acquisition, Activation, Retention, Revenue, and Referral which is often referred to as \u201cPirate Metrics\u201d. These five words represent the customer journey and the various means a product manager may apply Product Performance Indicators to drive a desired behavior in the funnel. While the AARRR framework is commonly used to drive overall active users, it is also a great way for PMs to think about how to drive feature usage. Add AARRR funnels for your stage or group\u2019s Product Performance Indicators directly with mermaid markdown. It\u2019s easy if you use this live editor. Product managers can use these various states to prioritize features that drive a desired action. This could mean focusing on the Activation metric to drive awareness and generate more top of funnel leads. As an example, in the Release stage the Release Management group tracks actions on the Release Page in GitLab. Users that view a Release Page have been acquired and those that create a release on a Release Page are activated users. The Product Manager can choose to target features that drive users to view the Release Page more, resulting in a greater interest in the number of users that become activated and create their own Releases. GitLab is a complete DevOps platform. Our customers get the most value out of the GitLab product when they use multiple features together. Below is the most common path our customers follow to adopt GitLab\u2019s product stages. As PMs, in addition to driving usage of individual features, we should also proactively think about how to design product and user experiences to help users adopt more stages and features, therefore benefiting more from using GitLab. Note: There are numerous potential variants to this adoption journey, but it\u2019s important to keep this representation simple and consistent. Please check with David DeSanto first before making any changes to the adoption journey image. Shipping only MVCs can result in a large set of loosely connected pieces that\ndon\u2019t necessarily combine into a single, great user experience. An obvious solution to this would be to plan out the future in detail,\ncreating a long-term detailed plan. However, this is unwanted as it can restrict\nyour flexibility and ability to respond to changing needs or feedback. Flow One offers an alternative. You draw out a workflow consisting of\nMVCs (that can be shipped individually). The workflow should only cover a\nspecific, narrow use-case, and nothing more. This means you: Flow One should cover the first iteration of a particular workflow.\nAfter this, individual MVCs can be introduced to expand the use-cases\nor loosen the assumptions (e.g. from a feature that can only be used\nif you\u2019re using feature branches, to one that works for other git strategies). Using data to learn from our users is important. Our users are spread across GitLab.com\nand self-managed instances, so we have to focus our efforts on learning and\nproviding benefit to both when we decide to collect more data, or build and use\nadditional analytics tools. If we do this, we can help make the rest of the\ncompany successful as well. This means that we should: Per GitLab Stewardship, we will not introduce artificial limits in Core. Artificial means\narbitrarily setting a small number (such as: 1) as a limit on a given GitLab object category,\nthat would incur no additional effort or cost had we chosen a larger number. The additional\neffort includes product, design, and engineering effort to create the feature in the first place,\nand to maintain it over time. For example, GitLab Core has the issue board feature in every project.\nIn GitLab EE, each project supports multiple boards.\nThis does not mean that Core has an artificial limit of one board per project, because there is additional effort\nto manage multiple boards such as supporting the navigation interface, and all the associated engineering work. This principle does not apply to our SaaS offering as limits are occasionally introduced to limit our hosting costs and protect other users from potential abuse. As an example we have shared runner minute quotas and implement rate limiting. We\u2019re discussing enforced workflows in this issue. Enforced workflows should be avoided in GitLab. For example, there are three issue\nstates (Open, In Progress (as of 10.2), and Closed), and any issue should be\nallowed to transition from one state to any other state\nwithout workflow restrictions. (Roles and permissions is a separate concern.) A comment on Hacker News perfectly details what can go wrong when enforcing workflows: \u201cThe down side for the true end-users, those who actually use the software day-to-day,\nis that most business processes are awful. If your experience is the hellish existence\nthat I see strolled about on threads where JIRA comes up \u2026: But that comment also specifies the advantage: \u201cJIRA\u2019s most powerful feature is that it affords for mapping businesses processes onto software.\nThis is incredibly compelling to enterprise customers. Software that enforces workflows, procedures\nand requirements can be an incredible lever and JIRA\u2019s price point makes build vs buy decisions an absolute no-brainer.\u201d We should ensure that GitLab makes it easy to help with enterprise workflows: When considering a customer need for enforcement or limitations: As an example, customers requested instance-wide enforcement through required CI jobs. Doing this would have been a mistake. Instead: Small primitives are building blocks in GitLab. They are an abstraction not at\nthe technical level, but truly at the product level. Small primitives can be combined,\nbuilt-upon further, and otherwise leveraged to create new functionality in GitLab.\nFor example, the label lists in issue boards\nuse the smaller primitive of labels. They are especially powerful because they usually take less effort and provide\nhigher leverage than you would get from a more \u201ccomplete\u201d but standalone feature.\nThink of how simple Unix command line utilities can be chained together to do\nreally complicated things, much easier (and certainly more flexibly) than you\ncould have done with a dedicated tool. When iterating on GitLab, strongly consider using small primitives instead\nof creating new abstractions, especially when considering MVC features\nthat will provide the foundations for further improvements. To do this\nyou can start with easy to apply concepts that meet the needs of intermediate\nto advanced users; from here document the usage clearly and be sure to think about\ndiscoverability. The UX can very often be refactored or enhanced later when there\u2019s\na demonstrated need for refinement, onboarding for less sophisticated users, or\nother new abstractions needed that were identified through real-world usage. In GitLab the product, it is sometimes the case that optional software or infrastructure is required to enable new capabilities. Some examples include: The following are best practices we consider when building such components. As we learned with GitLab CI/CD, the ability for developers to quickly attach needed Runners to enable their own use of GitLab CI/CD allowed for rapid adoption of GitLab CI/CD within an organization. When considering the workflow to enable additional capabilities, start with enabling developers first. A guiding principle should be low-friction developer enablement, which will positively impact adoption. As we learned from the certificate-based Kubernetes Integration, building starting experiences that support demoing a getting-started process doesn\u2019t necessarily translate into real usage. For example, the certificate-based integration lacked strong security primitives and the ability to manage the integration on an ongoing basis. As a result, we should build capabilities that target real-world production use first, even as part of MVCs. GitLab\u2019s vision is to be the best single application for every part of the DevOps toolchain. However, some customers use tools other than our included features, and we respect those decisions. With this in mind, it\u2019s sometimes valuable to integrate with 3rd-party services and products to help bridge the gaps in their toolchain. While a single application is the best approach, multiple applications that work well together is better than ones that don\u2019t. With this in mind, below are some product guidelines to consider: Note - We intend to provide a place where everyone can contribute, such as code snippets, project templates and CI components in the CI/CD Catalog. Marketplaces are traditionally transaction based, where users are purchasing solutions. GitLab CI/CD components on the other hand, will offer an in product experience for consuming components for YAML configuration from a library of GitLab maintained components. Closed source software vendors commonly depend on plugins and commercial marketplaces because: Because GitLab is an open core product, third parties can add functionality directly to GitLab. Adding directly to the GitLab codebase (as opposed to building a plugin) may mean more work for them and will limit the ways in which they can charge for that functionality. However, for users of GitLab, this has significant advantages: And for developers of GitLab including the third parties, this has significant advantages as well: Overall, we believe that this approach creates the best possible experience for both the users of and the contributors to GitLab, and to that end we encourage people to contribute functionality to GitLab directly. If adding code directly to GitLab isn\u2019t an option, we encourage third-parties to integrate through our APIs. Note: GitLab does support plugins that respond to system hooks, which tie directly to application events and are primarily used for administrative purposes such as auditing, logging, and other administrative tasks. GitLab is a DevOps Platform, not a collection of DevOps point solutions; the naming of GitLab products and features should reflect this. Adopting descriptive names brings other advantages: As an example, CI/CD Components Library is a descriptive name while CI/CD ATOM is a distinctive name. Exceptions to this principle are considered in limited circumstances - if a product or feature is a differentiator in the market, adopting a descriptive name risks it getting lost in the sea of same. Here, a distinctive name may be justified. To discuss an exception, reach out to #marketing in Slack. When naming a GitLab extension, plugin, app, or integration for a third-party product or service (a \u201ctool\u201d), either include the third-party service name with a preposition like for, or don\u2019t include it at all. A preposition is important as it indicates that the third party isn\u2019t officially affiliated with the tool. For example, our integration with Jira Cloud is called GitLab.com for Jira Cloud. Provided we use the tool\u2019s full name in marketing materials and technical documentation, as exceptions to this general principle we can: (1) refer to the tool solely by the third-party service name in places where we list GitLab\u2019s tools in product; and (2) refer to the tool solely as \u201cGitLab\u201d in the third-party product\u2019s app directory. For example, we refer to the GitLab for Slack app as \u201cSlack\u201d in our lists of GitLab integrations, and as \u201cGitLab\u201d in the Slack App Directory. For more guidance on the feature naming process, see naming features. While our big, hairy, audacious goal spans all development processes, personas, and use-cases, there are primary targets in each one of these venues.\nWhen considering prioritization we should first aim to provide complete maturity for developers building cloud native applications in a modern way prior to moving to other development methodologies, personas, and application types. When developing features to compete with existing competitors, make sure to\nsolve problems for modern development teams first, and then see what\u2019s missing\nfor legacy teams. e.g. For project management, make great project management\ncapabilities for teams doing conversational development, lean, or even agile\ndevelopment before doing Scaled Agile Framework (SAFe) or waterfall. It\u2019s important that modern first does not mean non-modern never. It means that\nwe should first learn how teams are using the feature in a modern way, and then\nsee what\u2019s missing. The modern way provides the path forward, and then we can add\ncustomizability or the path to modern for teams who are not quite there yet. Our strategy includes going after a lot of new personas, going from developers to\noperations, security, product managers, designers, etc. But when developing\nfeatures in these new areas, it\u2019s important to remember to start with the\ndeveloper. If we can make security great for developers and then great for\nsecurity professionals, we\u2019ll be much more successful. Development teams deploy to tons of different platforms, from bare metal to\ncloud VMs to cloud-native Kubernetes clusters. We build features for\ncloud-native first, and then support the rest. This allows us to focus on\nwhere development is going, and deliver solutions that every company aspires to\nuse eventually, even if they\u2019re not ready to today. By focusing on next-generation development flows, personas, and use cases - we build features and experiences where our initial users are in the relatively small population of early adopters. While we might build experiences to support them today, we presume there will always be a much larger population of future users of these experiences. Therefore, we optimize GitLab to support the larger number of current and future adopters of next-generation principles - those who are beginning to operate in the workflow (modern), team setup (developer first), or application architectures (cloud native) we support. We focus our investment in the most modern workflows that will best support those current adopters. This will come at the cost of sustained investment in initial workflows for early adopters. When doing so we will ensure we clearly communicate with our users what the preferred path is. For example - We first provided the ability to attach Kubernetes Clusters via the Certificate method. After realizing this wasn\u2019t optimal for production use cases we added the GitLab Agent for Kubernetes method of cluster attachment. As soon as we were certain that the certificate method was no longer the preferred method we communicated via our docs and in the product that the Agent was the preferred path for current adopters. This should not mean an immediate deprecation, but a clear signal that the legacy method will become deprecated once the alternative approach is able to substitute it. We provide customer support to paying customers on all features that are in the tier of their paid license as well as any lower tiers.\nThis means a feature in Core, should get customer support in all paid tiers.\nFor example, when there is a feature that is available in the lowest paid tier, but only has customer support in higher tiers,\nthe feature should be removed from that lowest paid tier.\nIn accordance with our stewardship policy we can never remove features from Core into paid tiers,\nbut we can build additional features around it which are available to paying customers only."
    },
    {
        "title": "Product Processes",
        "url": "https://handbook.gitlab.com/handbook/product/product-processes/",
        "content": "Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership As a Product Organization, we work to create a flexible yet concise product development framework for developing products that customers love and value. The Product Principles section is where you can learn about our strategy and philosophy regarding product development, here we discuss the processes we use tactically. Introducing changes requires a number of steps, with some overlap, that should be completed in order. GitLab follows a dual-track product development flow spanning product, engineering, UX, and quality. We use GitLab to power product development flow. When changes are released, we follow the release post process to communicate externally about new capabilities. This process should be both up front and on an on-going basis when building features. Documenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. We document our direction in direction pages. Read more about related processes under Planning and Direction. For internal team members please feel free to use the #product channel for any product-related questions but you\u2019ll also find more direct assistance in the various Product Group channels. When communicating change or a request for action to the entire product function, utilize the following levels and corresponding activities. Before shipping a new or updated feature, you are responsible for championing\nit, both internally and externally. When something is released, the\nfollowing teams need to be aware of it as they will all need to do something\nabout it: You can promote your work in several ways: When referencing issues in written communication using just the issue number #123456 and a link is not low-context communication. Instead use the title of the issue and the link or the issue number and description of the problem that issue will solve: In order to support findability and to clearly articulate when we change our minds especially when it comes to product direction, category changes, shifts in investment themes, or priorities for engineering, Product Managers must evangelize these changes in multi-modal communication channels to ensure our users and customers aware. Some internal methods for communication include: External channels for consideration linking direction pages to: As a PM, it is important to remember a bias towards action (and other value actions like sense of urgency, make a proposal, boring solutions, write things down, don\u2019t wait, make two way doors decisions and accepting uncertainty\nwhich enables PMs to drive an async discussion to being action oriented. Every time you write a comment or create an issue ask yourself: Will this allow us to take an action and move us forward? As PMs we need to constantly write about the features and upgrades we ship: in a blog post,\ninternally to promote something, and in emails sent to customers. There are some\nguidelines that one should take into account when writing about features,\nthe most important being a clear communication of the problem we\u2019re solving for users. When writing about a feature, make sure to cover these messaging guidelines\nwhich help produce clear internal and external\nmessaging. Please also keep in mind that we should avoid using acronyms that others my not recognize, such as \u201cMVC\u201d for Minimal Valuable Change. For more guidance you can visit our writing style guidelines. Let\u2019s highlight the messaging guidelines mentioned above with a concrete example, Preventing Secrets in your repositories,\nthat we shipped in 8.12. It\u2019s a bad idea to commit secrets (such as keys and certificates) to your\nrepositories: they\u2019ll be cloned to the machines of anyone that has access to the\nrepository. If just a single one is insecure, the information will be\ncompromised. Unfortunately, it can happen quite easily. You write\ngit commit -am 'quickfix' && git push and suddenly you\u2019ve committed files that\nwere meant to stay local! GitLab now has a new push rule that will prevent commits with secrets from entering the repository. Just check the checkbox in the repository settings, under push rules and\nGitLab will prevent common unsafe files such as .pem and .key from being committed. Here are some additional examples of well written release blog posts for inspiration: In addition to the written medium, video is an important medium that caters to the different goals you are trying to accomplish and learning styles of your audience.\nDepending on the type of video you are recording, there are some guidelines to keep in mind. As our documentation guidelines actively encourage linking video content,\nplease consider following the Documentation Style Guide section on language,\nand working with your technical writing team to include links to your speed runs, walk-throughs and demos at relevant locations in the product documentation. Animated GIFs are an awesome way of showing of features that need a little more than just an image, either for marketing purposes or explaining a feature in more detail. Checkout our guide to Making Gifs! Speed runs are informal videos meant to focus on a single workflow and the experience for performing that workflow. It should not require much planning and is typically short in duration (less than 5 min.). This video type is meant to inform and not necessarily to influence buyers. Examples: Demos are scripted recordings meant to influence buyers. Generally has higher production value and typically involves both a slide-style presentation and/or live screen-sharing. Duration varies depending on the topics being covered. Examples: Product walk-throughs are informal videos meant primarily for an internal audience as a recorded, visual form of product critique. Walk-throughs typically focus on the user experience across categories and workflows within a Product Manager\u2019s product scope. There are particular benefits to walk-throughs which span product hierarchy boundaries (multi-category, multi-stage, multi-section) as they help highlight disjointed experiences across our single-application. Walk-throughs are typically longer in length as they cover more ground and often involve some \u201clive\u201d troubleshooting and are best performed with no planning. Use the Product walk-through issue template when creating a walk-through. Examples: After the feature freeze, it\u2019s expected of each product manager to test their own features and perform quality assurance\nto the best of their ability and follow up where necessary. Product managers can use the staging environment once the release managers have deployed a release candidate (RC) to staging.\nRelease managers should post in the #product channel in Slack that a new release candidate is available. Product managers\ncan also use other environments as needed, such as GitLab provisioned on Kubernetes with GKE. Before a new feature is shipped, the PM should test it out to make sure it\nsolves the original problem effectively. This is not about quality assurance\n(QA), as developers are responsible for the quality of their code. This is about\nfeature assurance (FA). FA is necessary because sometimes there are\nmisunderstandings between the original issue proposal and the final\nimplementation. Sometimes features don\u2019t actually solve the intended problem,\neven though it seemed like it would, and sometimes solutions just don\u2019t feel as\nuseful as intended when actually implemented. If you can test out the feature during development, pulling down branches\nlocally (or with a review app!), that\u2019s great. But sometimes it\u2019s not feasible\nto test a feature until it\u2019s bundled into a release candidate and deployed to\nGitLab.com. If so, make sure to test out features as soon as possible so any new\nissues can be addressed before final release. Also, take the FA cycle into\naccount when scheduling new milestone work. If you are looking to test code that has not been merged to GitLab.com or is not yet\npart of an RC, you can pull the branch down locally and test it using the GitLab\nDevelopment Kit (GDK). Quality Engineering Managers (QEM) are the DRIs for prioritizing bugs. These include security issues which are prioritized in conjunction with the security team. Product Managers must work with their QEM to set Milestones for issues marked with the bug::vulnerability type label to guarantee they are shipped by their due date, as defined in the Security Team process. While Product Managers are the DRIs for milestone planning, they must respect the prioritization order for bugs and maintenance issues as determined by their QEM and EM, respectively. As such they should deeply understand the implications and risks of security-related issues and balance those when prioritizing a milestone work. Addressing a serious security issue by its due date may require temporarily adjusting the desired work type ratio for one or more milestones. Priority labels and Due Date designations for security issues should never be modified by Product Managers as they are directly managed by the Security Team and used to track metrics and progress. When thinking about new features, we must not only think about the functional requirements of a feature (defining what the feature will do), but also to think about foundational requirements (defining how the feature works). At the highest level, foundational requirements define items such as performance, scalability, compatibility, maintainability and usability characteristics of a feature. It is important to have foundational requirements in place up front, as this is much easier than trying to add them later and change expectations, or break existing workflows. Our definition of done contains specific areas of consideration that are required for the acceptance of new contributions. For an in depth review of foundational requirements (often referred to as non-functional requirements), see this resource. To deliver features, we must have both functional and foundational requirements defined. To enhance availability and performance of GitLab, configurable limits should be put in place for features which utilize storage, or scale in a manner which could impact performance. For example, we limit the number of webhooks per project, and we allow admins to set rate limits on raw endpoints. These limits ensure more consistent performance, reduce the likelihood of outages, and offer admins tools to limit abuse or enforce specific standards. While these limits can be configurable, sensible default limits should be defined for our GitLab SaaS and GitLab dedicated offerings. There is a guide about developing application limits in the GitLab Docs. Application limits should be enabled by default. If we are considering enabling or changing a limit, we should do the following (applies to GitLab.com and self-managed): As we continue to scale our product, we need to consider the amount of data being stored for new features. Data storage is not an infinite resource, so we should think carefully about what data needs persistent storage to provide the desired user experience. We also need to consider the cost implications around data storage. Everything we store impacts our bottom line, and we should therefore be careful to ensure we are only storing necessary data for well thought out time-frames. We are working on defining a sustainable data retention policy, and will iterate on this section as more general guidelines are developed. Data storage comes in three main forms for GitLab \u2013 object storage, database storage, and Git repository storage. While we have dedicated teams devoted to ensuring we can scale these storages appropriately, it is in our best interest to only store what is required for a feature to perform as intended. Additionally, there are situations where storage should be subject to data retention policies. When evaluating feature data storage, the following data storage topics should be considered. A good example where we\u2019ve successfully evaluated data storage is our CI/CD Artifacts. We\u2019ve set some sane default values for both maximum artifact size and for default artifacts expiration, while making these both configurable for administrative users. See this page for details on working across stages at GitLab. Stages, groups, and categories serve as a common framework for organizing and communicating the scope of GitLab. If you follow the principles and workflow above, you won\u2019t be writing long, detailed\nspecs for a part of the product for next year. So how should you be\nspending your time? Invest the majority of your time (say 70%) in deeply understanding the problem.\nThen spend 10% of your time writing the spec for the first iteration only and\nhandling comments, and use the remaining 20% to work on promoting it. A problem you understand well should always have a (seemingly) simple or obvious\nsolution. Reduce it to its simplest form (see above) and only ship that. See the Cross-Functional Prioritization page for more information. *indicates forced prioritization items with SLAs/SLOs Any of the items with a \u201c*\u201d are considered issues driven by the attached SLO or SLA and are expected to be delivered within our stated policy. There are two items that fall into Forced Prioritization: Any issues outside of these labels are to be prioritized using cross-functional prioritization. Auto-scheduling issues based on automation or triage policies are not forced prioritization. These issues can be renegotiated for milestone delivery and reassigned by the DRI. While we have moved to the cross-functional prioritization process to empower teams to determine the optimal balance of all types of issues, we will keep Engineering Allocations as a way to allow teams to quickly shift to a critical priority, designating the EM as the DRI to drive the effort. Engineering is the DRI for mid/long term team efficiency, performance, security (incident response and anti-abuse capabilities), availability, and scalability. The expertise to proactively identify and iterate on these is squarely in the Engineering team. Whereas Product can support in performance issues as identified from customers. In some ways these efforts can be viewed as risk-mitigation or revenue protection. They also have the characteristic of being larger than one group at the stage level. Development would like to conduct an experiment to focus on initiatives that should help the organization scale appropriately in the long term.  We are treating these as a percent investment of time associated with a stage or category. The percent of investment time can be viewed as a prioritization budget outside normal Product/Development assignments. Engineering Allocation is also used in short-term situations in conjunction and in support of maintaining acceptable Error Budgets for GitLab.com and our GitLab-hosted first theme. Unless it is listed in this table, the Engineering Allocation for a stage/group is 0% and we are following normal prioritization. Refer to this page for Engineering Allocation charting efforts. Some stage/groups may be allocated at a high percentage or 100%, typically indicating a situation where all available effort is to be focused on Reliability related (top 5 priorities from prioritization table) work. During an Engineering Allocation, the EM is responsible for recognizing the problem, creating a satisfactory goal with clear success criteria, developing a plan, executing on a plan and reporting status.  It is recommended that the EM collaborate with PMs in all phases of this effort as we want PMs to feel ownership for these challenges.  This could include considering adding more/less allocation, setting the goals to be more aspirational, reviewing metrics/results, etc.   We welcome strong partnerships in this area because we are one team even when allocations are need to resolving issues critical to our business. During periods of Engineering Allocation, the PM remains the interface between the group and the fields teams & customers. This is important because: Each allocation has a direction page maintained by the Engineering Manager. The Engineering Manager will provide regular updates to the direction page. Steps to add a direction page are: To see an example for an Engineering Allocation Direction page, see Continuous Integration Scaling. Once the Engineering Allocation is complete, delete the direction page. One of the most frequent questions we get as part of this experiment is \u201cHow does a problem get put on the Engineering Allocation list?\u201d.  The short answer is someone makes a suggestion and we add it.  Much like everyone can contribute, we would like the feedback loop for improvement and long terms goals to be robust.  So everyone should feel the empowerment to suggest an item at any time. To help with getting items that on the list for consideration, we will be performing a survey periodically.  The survey will consist of the following questions: We will keep the list of questions short to solicit the most input.  The survey will go out to members of the Development, Quality, Security.  After we get the results, we will consider items for potential adding as an Engineering Allocation. Once the item\u2019s success criteria are achieved, the Engineering Manager should consult with counterparts to review whether the improvements are sustainable. Where appropriate, we should consider adding monitoring and alerting to any areas of concern that will allow us to make proactive prioritizations in future should the need arise. The Engineering Manager should close all related epics/issues, reset the allocation in the above table to the floor level, and inform the Product Manager when the allocated capacity will be available to return their focus to product prioritizations. When reseting a groups Engineering Allocation in the table above, the goal should be set as floor %, the goal should be empower every SWEs from raising reliability and security issues, percentage of headcount allocated should be 10%, and N/A in place of a link to the Epic. All engineering allocation closures should be reviewed and approved by the VP of Development. A Feature Change Lock (FCL) is a process to improve the reliability and availability of GitLab.com. We will enact an FCL anytime there is an S1 or public-facing (status page) S2 incident on GitLab.com (including the License App, CustomersDot, and Versions) determined to be caused by an engineering department change. The team involved should be determined by the author, their line manager, and that manager\u2019s other direct reports. If the incident meets the above criteria, then the manager of the team is responsible for: If the team believes there does not need to be an FCL, approval must be obtained from either the VP of Infrastructure or VP of Development. Direct reports involved in an active borrow should be included if they were involved in the authorship or review of the change. The purpose is to foster a sense of ownership and accountability amongst our teams, but this should not challenge our no-blame culture. Rough guidance on timeline is provided here to set expectations and urgency for an FCL.  We want to balance moving urgently with doing thoughtful important work to improve reliability.  Note that as times shift we can adjust accordingly.   The DRI of an FCL should pull in the timeline where possible. The following bulleted list provides a suggested timeline starting from incident to completion of the FCL.  \u201cBusiness day x\u201d in this case refers to the x business day after the incident. During the FCL, the team(s) exclusive focus is around reliability work, and any feature type of work in-flight has to be paused or re-assigned. Maintainer duties can still be done during this period and should keep other teams moving forward. Explicitly higher priority work such as security and data loss prevention should continue as well. The team(s) must: After the Incident Review is completed, the team(s) focus is on preventing similar problems from recurring and improving detection. This should include, but is not limited to: Examples of this work include, but are not limited to: Any work for the specific team kicked off during this period must be completed, even if it takes longer than the duration of the FCL. Any work directly related to the incident should be kicked off and completed even if the FCL is over. Work paused due to the FCL should be the priority to resume after the FCL is over. Items created for other teams or on a global level don\u2019t affect the end of the FCL. A stable counterpart from Infrastructure will be available to review and consult on the work plan for Development Department FCLs. Infrastructure FCLs will be evaluated by an Infrastructure Director. Please also note the corresponding Engineering handbook section about the relative importance and prioritization of availability, security, and feature velocity. To ensure we\u2019re providing an appropriate focus on security, data loss, and availability, PMs should consider: To help PMs plan, stage group stable counterparts can participate in prioritization sessions. They serve mainly as an internal sensing mechanism for PMs to make more informed prioritization decisions for different planning horizons. Usually, teams focus on the product releases horizon, but can also focus on the FY themes or strategy horizons. This group exercise also boosts team morale, improves communication and empathy, and broadens individual\u2019s perspectives. Besides, it can be a more informal and joyful way of connecting the team and discussing work. The output of these sessions is a priority matrix that shows the relative priority of a set of items based on two weighted criteria. Generally, the criteria are importance and feasibility, each one visualized as an axis of the matrix. You can change the criteria depending on the planning horizon or goals. To better understand how the sessions work, see an example mural and session recording. Always consider asynchronous sessions first, in an effort to be more inclusive and respectful of others time. That said, if possible, synchronous sessions can be ideal, as they allow limiting the time spent and make great use of the activities\u2019 momentum for a more efficient discussion and voting. Use our Mural template for prioritization sessions, built for product releases but adaptable for other planning horizons or criteria. Adapt this process as needed, and consider changing it to an asynchronous mode of communication. For example, participants can review the items async, add questions as comments in Mural, and vote using dot voting or in voting sessions held on different days for each criterion. RICE is a useful framework for prioritization that can help you stack rank your issues. The RICE framework is a great tool for prioritizing many issues that seem to be of equal value at first glance. In order to drive clarity and alignment in the prioritization of work across the entire DevOps platform, and to help prioritize items that may compete for resources from different teams, we have set a standard for the RICE factors so all prioritization decisions based on RICE are using the same metric. Reach How many customers will benefit in the first quarter after launch? Data sources to estimate this might include qualitative customer interviews, customer requests through Support/CS/Sales, upvotes on issues, surveys, etc. Higher reach means a higher RICE score: Impact How much will this impact customers and GitLab? Impact could take the form of increased revenue, decreased risk, and/or decreased cost (for both customers and GitLab). This makes it possible to compare revenue generating opportunities vs. non-revenue generating opportunities. Potential for future impact should also be taken into account as well as the impact to the GitLab brand (for example unlocking free-to-paid conversion opportunities). Higher impact means a higher RICE score: Confidence How well do we understand the customer problem? How well do we understand the solution and implementation details? Higher confidence means a higher RICE score. Effort How many person months do we estimate this will take to build? Lower effort means a higher RICE score. Calculating RICE Score These four factors can then be used to calculate a RICE score via the formula: (Reach x Impact x Confidence) / Effort = RICE Here is an example RICE calculation you can use to help prioritize work in your area. Feel free to embed this at the Epic level to provide context for why you did or did not prioritize. Other important considerations: We schedule a prioritized issue by assigning it a milestone; for more on this see\nPlanning a Future Release. Conducting a RICE prioritization exercise with your cross-functional counterparts is a powerful way to make the process more inclusive and improve the quality of your rankings. Consider making this an async-first process to accommodate team members across different timezones. For an example of how to do this async-first, see this issue that the Geo team used to collaborate on a RICE prioritization exercise. This blank async RICE template is also available for you to copy for your own async prioritization exercise. For prioritizing most issues, we should utilize the RICE framework noted above, which will capture an aggregate of customer demand. You can also augment RICE scores with the Customer Issues Prioritization Framework Dashboards: Customer Requested Issues (Product) for product managers\nCustomer Requested Issues (CSM) for  Sales, CS and CSM These dashboards provide several inputs for calculating RICE and aggregate all customer requested issues and epics into a single dashboard. These dashboards are not meant as a replacement or sole input for Top ARR Drivers for Sales/CS. Further requirements such as the integration of themes need to be implemented before this framework can be used to fully inform or replace tools such as the Top ARR tracker. In some cases however, we may become aware of a feature which is particularly important to deliver on by a certain date. Examples of this could include an issue necessary to embark on a new GitLab rollout, a feature needed by a partner to launch an integration, or a method to import data from a service which is being discontinued. In these instances, the responsible PM can apply the customer or customer+ label along with a due date and initial milestone. This set of labels can serve to indicate externally that the issue is particularly important, as well as a reminder for internal teams of its importance. It is important to note that the customer and/or customer+ label does not constitute a promise for the issue to be delivered in any given milestone or time frame. GitLab is open-source, encouraging and promoting a large ecosystem of contributors is critical to our success. When making prioritization decisions,\nit\u2019s important to heavily weight activities which will encourage a stronger community of contributors. Some of those activities are: Product managers are not responsible for prioritizing contributions outside of their group. These contributions should be\nreviewed and merged swiftly allowing everyone\nto contribute, including non-product teams at GitLab. The SaaS-First product investment theme will put us in a better position to support our customer base who is expected to accelerate adoption of SaaS products in the coming years. Features will also end up more secure, resilient, performant, and scalable for our self-managed customers if initially built to the expectations of SaaS. Therefore, it is important for PMs to understand and prioritize needs related to the SaaS business. When prioritizing SaaS related issues, we follow the same guidelines above. Within those guidelines there are a few areas that are especially important for PMs to focus on to ensure the success of our SaaS users. Downtime of GitLab.com has a material impact on our customers. From a 2014 report Gartner estimates that downtime costs companies on average \u201c$5,600 per minute, which extrapolates to well over $300K per hour.\u201d Furthermore, SaaS downtime can severely disrupt the productivity of GitLab Inc since we rely heavily on GitLab.com to run our business. Finally, downtime can also lead to customer churn and damage to our reputation. Thus, it is crucial as a company we collectively work towards consistently maintaining our 99.95% SLA on GitLab.com. There are a few things that PMs can do in partnership with their engineering team to help ensure overall Availability for GitLab.com. The infradev process is used to triage issues requiring priority attention in support of SaaS availability and reliability. As part of the broader effort to responsibly manage tech debt across the company, PMs should partner with their EMs to identify and incorporate infradev labeled issues of all severities. Note, issues labeled with a severity must be mitigated and resolved within specific time frames to meet the SLO. As EMs are the DRIs for prioritizing infradev work, PMs should familiarize themselves with the infradev process and Board. Other resources PMs can consult to identify and prioritize Infradev issues include: While not required, PMs are encouraged to listen in on Incident Management calls for incidents related to their product areas to 1) build empathy with the SRE team by gaining insight into how they handle incidents 2) gain a better sense of the impact of the incident to their customer base, and 3) identify improvements to their product areas, whether technical or feature-related, that could have prevented the incident. PMs are not expected to be in the decision-making path on actions taken to resolve the incident. They are there to listen and learn rather than attempting to decide/influence the course of resolution. After incidents involving their product area, PMs are also encouraged to engage in the Incident Review, including attendance at the Sync Incident Review call if their incident is scheduled. PMs can periodically review incidents via the Production Incident Board Enterprise customers interested in adopting SaaS may have common hard requirements to be able to use the product. For example, large enterprises may need certain security related features, such as Audit Logs, available before their security team will agree to the use of GitLab.com. This can also be about more than just features; it may include how and where we apply features so they can administrate their GitLab instance at enterprise-scale. For instance, permission management and shared configurations are best implemented top-down first instead of Project-up to meet the requirements of large organizations who may have 100s or 1000s of projects and only a small handful of people to perform these system-wide administrative tasks. In order to encourage more Enterprise adoption of GitLab.com, prioritize these common \u201chard-blockers\u201d to adoption over \u201cnice to have\u201d features. PMs can use customer interviews to hone in on which issues are hard blockers to adopting SaaS vs more \u201cnice to have\u201d features that can be delivered later. To track hard adoption blockers, use the ~\u201cGitLab.com Enterprise Readiness\u201d label within the GitLab-Org and GitLab-com groups. There are a few special considerations when it comes to delivering features for SaaS. In order to achieve parity between SaaS and Self-managed installations PMs should prioritize efforts to eliminate existing feature gaps that exist across the two installations. Additionally, new features should ship for SaaS and self-managed at the same time. Features should be implemented at the group level first, before being implemented at the instance level, so that they will work across both self-managed and SaaS. Finally, in order for new features to be adequately monitored, they should include appropriate logging and observability, which makes troubleshooting much easier. As a product manager, you will be assigned as the stable counterpart to a single group. At GitLab we abide by\nunique, and extremely beneficial guidelines when interacting with our groups. These include: As an all-remote company, our crispness when it comes to responsibilities throughout the Product Delivery process was born out of necessity, but it pays untold dividends. Some of the benefits include: As described above, prioritization is a multi-faceted problem. In order to\ntranslate the priorities of any given group into action by our engineering\nteams, we need to be able to translate this multi-faceted problem into a flat\nlist of priorities for at least the next release cycle. Product Managers are\nresponsible for taking all these prioritization considerations and creating a\nclear, sequenced list of next priorities. This list should be represented as an issue board\nso that each team has a clear interface for making decisions about work. From\nthis list, Product Designers, Engineering Managers and Product Managers can work together to\ndetermine what items will be selected for work in the immediate future. This does not mean that items will be addressed in strict order - Product Designers, EMs and PMs\nneed to be cognizant of dependencies, available skill sets, and the rock/pebbles/sand\nproblem of time management to make the best decisions about selecting work. Together with your Engineering Manager, you will have an important role in ensuring that the Build Plans defined for issues are created with iteration in mind. Iteration is highly valuable for the following reasons: As a company we emphasize velocity over predictability. As a product manager this means\nyou focus on prioritizing, not scheduling issues. Your engineering stable counterparts are\nresponsible for velocity and delivery. However, there are instances when there is desire for predictability, including: As the DRI for milestone prioritization, it is the Product Manager\u2019s job to prioritize for predictability when it is needed. You should do so by ensuring you prioritize a deliverable, and its dependencies, so that it can reasonably be expected to be delivered by any committed dates. If there is time pressure to hit a date, the PM should also explore de-scoping the issue to meet the deadline, rather than pressuring engineering to move abnormally fast or cut corners. These information sources may be useful to help you prioritize. Individual product managers must consider, and advocate for global optimizations\nwithin the teams they are assigned to. If your assigned team requires expertise\n(remember everyone can\ncontribute)\noutside the team you should make all reasonable efforts to proceed forward\nwithout the hard dependency while advocating within the product management team\nfor increased prioritization of your now soft dependencies. Execution of a Global prioritization can take many forms.  This is worked with both Product and Engineering Leadership engaged.  Either party can activate a proposal in this area.  The options available and when to use them are the following: We have found the following methods less successful in ensuring completion of work that warrants global prioritization: As a PM, you must plan for the near term milestones (more detailed) as well as for the long\nterm strategy (more broad), and everything in between.\nWhile monthly milestone planning is done in GitLab, longer horizon planning (1-3 years) is done in direction pages.\nThis will enable you to efficiently communicate both internally and externally\nhow the team is planning to deliver on the product vision. Documenting a Section, Stage, Group and Category direction is critical to communicating where we are heading and why to all of our stakeholders. This is especially important to the members of your Product Group. Establishing a direction for stakeholders (including team members) to participate in, and contribute to ensures there is a concrete connection to \u201cWhy\u201d we are iterating and how it furthers GitLab\u2019s mission. Here are some of those connections: As a Product Manager you can highlight these connections in: Communicating this connection requires a multi-channel approach. We should strive to share and communication about the connection to our Direction warrants consistent reinforcement. Section leaders are responsible for maintaining Direction pages that lay out the strategy and plan for their respective section and stages. The direction pages should include topics outlined in this template. A category strategy is required which should outline various information about\nthe category including overall strategy, status, what\u2019s next, and the competitive landscape.\nThe category strategy should be documented in a handbook page, which allows for version control\nof the category strategy as well as the ability to embed video assets.\nOne of the most important pieces of information to include in the category strategy is a tangible next step or MVC\nand a clear description of focus and out-of-focus/maintenance areas. Your category strategies should contain short paragraphs with lots of references to specific epics and issues.\nReferencing topics, instead of features is encouraged as it\u2019s more stable over time. We use this category strategy template\nas the outline for creating the handbook pages. If additional headings are needed you are empowered\nto create and populate them in your category strategy. You must keep these categories in sync with categories.yml and for\nnew categories. Category direction should be reviewed on a regular basis (at least monthly) by the responsible product\nmanager. To indicate the last time a category direction page was reviewed, please ensure pages\ninclude Content Last Reviewed: yyyy-mm-dd at the top of the category content. Update this date with every\nreview, even if other content on the direction page has not changed. You should link to your category strategy from your stage strategy page.\nFor categories that have already shipped, and that have a marketing\nproduct page, categories.yml should link to the product page. Inside of the categories.yml file there are dates assigned for either achieved or anticipated maturity achievement. These should be kept inline with communicated dates for achievement and updated as required. If the category has developed a UX Roadmap we recommend the product designer to create a merge request to incorporate UX Roadmap themes into the category direction page roadmap. Assign the MR to the PM for review and merge. In some cases there may be direction pages that span multiple stages or sections. A direction page that summarizes the collective vision as well as all the contributors of that direction is critical to maintain transparency and adequate assignment of ownership. There are several examples of these types of direction pages today: The steps for creating and managing a cross-section or stage direction are: Once the direction page has been added, there needs to be an assigned DRI for maintaining monthly updates for the page. It is the DRIs responsibility to ensure the shared direction page is regularly reviewed and is up to date. This requires cross-section / cross-stage collaboration from the DRI. You should use the ~direction label together with category and section labels to mark epics and issues that fall into the given direction. Product Direction items (i.e., with the label) should be direction-level items that move the strategy forward meaningfully. This is up to the PM to set the bar for, but there should be a clear step forward with real user value. It\u2019s important to note here that your plan is not simply a list of new features and innovation.\nThose are included for sure, but so are issues related to all of your sensing mechanisms.\nA category upgrade from minimal to viable or delivery of a top customer issue (for example) can contribute to your plan just as much as a brilliant new innovative feature can. It\u2019s up to PMs to balance this through a coherent longer-term strategy.\nConversely, in a broad sense anything could move the plan forward in a general way. Finally, issues are the substance of your plan. Ensure you are applying the label to both revelant epics and its issues. As product managers, a core job is to set the correct expectations. We do this typically through discussing our direction and assigning issues to milestones. When you need to communicate specific dates, it\u2019s recommended doing it with limited visibility internally or directly to the customers. When you need to communicate specific dates use calendar year (CY) dates. Fiscal year (FY) does not translate well outside the company. Accordingly, the direction pages are expected to refer to specific issues only for the next 3-4 months. Everything beyond that should discuss the topic, not specific issues. Creating a thoughtful direction for your section, stage, or category is a useful thought exercise that can help focus efforts, aid in prioritization, and get large groups of people on the same page. But beware of simply executing your long term plan. Our industry is incredibly dynamic, and we learn new things every day that can and should cause us to re-think our long term plans. We should ship what brings value to our customers, not what is easy to ship. Stay focused on creating value each and every milestone, and be quick to adjust your longer term direction as you learn more. For each category, we recommend tracking the improvements required to advance to the next level of maturity. You are welcome to track maturity plans either with ~maturity::... labels or maturity issues. Maturity plans are highly encouraged - but not required - for non-marketing categories. GitLab users quarterly OKRs that cascade into Product OKRs and product group OKRs.\nYou should have plans for the next three months in terms of driving specific product metrics through discovery and delivery actions.\nYou should discuss the product metrics with your manager, your design and engineering counterparts and the actions to reach the results with your design and engineering counterparts. You can read more about the OKR process at GitLab at the two links shared above. For each milestone, the planning quads come together to scope and plan work for the group for the upcoming milestone. Planning begins asynchronously with the creation of the planning issue. The planning issue is the SSOT for communication and all resources that are needed to plan a successful milestone. There are many ways to achieve to plan a milestone that should be curated based on the needs of the team. Below are a few examples of planning issues from groups acorss R&D to aid you in creating one that works best for your team. As you adapt your own issue, it is recommended you apply the label planning issue to aid in tracking and to incorporate our Product Principles into the process. Refer to the Product Development Timeline\nfor details on how Product works with UX and Engineering to schedule and work on\nissues in upcoming releases. There are two non-exclusionary ways to plan and communicate work for future releases As a Product Manager you can maintain prioritization of your groups issues using\na fully prioritized issue board where the ordering of the issues reflects their priority. Product Managers can assign milestones to issues to indicate when an issue is likely\nto be scheduled and worked on.\nStill, whether an issue can be delivered within a milestone is the decision of the engineering team.\nAs we consider more distant milestones, the certainty of\nthe scope of their assigned issues and their implementation timelines is increasingly\nvague. In particular, issues may be moved to another project, disassembled, or merged\nwith other issues over time as they bounce between different milestones. The milestone of an issue can be changed at any moment. The current assigned milestone\nreflects the current planning, so if the plan changes, the milestone should be updated\nas soon as possible to reflect the changed plan. We make sure to do this ahead\nof starting work on a release. Capacity is discussed between the PMs and the\nengineering managers. There are helper labels to signals these plans like ~next::1-3 releases and its variants. In addition, we have two special milestones: Backlog and Awaiting further demand.\nProduct Managers assign these issues to milestones that they have reviewed and\nmake sense, but do not fit within the upcoming release milestones due to either\na lack of comparative urgency or because we have not yet seen enough user\ndemand to prioritize the item yet. The best way to demonstrate urgency on\neither of these items is to vote on them and, if possible, add comments\nexplaining your use case and why this is important to you. Recommendation for when to change \u2018Awaiting further demand\u2019:\nAlways focus on the overall value of the feature.\nDo you have a good understanding of the user problem?\nDo you have a good understanding of the impacted user base?\nWas the proposed solution validated?\nIssues with the \u2018Awaiting further demand\u2019 label often mean poorly understood requests that require more information from our users and the market. Often public feedback only comes from a small percentage of people using or evaluating a feature or product.\nYou should always consider reaching out directly to our users to learn more about their use cases. Recommendation when changing a previously planned issue to Backlog: When moving\na previously planned issue to Backlog, especially one planned for within the next release or two,\nconsider the message that this may be sending to parties that were interested in this feature.\nIn some cases, they may have been depending or planning upon the issue to be delivered around\nthe assigned milestone, and with the change to Backlog that is now unlikely to occur. In these instances,\nit is best to concisely explain the rationale behind the change in a comment, so\nthe community can understand and potentially respond with additional justification or\ncontext. It is also encouraged to move the issue to the Backlog as soon as it is clear that it will not be scheduled in the near future. This will help with understanding the change, as it will not seem like a last minute change. Communicating clearly changing priorities might encourage the community to contribute the issue to GitLab. Again, the milestone of an issue can be changed at any moment, including for both\nof these special milestones. From time to time, there may be circumstances that change the ability for a team\nto ship the features/issues they committed to at the beginning of the iteration.\nThese steps also apply when an issue is broken into multiple issues.\nWhen this happens, as a PM you must coordinate with your EM counterpart that\nthe impacted issues and their milestones\nare updated to reflect the new reality (for example, remove deliverable\ntag, update milestone, etc.). Additionally, notify your manager of the shift. Our design system provides the means to work\nautonomously, without always needing UX insight, feedback and design. When problems can\nbe solved using an already documented paradigm, you don\u2019t need to wait for UX\napproval to bring an issue to a reasonable state within a first iteration. If lingering questions remain, subsequent iterations can address any shortcomings\nthe feature might have. Always consider that with a dedicated product designer, it\u2019s much faster and cheaper to iterate on a design than to re-implement it.\nAt the same time, not everything needs a design, and the design system is here to support your engineers and you in those cases. Iteration is a core value of GitLab, and product management has a central role to play in it. Iteration should be apparent as we deliver new features in MVCs, but it has implications for discovery too. As solution validation can move much faster than delivery, we should aim to validate features before building them. At this point, the feature validated is likely way bigger than an MVC if we would build it. We should pay special attention as product managers to still aim at iterative delivery after a bigger feature-set got validated, as delivered features provide the final validation. For example, once a direction is validated, we can start the delivery by documentation. As product managers we should aim to iterate as part of solution validation, and while delivering already validated solutions too. Here are several strategies for breaking features down into tiny changes that can be developed and released iteratively. This process will also help you critically evaluate if every facet of the design is actually necessary. As part of design and discovery, you likely created a minimal user journey that contains sequential steps a user is going to take to \u201cuse\u201d the feature you are building. Each of these should be separated. You can further by asking yourself these questions: View, Create, Update, Remove and Delete are actions users take while interacting with software. These actions naturally provide lines along which you can split functionality into smaller features. By doing this, you prioritize the most important actions first. For example, users will likely need to be able to visually consume information before they can create, update, remove, or delete. Often, the criteria for features are built on is implicit. It can help to use a test-driven development mindset where you write the tests and the outcomes you need from the software before building the software. Writing these tests can uncover the different criteria you need the development team to meet when building the new feature. Once you\u2019ve outlined these tests, you may be able to use them to continue to break down the feature into smaller parts for each test. Here are a few examples: Software often fails and can fail in different ways depending upon how it is architected. It is always best to provide the user with as much information as possible as to why something did not behave as expected. Creating and building different states to handle all possible errors and exceptions can easily be broken down into individual issues. Start by creating a generic error state to display when anything goes wrong, and then add on to handle different cases one by one. Remember to always make error messages useful, and add additional error messages as you identify new error states. Breaking down a design into pieces that can be released iteratively is going to depend on what you are building. Here are a few helpful questions to guide that process: Continuously improving the software we write is important. If we don\u2019t proactively work through technical debt and Deferred UX as we progress, we will end up spending more time and moving slower in the long run. However, it is important to strike the right balance between technical debt, deferred UX, and iteratively developing features. Here are some questions to consider: For large projects, consider separating the announcement from the actual feature launch. By doing so, it can create more freedom to iterate during the customer rollout. For example, you could announce in advance to give customers ample notice, and then roll it out to new customers first, then to existing Free customers, then to existing paid customers. Or you could do the opposite, and roll it out to customers first, before announcing broadly, to ensure the user experience is great before making a marketing splash. When considering dates for a product announcement or launch that may impact our Field team, consider the blockout restrictions recognized by the Field team to ensure there won\u2019t be any major disruption to the business near quarter end. Sometimes the objective is to cut over from one experience, or one system, to another. When doing so, consider having four transition phases rather than a hard cut over. The phases are: 1) Old experience. 2) Run the old experience and new experience side-by-side, with the old experience the default, and the new experience is gradually rolled out to a subset of users. 3) Run them side-by-side, with the new experience the default for the majority, but the old experience is still available as a fallback in case of problems. 4) Deprecate the old experience and offer only the new experience. This strategy enables teams to have more flexibility and demonstrate more iteration in the rollout, with reduced risk. When something is important, it is natural to want to launch it all at once to get to the end game faster. However, big bang style launches tend to need everything perfect before they can happen, which takes longer. With iteration you get feedback about all the things that aren\u2019t a problem and are done enough. It\u2019s better to launch in small increments, with a tight feedback loop, so that the majority of users have a great experience. This tends to speed up the overall timeline, rather than slow it down. A Design Sprint, is a 5-day process used to answer critical business questions through design, prototyping and testing ideas with customers. This method allows us to reduce cycle time when coming up with a solution. As an all-remote company we run Remote Design Sprints (RDS). Check out our guidelines for running an RDS to determine if it\u2019s the right approach for the problem at hand. If you\u2019re faced with a very large or complex problem, and it\u2019s not clear how to most efficiently iterate towards the desired outcome, consider working with your engineers to build an experimental spike solution. This process is also sometimes referred to as a \u201ctechnical evaluation.\u201d When conducting a spike, the goal is write as little code within the shortest possible time frame to provide the level of information necessary the team needs to determine how to best proceed. At the end of the spike, code is usually discarded as the original goal was to learn, not build production-ready solutions. This process is particularly useful for major refactors and creating architecture blueprints. When launching a feature that could be controversial or in which you want to get the audience\u2019s feedback, it is recommended to create a feedback issue. Timeline: Here are some examples of feedback issues: Feedback issues are intended to collect feedback from the wider community and users. In some cases, internal user will be posting on behalf of users and customers. As a result we need to consider the following: Consider the following to improve iteration: Engaging directly with the community of users is an important part of a PM\u2019s job. We\nencourage participation and active response alongside GitLab\u2019s Developer Relations team. A general list of conferences the company is participating in can be found on our\ncorporate marketing project. There are a few notable conferences that we would typically always send PMs to: If you\u2019re interested in attending, check out the issue in the corporate marketing\nsite and volunteer there, or reach out to your manager if you don\u2019t see it listed\nyet. A stakeholder, or stable counterpart, is someone that is outside of your direct team who meets one or more of the following: Examples of stakeholders include Leadership, Sales, Marketing, Customer Support, and Customer Success. You may have stakeholders in any area of GitLab depending on your focus area and the specific issue. Stakeholders are also present outside of GitLab, for example, when a feature is being developed for a specific customer or set of customers. If you\u2019re not sure who the stakeholder is to collaborate with or keep informed, visit product sections, stages, groups, and categories. Stakeholder collaboration and feedback is a critical competitive advantage here\nat GitLab. To ensure this is possible, and facilitate collaboration, you should\nmaintain an updated single source of truth (SSOT) of your stage direction, category\nstrategies, and plan, at all times. This equips anyone who wants to contribute to\nyour stage\u2019s product direction with the latest information in order to effectively\ncollaborate. Some sections and teams use the scheduled Direction Update issue template to\nremind themselves of this task. Actively and regularly reach out to stakeholders. Encourage them to view and collaborate\non these artifacts via these (non-exhaustive) opportunities: Here is some guidance for new PMs to ensure your stage direction, category strategies and plan\nare up-to-date and visible to critical stakeholders: It\u2019s important to get direct feedback from our customers on things we\u2019ve built, are building, or should be building. Some opportunities to do that will arise during sales support meetings. As a PM you should also have dedicatedcustomer discovery meetings or continuous interviews with customers and prospects to better understand their pain points. As a PM you should facilitate opportunities for your engineering group to hear directly from customers too. Try to schedule customer meetings at times that are friendly to your group, invite them, and send them the recording and notes.  If you\u2019re looking for other ways to engage with customers here is a video on finding, preparing for, and navigating Customer Calls as a Product Manager at GitLab. Before the meeting, ensure the Sales lead on the account has provided you with sufficient\nbackground documentation to ensure a customer doesn\u2019t have to repeat information they\u2019ve already\nprovided to GitLab. During the meeting, spend most of your time listening and obtaining information.\nIt\u2019s not your job to sell GitLab, but it should be obvious when it\u2019s the time\nto give more information about our products. For message consistency purposes, utilize the Value Drivers framework when posing questions and soliciting information. After the meeting: Customer discovery meetings aren\u2019t UX Research. Target them to broad-based needs\nand plan tradeoff discussions, not specific feature review. There are\ntwo primary techniques for targeting those topics: Follow the below guidance to prepare and conduct Customer Discovery Meetings: Set up a meeting: During the meeting: After the meeting: You can find some additional guidance on conducting Customer Discovery Meetings from these resources: PMs should also feel free to collect and evaluate customer feedback independently. Looking at existing\nresearch can yield helpful\nthemes as well as potential customers to contact. You can use the following techniques to source customers directly: GitLab Solution Architects know our customers the best, especially from a technical perspective. GitLab Issues customers will often comments on issues, especially when the problem described by the issue\nis a problem they are experiencing firsthand. The best strategy is to capture their feedback directly on the issue,\nhowever, there are times when this is not possible or simply doesn\u2019t happen. You can find alternative contact info by clicking on the user\u2019s handle to see their\nGitLab user page; this page often includes contact information such as Twitter or LinkedIn. Another option is to\ndirectly mention users in issues to engage async. In popular issues you can just leave a general comment that you\u2019re looking for people to interview and many will often volunteer. Customer Issues Prioritization Dashboards: The customer issues prioritization framework aggregates customer data with the issues and epics that they have requested. When viewing the dashboard, double click on the issue or epic of interest within the \u201cpriority score by noteable\u201d table then scroll down to \u201cQA Table - User request weighting by customer\u201d to see the specific customers that are interested in the issue or epic. GitLab.com Broadcast Messages Broadcast Messaging is a great tool for acquiring customer feedback from within the product. You can leverage this workflow to use broadcast messaging. GitLab Sales and Customer Success You can ask for help in Slack customer success channel\nor join the Field Sales Team Call and the All CS Team Call to present a specific request via the Zoom call. Customer Success Managers (CSM) If a customer has a dedicated CSM, they may also have a regular meeting with a CSM. These meetings are a great opportunity to spend 15 minutes getting high-level feedback on an idea or problem. In Salesforce, CSMs are listed in the Customer Success section in the customer\u2019s account information. CSMs are also very familiar with the feature requests submitted by their customers and can help identify customers that may be interested in the feature you are working on. Zendesk is a great tool to find users who are actively making use of a feature and either came across a\nquestion or an issue. Users who\u2019ve had recent challenges using the product really appreciate PMs taking the time to learn from\ntheir experience. This establishes that we are willing to listen to users, even if they are not having a great experience.\nThis is also a great opportunity to discuss the roadmap and provide context so that users understand what we are going to improve. The best way to request a chat is through the support ticket; however, you can also click\non the user that initiated the interaction and their contact information will display on the left hand side panel. If you don\u2019t have a Zendesk account, see how to request a light agent Zendesk account. You can use Zendesk\u2019s trigger feature to receive email alerts when specific keywords relevant\nto your product area are mentioned in a support ticket. Additionally, it is possible to create a simple dashboard that lists all the currently active support tickets that match the trigger. Reach out\nin #support_escalations to receive some help in setting this up. Social Media can also be effective. If your personal account has a reasonable number of connections/followers, you can post your desire to connect with users on a specific question directly. When posting, remember to include the subject you want to discuss as well as how people can reach out. You can also reach out to the #social-media channel to have your tweet retweeted by the @gitlab account.  If you want to reach a wider audience, consider asking a community advocate to re-post using the official GitLab account for the relevant platform.\nYou can reach advocates on the #community-advocates Slack channel. You can also reach out to authors of articles related to tech your team is working on, via various publications such as Medium. A clear and brief email\nvia the publication website or LinkedIn is a good way to engage. You\u2019re able to request a LinkedIn Recruiter license. This Unfiltered video and slide deck provide an overview on how to use LinkedIn Recruiter to source participants for your study. If you\u2019ve tried these tactics and are still having challenges getting the customer feedback you need, connect with your manager for support and\nthen consider leveraging the UX Research team.\nAdditionally, you can connect with Product Operations directly or by attending Product Operations Office Hours for troubleshooting support. Non-users are often more important than GitLab users. They can provide the necessary critical view to come up with\nideas that might turn them into GitLab users in the end. The best non-users are the ones who don\u2019t even plan on switching\nto GitLab. You can reach these people at local meetups, conferences or online groups like, Hacker News. In every such case,\nyou should not try to interview the user on spot, instead organize a separate meeting where nobody will be distracted, and\nboth of you can arrive prepared. One specific, recurring opportunity to get direct feedback from highly engaged customers\nis the GitLab DevOps Customer Advisory Board.\nYou may be asked by the CAB to present your stage at these meetings. Here are\nsome guidelines when doing so: When someone requests a particular feature, it is the duty of the PM to investigate\nand understand the need for this change. This means you focus on what is the problem\nthat the proposed solution tries to solve. Doing this often allows you to find that: Do not take a feature request and just implement it.\nIt is your job to find the underlying use case and address that in an elegant way that is orthogonal to existing functionality. This prevents us from building an overly complex application. Take this into consideration even when getting feedback or requests from colleagues.\nAs a PM you are ultimately responsible for the quality of the solutions you ship,\nmake sure they\u2019re the (first iteration of the) best possible solution. When someone posts information in the #competition channel that warrants\ncreating an issue and/or a change in features.yml, follow this\nprocedure: You may want to interview a specific account because they are exhibiting atypical usage patterns or behaviors. In this case, request Support to contact GitLab.com user(s) on your behalf. If it is the weekend, and the contact request is urgent as a result of an action that might affect a users\u2019 usage of GitLab, page the CMOC One of the primary artifacts of the validation track is the Opportunity Canvas. The Opportunity Canvas introduces a lean product management philosophy to the validation track by quickly iterating on level of confidence, hypotheses, and lessons learned as the document evolves. At completion, it serves as a concise set of knowledge which can be transferred to the relevant issues and epics to aid in understanding user pain, business value, the constraints to a particular problem statement and rationale for prioritization. Just as valuable as a validated Opportunity Canvas is an invalidated one. The tool is also useful for quickly invalidating ideas. A quickly invalidated problem is often more valuable than a slowly validated one. Please note that an opportunity canvas is not required for product functionality or problems that already have well-defined jobs to be done (JTBD). For situations where we already have a strong understanding of the problem and its solution, it is appropriate to skip the opportunity canvas and proceed directly to solution validation. It might be worth using the opportunity canvas template for existing features in the product to test assumptions and current thinking, although not required. Reviewing opportunity canvases with leadership provides you with an opportunity to get early feedback and alignment on your ideas. To schedule a review: References: Opportunity Canvases are a great assessment for ill-defined or poorly understood problems our customers are experiencing that may result in net new features. As noted previously, opportunity canvases are helpful for existing features, except they are tailored for new feature development which is where the Product-Opportunity-Opportunity-Canvas-Lite issue template delivers. This template offers a lightweight approach to quickly identify the customer problem, business case, and feature plan in a convenient issue. The steps to use the template are outlined in the Instructions section and for clarity, one would create this issue template for an existing feature they are interested in expanding. For example, this template would be great to use if you are evaluating the opportunity to add a third or fourth iteration to an MVC. This issue should leverage already available resources and be used to collate details to then surface to leadership for review. Once you fill out the template, you will assign to the parties identified in the issue and you can always post in the #product channel for visibility. Part of being a product manager at GitLab is maintaining engagement with\nanalysts, culminating in various analyst reports that are applicable to your\nstage. In order to ensure that this is successful and our products are rated\ncorrectly in the analyst scorecards, we follow a few guidelines: It\u2019s important to be closely connected with your product marketing partner,\nsince they own the overall engagement. That said, product has a key role to play\nand should be in the driver\u2019s seat for putting your stage\u2019s best foot forward in\nthe responses/discussions. Product managers should take advantage of the internal customers that their\nstage may have, and use them to better understand what they are really using,\nwhat they need and what they think is important to have in order to replace\nother products and use GitLab for all their flows. We want to meet with our internal customers on a regular basis, setting up\nrecurring calls (e.g., every two weeks) and to invite them to share their\nfeedback. This is a mutual collaboration, so we also want to keep them up to date with the\nnew features that we release, and help them to adopt all our own features. Each quarter, we reach out to User Satisfaction (USAT) survey responders who opted-in to speak with us. This is a fantastic opportunity to build bridges with end users and for Product Managers and Product Designers to get direct feedback for their specific product area. If a user has taken the time to share a verbatim with us and offered to have a conversation, they deserve to be followed up with - especially if that user is dissatisfied with GitLab. When we speak to users directly during this workflow, we must be mindful of Product Legal guidance and the SAFE framework, just as we would be with any other documentation or communication within Product. Note: GitLab Customer Success Managers can also follow the process above, so please be mindful to coordinate with them if they reach out or if they\u2019ve already signed up to speak with a user. Users should never be contacted by more than one GitLab team member. Users should never be contacted more than twice if they do not respond to an outreach email. Example email copy: Hello,\nMy name is X and I\u2019m the Product Manager/Designer for X at GitLab. Thank you for giving us the opportunity to follow up on your response to our recent survey. I would be very interested in speaking further about some of the points you raised in your survey response. Would you be willing to do a 30 minute Zoom call to give us some more detailed feedback on your experience using GitLab? You\u2019d be able to schedule the call at a time convenient to you. Schedule a time for the call using this link:\nhttps://calendly.com/yourname/30min Thank you for your feedback and let me know if you have any questions. Best,\nYour name Copy for three extra questions in Calendly invite: To make sure we correctly represent what you say in any followup issues or discussions, we would like to record this conversation. Please indicate if you give permission to record this conversation. Yes, you may record our conversation. No, you MAY NOT record our conversation. At GitLab, we value transparency. We would love to share the recording of conversation publicly on GitLab. Please indicate whether you give your permission for the recording to be shared on GitLab. Yes, you may share the recording publicly on GitLab. No, you MAY NOT share the recording publicly on GitLab. I agree that by participating in this, and any future, research activities with GitLab, GitLab B.V. will retain all intellectual property rights in any suggestions, ideas, enhancement requests, feedback, or other recommendations I provide which are hereby assigned to GitLab B.V. Yes No Note: It\u2019s important to tag your USAT related issues to help tracking/reporting such as the improvement slides in Product Key Reviews. Every Product Manager is responsible for the user experience and cost profile of their product area regardless of how the application is hosted (self-managed or gitlab.com). If a feature is unsustainable from a cost standpoint, that can erode the margins of our SaaS business while driving up the total cost of ownership for self-managed customers. If a feature is slow, it can impact the satisfaction of our users and potentially others on the platform. There are a few questions a Product Manager should ask when thinking about their features: These items do not all need to be implemented in an MVC, though potential costs and application limits should be considered for deployment on GitLab.com. Product Managers should also regularly assess the performance and cost of features and experiences that they are incrementally improving. While the MVC of the feature may be efficient, a few iterations may increase the cost profile. There are a few different tools PM\u2019s can utilize to understand the operational costs of their features. Some of these are maintained by Infrastructure, based on the operational data of GitLab.com. Others tools, like service ping, can be utilized to better understand the costs of our self-managed users. Ultimately, each product group is responsible for ensuring they have the data needed to understand and optimize costs. When performing the role of Life Support PM only the following are expected: Some discouraged responsibilities: As a Product Manager you may need to make a decision on whether GitLab should engineer a solution to a particular problem, or use off the shelf software to address the need. First, consider whether our users share a similar need and if it\u2019s part of GitLab\u2019s scope. If so, strongly consider building as a feature in GitLab: If the need is specific to GitLab, and will not be built into the product, consider a few guidelines: If after evaluating these considerations buying a commercial solution is the best path forward: When considering open source software in build vs. \u201cbuy\u201d decisions we utilize the following general criteria to decide whether to integrate a piece of software: Please see Analytics Instrumentation Guide Goal:\nIncrease product instrumentation across our offerings to deliver greater product insights. There is a need to retroactively evaluate what features have been instrumented and need instrumentation from past feature launches. Post launch implementation will allow us to gather insights and allow better visibility into feature usage + adoption that may not currently be captured. Tasks: In order to better understand the perceived performance of GitLab, there is a synthetic page load performance testing framework available based on sitespeed.io. A Grafana dashboard is available for each stage, tracking the Largest Contentful Paint and first/last visual change times. These metrics together provide high-level insight into the experience our users have when interacting with these pages. The Grafana dashboards are managed using grafonnet, making it easy to add additional pages and charts. Testing a new set of pages requires just 2 steps: Assign both MR\u2019s to a maintainer. After they are merged, the stage\u2019s Grafana dashboard will be automatically updated. A video walkthrough is available as well. At GitLab, we collect product usage data for the purpose of helping us build a better product. Data helps GitLab understand which parts of the product need improvement and which features we should build next. Product usage data also helps our team better understand the reasons why people use GitLab. With this knowledge we are able to make better product decisions. There are several stages and teams involved to go from collecting data to making it useful for our internal teams and customers. The Cross-Functional Prioritization framework exists to give everyone a voice within the product development quad (PM, Development, Quality, and UX). By doing this, we are able to achieve and maintain an optimal balance of new features, security fixes, availability work, performance improvements, bug fixes, technical debt, etc. while providing transparency into prioritization and work status to internal and external stakeholders so they can advocate for their work items. Through this framework, team members will be able to drive conversations about what\u2019s best for their quad and ensure there is alignment within each milestone. The Customer Prioritization Framework was developed by the Issue Prioritization Framework Working Group as a way to improve the efficiency of the feedback loops among Sales, Customer Success, and Product. It provides a comprehensive system to categorize and measure customer, and prospective customer, demand for capabilities within GitLab. This page covers how the first iteration of the model works and how to interact with and interpret, the not public, internal-only dashboards that it powers. The best way to understand how GitLab works is to use it for as much of your job as possible.\nAvoid dogfooding antipatterns\nand try to find ways to leverage GitLab (instead of an external tool) whenever\npossible. For example: try to use Issues instead of documents or spreadsheets\nand try to capture conversation in comments instead of Slack threads. As a PM, but also as any GitLab team member, you should actively use every feature,\nor at minimum, all the features for which you are responsible. That includes\nfeatures that are not directly in GitLab\u2019s UI but require server configuration. This page provides an overview of the joint R&D OKR workflow. All departments within R&D, which includes the Product and Engineering Divisions, collaborate by following this guidance. For clarifications on the OKR process, team members can post in Slack #product or #engineering-fyi. The OKR process is designed to tie in to the overall OKR process the company uses. That process is driven largely off of the date of the Key Review meetings, so the Product process keys off of that date as well. Dates will not necessarily align with the start of a fiscal quarter as a result. Animated GIFs are an awesome way of showing of features that need a little more than just an image, either for marketing purposes or explaining a feature in more detail. This page holds all information on the entire process of creating a GIF. The GIF format is popular because it works everywhere and has a no-fuss UI. \u2013 Kornel GIFs are used everywhere for a reason, but as you can read in the referenced article above, they are also expensive. Expensive in that a GIF can quickly become a big file, which takes longer to load. To create great looking GIFs that walk the line between file size and quality, some steps need be considered. This section of the handbook is a collection of product management processes that can leveraged in your practice as product management. Some of these are best practices and suggestions that are not required in your day to as product manager, while others are highly recommended workflows that are tried and true paths leading to successful results. These are sourced by our Product Management Department and regularly reviewed by our Director+ Product Management leaders. This guide for GitLab Product Managers clarifies and expands on the Regulation FD Training. To make any edits to this page, please create a merge request and add a  description of what you want to change and why. Add labels product operations prodops:release and product handbook. Add Product Operations DRI/Maintainer @fseifoddini as Reviewer for collaboration and approval. If Product Operations is unavailable and the topic is time-sensitive, please add Maintainer @gweaver for collaboration and approval. When planning, Product Managers plan to GitLab milestones. Here is the process for creating and maintaining them. One quarter ahead, the Engineering team, in partnership with the Product team, will create all of the necessary milestones for the next quarter. Our standard practice is to have the Major release every May, resulting in: Milestone start and end dates are defined as follows: This section of the handbook is a collection of processes that a required to be followed under certain conditions. For example, if a change is being made or if a request is submitted to leadership for approval. In the spirit of \u201cevery can co-create\u201d, these procedures can be contributed by any one in the Product Division (or even GitLab!). The custodian of the procedures are Program Management. If you are interested in contributing to this page, please open a merge request and assign to Natalie Pinto, GitLab Handle @natalie.pinto. Our ability to iterate quickly is a measure of our efficiency, but our effectiveness\nis just as critical. As a product manager you are critical to us not just working correctly,\nbut working on the correct things. You do that by prioritizing appropriately. Your\nprioritization decisions will be enhanced if you maintain a sufficient understanding of the\ncontext in which you make them. There is no limit to the amount of inputs you can utilize for making prioritization decisions.\nWe\u2019ve organized these mechanisms into three lists. One for those that primarily sense feedback from users,\none that primarily senses feedback from buyers and another that senses internally\ngenerated feedback which could represent buyers or users. For new PMs consider\nthese lists as guidance for places to ensure you are plugged in to maintain\nsufficient context. On this page Free is targeted at individual contributor developers. It is a complete DevOps solution and contains capabilities from all ten GitLab stages. Premium is targeted at Director level buyers and is for teams. The pricing themes for Premium are Faster code reviews, Advanced CI/CD, Enterprise agile planning, Release controls and Self managed reliability. Premium helps teams iterate faster and innovate together. Ultimate is targeted at Executive level buyers and is for organizations. The pricing themes for Ultimate are Advanced security testing, Security risk mitigation, Compliance, Portfolio management, and Value stream management. Ultimate helps organizations deliver better software faster with enterprise ready planning, security and compliance. We use GitLab to document product strategy and manage our backlog. A couple of concepts that are key to this process are: We use issues to define narrowly scoped items of work to be done. Issues can focus on a variety of different topics: UX problems, implementation requirements, tech debt, bugs, etc. A good guideline for experience-related issues is that they should address no more than one user story. If an issue includes multiple user stories, then it is likely an epic."
    },
    {
        "title": "Product sections, stages, groups, and categories",
        "url": "https://handbook.gitlab.com/handbook/product/categories/",
        "content": "Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership We want intuitive interfaces both within the company and with the wider\ncommunity. This makes it more efficient for everyone to contribute or to get\na question answered. Therefore, the following interfaces are based on the\nproduct categories defined on this page: The categories form a hierarchy: Notes: Anytime one hierarchy level\u2019s scope is the same as the one above or below it, they can share the same name. For groups that have two or more categories, but not all categories in a stage, the group name must be a unique word or a summation of the categories they cover. If you want to refer to a group in context of their stage you can write that as \u201cStage:Group\u201d. This can be useful in email signatures, job titles, and other communications. E.g. \u201cMonitor:Health\u201d rather than \u201cMonitor Health\u201d or \u201cMonitor, Health.\u201d When naming a new stage, group, or category, you should search the handbook and main marketing website to look for other naming conflicts which could confuse customers or employees. Uniqueness is preferred if possible to help drive clarity and reduce confusion. See additional product feature naming guidelines as well. Every category listed on this page must have a link to a direction page. Categories may also have documentation and marketing page links. When linking to a category using the category name as the anchor text (e.g. from the chart on the homepage) you should use the URLs in the following hierarchy: Marketing product page > docs page > direction page E.g Link the marketing page. If there\u2019s no marketing page, link to the docs. If there\u2019s no docs, link to the direction page. Solutions can consist of multiple categories and are typically used to align to a customer challenge (e.g. the need to reduce security and compliance risk) or to market segments defined by analysts such as Software Composition Analysis (SCA). Solutions are also often used to align to challenges unique to an industry vertical (e.g. financial services), or to a sales segment (e.g. SMB vs Enterprise). Solutions typically represent a customer challenge, and we define how GitLab capabilities come together to meet that challenge, with business benefits of using our solution. Market segments defined by analysts don\u2019t always align to GitLab stages and categories and often include multiple categories. Two most frequently encountered are: We are intentional in not defining SCA as containing SAST and Code Quality despite some analysts using the term to also include those categories. Capabilities can refer to stages, categories, or features, but not solutions. Adding more layers to the hierarchy would give it more fidelity but would hurt\nusability in the following ways: We use this hierarchy to express our organizational structure within the Product and Engineering organizations.\nDoing so serves the goals of: As a result, it is considered an anti-pattern to how we\u2019ve organized for categories to move between groups out\nof concern for available capacity. When designing the hierarchy, the number of sections should be kept small\nand only grow as the company needs to re-organize for span-of-control\nreasons. i.e. each section corresponds to a Director of Engineering and a\nDirector of Product, so it\u2019s an expensive add. For stages, the DevOps loop\nstages should not be changed at all, as they\u2019re determined from an external\nsource. At some point we may\nchange to a different established bucketing, or create our own, but that will\ninvolve a serious cross-functional conversation. While the additional value\nstages are our own construct, the loop and value stages combined are the primary\nstages we talk about in our marketing, sales, etc. and they shouldn\u2019t be changed\nlightly. The other stages have more flexibility as they\u2019re not currently\nmarketed in any way, however we should still strive to keep them as minimal as\npossible. Proliferation of a large number of stages makes the product surface\narea harder to reason about and communicate if/when we decide to market that\nsurface area. As such, they\u2019re tied 1:1 with sections so they\u2019re the\nminimal number of stages that fit within our organizational structure. e.g.\nGrowth was a single group under Enablement until we decided to add a Director\nlayer for Growth; then it was promoted to a section with specialized\ngroups under it. The various buckets under each of the non-DevOps stages are\ncaptured as different groups. Groups are also a non-marketing construct, so we\nexpand the number of groups as needed for organizational purposes. Each group\nusually corresponds to a backend engineering manager and a product manager, so\nit\u2019s also an expensive add and we don\u2019t create groups just for a cleaner\nhierarchy; it has to be justified from a span-of-control\nperspective or limits to what one product manager can handle. Categories can have varying level of investment and development work. There are four main investment statuses: Typically, product direction pages will transparently state the investment status of the category for the fiscal year based on annual product themes and investment levels. The impact of changes to sections, stages and groups is felt across the company. All new category creation needs to be specifically approved via our Opportunity Canvas review process. This is to avoid scope creep and breadth at the expense of depth and user experience. Merge requests with\nchanges to sections, stages and groups and significant changes to categories\nneed to be created, approved, and/or merged by each of the below: _Note: Chief Product Officer approval should be requested once all other approvals have been completed. To request approval, post the MR link in the #chief-product-officer channel tagging both the Chief Product Offcer and cc\u2019ing the EBA to the Chief Product Officer. The following people need to be on the merge request so they stay informed: After approval and prior to merging, ping the Engineering Manager for Quality Engineering  in the MR, if there are changes that: This is to ensure that GitLab Bot auto-labeling can be updated prior to the change, which can be disruptive if missed. Upon approval, tag the group Technical Writer in the merge request to ensure documentation metadata is updated after the category change is merged. Ensure that relevant slack channels are updated following our slack channel naming convention, open an access request to have slack channel names updated as they can no longer be updated by creators. Because it helps to be specific about what is a significant change and what should trigger the above\napproval process, below are non-exhaustive lists of examples that would and would not, respectively, require full approvals as outlined above. Changes that require the above approvers include: Changes that require approval only from the relevant Product Leadership Team member include: Changes that require approval only from the relevant Product Director include: When changing the name of a group, create a merge request to change the group name in data/stages.yml\nusing the Group-Stage-Category-Change template,\nand make sure to complete all the steps in the template. When changing an existing category name, there are some considerations to the order of events: We primarily use the Category Maturity Scorecard process to determine category maturity. Typically, category maturity moves up from planned to minimal to viable to complete to lovable. However, maturity can also be downgraded. For example, in cases where we discover a JTBD is not met (see example), or when we change the definition of maturity, we may choose to move category maturity down. When downgrading product maturity, we adjust our customer\u2019s current expectations about our product. This is particularly impactful to our go-to-market team members in customer success and product marketing. We need to do the following to enable alignment between all affected and interested parties:  Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. Click on a group name to see more details. We have boundless ambition, and we expect GitLab to continue to add new stages to the DevOps lifecycle. Below is a list of future stages we are considering: Stages are different from the application types you can service with GitLab. Not all categories are at the same level of maturity. Some are just minimal and\nsome are lovable. See the category maturity page to see where each\ncategory stands. This list of other functionality so you can easily find the team that owns it.\nMaybe we should make our features easier to search to replace the section below. Plan stage Project Management group Knowlege group Create stage Code Review group Remote Development group CI Group Pipeline Authoring Group Monitor stage Manage stage Engineering Productivity Test Platform Internal Customers: Gitaly, Core Platform section, SaaS Platforms section, Infrastructure Department, Support Department, Customer Success Analytics Product Analytics group Some product areas are have a broad impact across multiple stages. Examples of this include, among others: While the mental models for these areas are maintained by specific stage groups, everyone is encouraged to contribute within the guidelines that those teams establish. For example, anyone can contribute a new setting following the established guidelines for Settings. When a contribution is submitted that does not conform to those guidelines, we merge it and \u201cfix forward\u201d to encourage innovation. If you encounter an issue falling into a facilitated area: There are certain product capabilities that are foundational in nature and affect or refer to horizontal components of the architecture that have an impact across functional groups and stages. These capabilities may refer to \u201cFacilitated Functionality\u201d (see section above) where the mental models are owned by a particular group, while anyone can contribute. However, there may be others that will not have a clear owner because they don\u2019t fall squarely into any particular group\u2019s purview of product categories. Prime examples of this are issues related to the improvement or evolution of foundational components, frameworks and libraries that are used by several or all groups across the organization. Another example could be components created by special task groups in the past that have been since dissolved and that have not required continued development to justify the funding of a dedicated permanent group to maintain them. Whatever the source of the functionality, rather than thinking of these components as \u201cnot having an owner\u201d, it is important to think of them as being owned by everyone through the lens of shared responsibility. \u201cShared responsibility\u201d means that every group should be committed and responsible to contribute to their continued maintenance, improvement and innovation. Contribution, in this context, may manifest in different ways: It does not mean, however, that a single group should necessarily be solely responsible for all of these activities. Multiple groups could end up collaborating in execution. This coordination however requires a careful triage of the shared responsibility issues in the issue tracker where a single DRI coordinates these activities. For more information please review this section in the quality department handbook to learn more about a decentralized approach to triaging these types of issues. This page is meant to showcase the features by tier across GitLab\u2019s Product Hierarchy. Incidents Principles - Processes - Categories - GitLab the Product - Being a PM - Leadership We believe that a single application for the DevOps lifecycle\nbased on convention over configuration offers a superior user experience. The\nadvantage can be quoted from the Wikipedia page for convention over\nconfiguration:\n\u201cdecrease the number of decisions that developers need to make, gaining\nsimplicity, and not necessarily losing flexibility\u201d. In GitLab you only have to\nspecify unconventional aspects of your workflow. The happy path is\nfrictionless from planning to monitoring."
    },
    {
        "title": "Product Development Flow",
        "url": "https://handbook.gitlab.com/handbook/product-development-flow/",
        "content": "Please follow this guidance on how to contribute to this page.  GitLab\u2019s product mission is to consistently create products and experiences that users love and\nvalue. To deliver on this mission, it\u2019s important to have a clearly defined and repeatable flow for\nturning an idea into something that offers customer value. Note that it\u2019s also important to allow\nopen source contributions at any point in the process from the wider GitLab community - these won\u2019t\nnecessarily follow this process. This page is an evolving description of how we expect our cross-functional development teams to work, and reflects the current workflow being leveraged. All required actions or outcomes in this page are denoted as follows:  Denotes a required aspect of the product development flow. Feature development is expected to pass through all phases to achieve specified outcomes, while the rest of the workflow should be considered as a set of best practices, tools, and recommendations. We realize there are unique cases in which certain product improvements may not need to flow through all the phases. We trust product managers to use their best judgement with alignment from their design and engineering team. The goal of this page is to support teams in their workflows by highlighting the necessary outcomes to target in each phase as well as sharing strategies/tactics, activities, teams can employ to achieve these  outcomes. Additionally, this page aims to clarify the minimal set of required actions, such as labels, needed across all phases to keep the product system efficient in terms of tracking, searching and cross-functional collaboration. To maintain clarity and avoid confusion, we do not list optional actions on this page but teams may choose to employ additional actions, such as labels for planning, even if they are not mentioned on this page. As teams leverage the product development flow, they may find that certain strategies/tactics are serving their teams well toward success. Therefore, we welcome MRs to this page, so we can create a robust playbook of options to build valuable features for customers. All team members are encouraged to follow the change process for this page to share their best practices. We take both a qualitative and quantitative approach to measuring success of the Product Development Flow. Details on the measures and results are available on this handbook page. No. Although the phases described on this page appear to be independent and linear, they are not. They\u2019re presented in this way for simplicity and ease of navigation. At GitLab, we do not promote working in a linear manner. Phases in the product development lifecycle may overlap or occur in parallel. We aim to achieve key outcomes in each phase in order to de-risk subsequent phases. However, the product development flow doesn\u2019t dictate the order we go through the phases, or the time spent in each. When teams have a high confidence in their direction, they should feel empowered to skip or shorten phases that won\u2019t contribute to improved confidence. Examples: An engineering team conducts a technical review while other team members are performing Validation Phase activities. The team can then move to the Build phase rapidly with high confidence that their improvement is good for customers and technically feasible. A bug is reported by a GitLab customer. The Product Manager tests the bug and confirms its existence (Problem Validation). The team is extremely confident in the solution, so Design and Solution Validation are not needed. The bug is moved immediately to Build.  We use workflow labels to efficiently communicate an issue\u2019s state. Using these labels enables collaboration across teams and communicates an issue\u2019s current state.  Issue descriptions shall always be maintained as the single source of truth. It\u2019s not efficient for contributors to need to read every comment in an issue to understand the current state. For situations when the customer problem isn\u2019t well understood, Product Managers (PMs) and the User Experience Department (UXers) should work together to validate new opportunities before moving to the Build track. The Validation track is an independent track from the always moving Build track. PMs and UXers should work together to get at least two months ahead, so that the Build track always has well-validated product opportunities ready to start. Milestone work should be prioritized with the understanding that some milestones may include more validation efforts than others. Validation cycles may not be necessary for things like bug fixes, well understood iterative improvements, minor design fixes, and technical debt. The types of activities and depth of research required in the validation track will depend on how well we understand the customer problem and solution. When: When our confidence about the proposed problem or solution isn\u2019t high. For example, if we aren\u2019t reasonably sure that the problem is important to a significant number of users, or that the solution is easy to understand and use. Who: Product Manager, Product Designer, UX Researcher, Product Design Manager, Engineering Manager What: \u2705 Understand the user problem we are trying to solve. \u2705 Identify business goals and key metrics to determine success. \u2705 Generate hypotheses and research/experiment/user-test. \u2705 Define MVC and potential future iterations. \u2705 Minimize risks to value, usability, feasibility, and business viability with qualitative and quantitative analysis. Outcome: We have confidence that a proposed solution will positively impact one or more Product KPIs. There may be reason for exceptions, so the team would need to be clear in that case, and be able to justify that it\u2019s still important without mapping back to our KPIs. If we don\u2019t have confidence in the MVC or what success looks like, we should continue validation cycles before we move to the Build track.  Label: workflow::validation backlog The growth of a world class product is built from a well maintained backlog. Product Managers are responsible for refining a group\u2019s backlog to ensure validation opportunities are scoped and prioritized in line with category direction, stage, and/or section level strategy. The backlog is also the single source of truth for stakeholders to understand and engage with your group. An issue position in the backlog, along with the description, discussion, and metadata on those issues are key pieces of data necessary to keep stakeholders up to date.  Label: workflow::problem validation To ensure the right solutions are delivered, the team must start their work with a validated problem. This can take many forms and be achieved through Product Manager, Product Designer and UX Researcher collaboration. If the problem is documented and well-understood, it may be possible to quickly move through this phase by documenting the known data about the user problem. A documented problem can be categorized as a pre-existing experience from feedback directly from users or an issue that has user engagement confirming that the problem is experienced by multiple users. A well-understood problem can be one that has a series of documented qualitative research from customer interviews led by the Product Manager, triangulating different sensing mechanisms confirming the problem, or using known data. Some examples of known data include Customer Request Issues or pre-existing Actionable Insights from prior research. To document that a problem is well-understood, link the known data and any customer calls to the relevant issues and epics. If the problem is nuanced or not yet well understood, then it will likely take longer to validate with users properly. This phase\u2019s primary outcome is a clear understanding of the problem, along with a simple and clear way to communicate the problem to various stakeholders. Although optional, it is recommended to use an Opportunity Canvas as a tool that helps individuals better understand a problem, and communicate it to various stakeholders. An Opportunity Canvas can also be used to recommend creation of a new category including asking for new resourcing.  Labels: workflow::design After understanding and validating the problem, we can begin or continue to ideate potential solutions through a diverge/converge process. However, if the outcome from the problem validation phase confidently suggests an incremental modification to the existing solution, the aforementioned diverge/converge process could be skipped. The Product Designer leads the team (Product Manager, Engineering team, UX Researcher, Software Engineers in Test, and Technical Writers, as needed, depending on the item) in ideating potential solutions and exploring different approaches (diverge) before converging on a single solution. Product Managers and the Engineering team evaluate solutions by determining if they meet customer and business goals, are technically feasible, and align with legal compliance considerations. The team is encouraged to engage with stakeholders to determine potential flaws, missed use cases, potential security risks, and if the solution has the intended customer impact. During this phase the  Product Manager and Engineering Manager are both responsible for reviewing the Legal Risk Checklist (accessible to team members only) and determining whether any sections need to be completed. After the team converges on the proposed solution or identifies a small set of options to validate, the issue moves into the Solution Validation phase. To start the Design phase, the Product Designer or Product Manager applies the workflow::design label to an existing issue or, if needed, creates a new issue with this label.  Label: workflow::solution validation After identifying one or more potential solutions that meet business requirements and are technically feasible, the Product Manager and Product Designer must ensure that we have confidence that the proposed solution will meet the user\u2019s needs and expectations. This confidence can be obtained from work performed during the design phase and supplemented with additional research (including user interviews, usability testing, or solution validation). If necessary, this phase will launch a Solution Validation issue within the GitLab UX Research project which will walk the team through research to validate their proposed solution(s). In addition, any non-functional requirements for the feature need to be considered and documented. These include such things as evaluating whether or not application limits need to be introduced, or any considerations around data storage should be evaluated. Defining these non-functional requirements up front ensures we are considering scalability and the long-term success of the feature. Sensible default values should be identified at this stage which align with the long-term vision for the feature. To start the Solution Validation phase, the Product Designer or Product Manager applies the workflow::solution validation label to an existing issue. The build track is where we plan, develop, and deliver value to our users by building MVCs, fixing defects, patching security vulnerabilities, enhancing user experience, and improving performance. This track is also a time when we get insight into whether we are creating the right thing for our users. DRIs across engineering disciplines involving Design, Backend, Frontend and Quality work closely together to implement MVCs while in close collaboration with the Product Manager. Decisions are made quickly if challenges arise. We instrument usage and track product performance, so after MVCs are delivered to customers, feedback is captured quickly for learnings to refine the next iteration. For an example of how to leverage GitLab\u2019s various features to create a focused and collaborative board to flow through the Build track, check out this video. When: As we build MVCs according to our product development timeline Who: Product Manager, Product Designer, Development team, Software Engineer in Test What: \u2705 Release to a subset or full set of customers as appropriate. \u2705 Assess UX, functional, technical performance, and customer impact. \u2705 Collect data to measure MVC against success metrics to inform the next iteration. \u2705 Iterate until success metrics are achieved and the product experience is optimal. Outcome: Deliver performant MVCs that improve one or more of our Product KPIs and/or Engineering KPIs. If it fails to do so, honor our Efficiency value (that includes a low level of shame), abandon it, and restart the validation cycle to identify the right solution. This phase prepares features so they are ready to be built by engineering. Bugs, technical debt, and other similar changes that are not features may enter the process in this phase (or may benefit from entering in earlier phases based on the cost of doing the work requiring the full problem to be validated to ensure it makes sense to do the work). Following Validation Phase 4 the feature should already be broken down into the quickest change possible to improve the user\u2019s outcome and be ready for a more detailed review by engineering. During this phase, Product Managers will surface issues they intend to prioritize for a milestone by applying the workflow::planning breakdown label. At this point, Engineering Managers will assign an engineer to further break down and apply weights to that work. This process is a collaboration between the DRI and Collaborators. Tradeoff decisions can be made and feature issues evolve from validation solutions to clear MVCs that can be delivered in a single milestone. Be sure to document all decisions on issues. During this phase, the Product Manager and the Engineering Manager must revisit the Legal Risk Checklist (accessible to team members only) to make sure none of their previous determinations during Validation phase 3: Design need revision. By reviewing and weighing work in the beginning of the Build Track, Product Managers are able to make better prioritization tradeoffs and engineering teams can ensure they\u2019ve scoped the right amount of work for the milestone. If an issue enters the workflow::planning breakdown state it doesn\u2019t necessarily mean it will be prioritized in the next milestone, a Product Manager may make a tradeoff decision depending on capacity, and urgency. Once work has passed the workflow::planning breakdown step, the workflow::ready for development, type:: labels along with an upcoming milestone are applied to the issue. If an issue has been broken down, but not yet ready to pull into a milestone you may optionally apply the workflow::scheduling label; however, in this state any issue that has the workflow::ready for development label without a milestone has an implied status of \u201cwaiting to be scheduled\u201d. Engineering Managers and/or Product Design Managers will apply Deliverable label to issues with a milestone and marked workflow::ready for development signaling acceptance of the issue for that milestone. This process occurs at the beginning of milestone planning. To ensure that a Software Engineer in Test (SET) will have ample time to contribute to new features, Quad Planning is triggered automatically when an issue is in workflow::ready for development and a milestone is applied. The Quad Planning approach is triggered only in groups where an SET is assigned as the Quality department grows to their desired ratio. Groups with no SETs should continue to follow GitLab\u2019s Definition of done. Quality department will continue to monitor the quality indicators in these groups and work on filling SETs per product priority. During this phase, it\u2019s important to keep Application Security Engineers informed to ensure that they have visibility into planning schedule. This provides them with sufficient time for planning dynamic testing so they can keep the product manager and development team informed of any time/resource requirements. The develop and test phase is where we build the features, address bugs or technical debt and test the solutions before launching them. The PM is directly responsible for overall prioritization of a milestone, including bugs and maintenance work; however, the Engineering Manager and software engineers are responsible for the implementation using the engineering workflow. Engineering owns the definition of done and issues are not moved into the next phase until those requirements are met. Keep in mind that many team members are likely to contribute to a single issue and collaboration is key. This phase begins after work has been broken down, and prioritized in Phase 1. Work is completed in priority order as set at the beginning of the milestone. The Engineering Manager will assign an issue to an engineer who is responsible for building the feature or addressing a bug or maintenance issue. An engineer can also self-serve and pick up the next priority order issue from the workflow::ready for development queue on their team\u2019s board. That engineer will update its workflow:: label to indicate where it\u2019s position in the development process. When an issue is in development the Software Engineer in Test (SET) will ensure the quad planning process is being followed regarding test plans, regression jobs, end to end tests, etc. Coordination is key between the assigned development engineer and the SET during this phase. When an issue is in workflow::in review, the Application Security Engineer would help validate the risk mitigations through the non-blocking application security review process. Documentation for the work will be developed by the engineer and the Technical Writer (see Documentation with code as workflow). The Technical Writer should review the documentation as part of the development process. Items discovered during a documentation review should not block issues moving into the next phase. This may drive the creation of follow-on improvement MRs for the documentation, after release. After the feature code has been merged, the issue should be moved to workflow::verification.\nWhen an issue is in workflow::verification, the responsible engineer will manually test the feature in either the Staging or Production environment. Note: Work deemed out-of-scope or incomplete by engineering is taken back into the plan phase for refinement and rescheduling for completion. Issue Status: Closed When the change becomes available in production and any needed verification is complete, the issue is closed by the development team and the workflow::complete label is added so stakeholders know work on it has been completed. Afterward, the Product Manager coordinates the release post and dogfooding process when they apply. Label: n/a After launch, the Product Manager and Product Designer should pay close attention to product usage data. This starts by ensuring your AMAU is instrumented and reporting as you expect. From there consider how the feature has impacted GMAU and SMAU. At this point you should also solicit customer feedback to guide follow-on iterative improvements, until success metrics are achieved/exceeded and a decision can be made that the product experience is sufficient. To create a combined and ongoing quantitative and qualitative feedback loop, consideration of the outcomes and potential activities below are recommended. All merge requests to this page require informing Product Operations prior to merging. To make updates such as grammatical\nfixes and typos, you can create an MR and assign Product Operations DRI @justinfarris as Reviewer for reference, and then merge. There\u2019s no need to wait for feedback on these types of updates prior to merging. For updates that affect the overall phases by modifying core definitions, workflow labels or other cross-functionally utilized processes,\nyou can create an issue or MR, add the current milestone and labels product development flow, product operations, prodops:releaseand assign it to Product Operations DRI@justinfarris  as Reviewer for collaboration and approval. The Product Operations DRI will ensure the MR gets included in product develoment flow release updates as well as ensuring alignment happens with the following stakeholders if needed: In some cases, when significant changes to the product development flow are needed, affecting multiple teams and/or function workflows, Product Operations may request a draft page and/or a working group for multiple iterations prior to pushing changes to this framework, to minimize disruption and distraction during product development. Label: ~label Phase description\u2026 Required \ud83d\udd0e\nOutcome # - Description of required outcome providing a better understanding of the outcome and any required outputs NOTE:\nThe content below covers feature flags used by GitLab to deploy its own features, which is not the same\nas the feature flags offered as part of the product. This page defines the process for the feature flags lifecycle at GitLab. Technical information for GitLab developers and code contributors can be found in the developer documentation. The deployment of features behind feature flags is required for changes that could affect\nGitLab\u2019s availability of existing functionalities. If your changes only affect the new feature you\u2019re creating, use your judgment to determine if you need one or not.\nSuch changes include: The pre-planning is done in advance of the budget becoming available so that the potential investments are well documented and collaboration has occurred on them with the stakeholders. Search for issues with the label Investment Case"
    },
    {
        "title": "Engineering Workflow",
        "url": "https://handbook.gitlab.com/handbook/engineering/workflow/#product-development-timeline",
        "content": "This document explains the workflow for anyone working with issues in GitLab Inc.\nFor the workflow that applies to the wider community see the contributing guide. Products at GitLab are built using the GitLab Flow. We have specific rules around code review. In line with our values of short toes, making two-way-door decisions\nand bias for action, anyone can\npropose to revert a merge request. When deciding whether an MR should be reverted,\nthe following should be true: Reverting merge requests that add non-functional changes and don\u2019t remove any existing capabilities\nshould be avoided in order to prevent designing by committee. The intent of a revert is never to place blame on the original author. Additionally, it is helpful\nto inform the original author so they can participate as a DRI on any necessary follow up actions. The pipeline::expedited label, and master:broken or master:foss-broken label must be set on merge requests that fix master to skip some non-essential jobs in order to speed up the MR pipelines. If you notice that pipelines for the master branch of GitLab or GitLab FOSS are failing, returning the build to a passing state takes priority over everything else development related, since everything we do while tests are broken may: A broken master is an event where a pipeline in master is failing. The cost to fix test failures increases exponentially as time passes due to merged results pipelines used. Auto-deploys, as well as monthly releases and security releases, depend on gitlab-org/gitlab master being green for tagging and merging of backports. Our aim should be to keep master free from failures, not to fix master only after it breaks. There are two phases for fixing a broken master incident which have a target SLO to clarify the urgency. The resolution phase is dependent on the completion of the triage phase. Note: Recurring incidents are negatively impacting master pipeline stability and development velocity. Any untriaged, recurring incident will be automatically escalated to #dev-escalation following this timeline: If an incident becomes a blocker for MRs and deployments before being auto-escalated, the team member being impacted should refer to the broken master escalation steps to request help from the current engineer on-call as early as needed. Additional details about the phases are listed below. Recurring broken master incidents are automatically escalated to #dev-escalation unless it is triaged within 4 hours. If a broken master is blocking your team before auto-escalation (such as creating a security release) then you should: Master broken incidents must be manually escalated to #dev-escalation on weekends and holidays if necessary. Without a manual escalation, the service level objective can extend to the next working day; that is, triage DRI is expected to triage the incident on the next working day. Regardless of when the label was applied, we always consider an incident to be in an escalated state as long as it has the ~\u201cescalation::escalated\u201d label, until the incident is resolved. If a failed test can be traced to a group through its feature_category metadata, the broken master incident associated with that test will be automatically labeled with this group as the triage DRI through this line of code. In addition, Slack notifications will be posted to the group\u2019s Slack channel to notify them about ongoing incidents. The triage DRI is responsible for monitoring, identifying, and communicating the incident. The Engineering Productivity team is the backup triage DRI if the failure cannot be traced to a group, or if the current triage DRI requires assistance. A notification will be sent to the attributed group\u2019s Slack channel, or the #g_engineering_productivity channel as a backup DRI. Monitor Pipeline failures are sent to the triage DRI\u2019s group channel, if one is identified, and will be reviewed by its group members. The failures will also be sent to #master-broken as a backup channel, in case the failure cannot be traced to a group, or if the triage DRI requires assistance. To maintain a scalable workflow, notifications posted in #master-broken does not require a manual acknowledgement from the Engineering Productivity team if the incident is announced in another DRI group\u2019s Slack channel. If the incident is a duplicate of an existing incident, use the following quick actions to close the duplicate incident: If the incident is not a duplicate, and needs some investigation: Identification Review non-resolved broken master incidents for the same failure. If the broken master is related to a test failure, search the spec file in the issue search to see if there\u2019s a known failure::flaky-test issue. If this incident is due to non-flaky reasons, communicate in #development, #backend, and #frontend using the Slack Workflow. If you identified that master fails for a flaky reason, and it cannot be reliably reproduced (i.e. running the failing spec locally or retrying the failing job): Quarantine the failing test to restore pipeline stability within 30 minutes if the flakiness is continuously causing master pipeline incidents. Alternatively, if the failure does not seem disruptive, and you have a fix that you are confident with, submit the fix MR with the ~\u201cmaster:broken\u201d label to ensure your pipeline is expedited. If a flaky test issue already exists, add a comment in it with a link to the failed broken master incident and/or failed job. We have automation in place to create test failure issues automatically. The issue is named after the spec path, which can be a search keyword. If a flaky test issue doesn\u2019t exist, create an issue from the New issue button in top-right of the failing job page (that will automatically add a link to the job in the issue), and apply the Broken Master - Flaky description template. Add the appropriate labels to the main incident: Close the incident Add the stacktrace of the error to the incident (if it is not already posted by gitlab-bot), as well as Capybara screenshots if available in the job artifacts. Identify the merge request that introduced the failures. There are a few possible approaches to try: If you identified a merge request, assign the incident to its author if they are available at the moment. If they are not available, assign to the maintainer that approved/merged the MR. If none are available, mention the team Engineering Manager and seek assistance in the #development Slack channel. If no merge request was identified, ask for assistance in the #development Slack channel. Please set the appropriate ~master-broken:* label from the list below: (Optional) Pre-resolution If the triage DRI believes that there\u2019s an easy resolution by either: The triage DRI can create a merge request, assign to any available maintainer, and ping the resolution DRI with a @username FYI message.\nAdditionally, a message can be posted in #backend_maintainers or #frontend_maintainers to get a maintainer take a look at the fix ASAP. If the failures occur only in test-on-gdk jobs, it\u2019s possible to stop those jobs from being added to new pipelines while the cause is being fixed. See the runbook for details. For an initial assessment of what might have contributed to the failure, we can try the experimental AI-assisted root cause analysis feature following this documentation. To confirm flakiness, you can use the @gitlab-bot retry_job <job_id> or the @gitlab-bot retry_pipeline <pipeline_id> command to retry the failed job(s), even if you are not a project maintainer. The merge request author of the change that broke master is the resolution DRI.\nIn the event the merge request author is not available, the team of the merge request author will assume the resolution DRI responsibilities.\nIf a DRI has not acknowledged or signaled working on a fix, any developer can take assume the resolution DRI responsibilities by assigning themselves to the incident. Once the resolution DRI announces that master is fixed: Merge requests can not be merged to master until the incident status is changed to Resolved. This is because we need to try hard to avoid introducing new failures,\nsince it\u2019s easy to lose confidence if it stays red for a long time. In the rare case where a merge request is urgent\nand must be merged immediately, team members can follow the process below to have a merge\nrequest merged during a broken master. Merging while master is broken can only be done for: First, ensure the latest pipeline has completed less than 2 hours ago (although it is likely to have failed due to\ngitlab-org/gitlab using\nmerged results pipelines). Next, make a request on Slack: A maintainer who sees a request to merge during a broken master must follow this process. Note, if any part of the process below disqualifies a merge request from being merged\nduring a broken master then the maintainer must inform the requestor as to why in the\nmerge request (and optionally in the Slack thread of the request). First, assess the request: Next, ensure that all the following conditions are met: Next, add a comment to the merge request mentioning that the merge request will be merged\nduring a broken master, and link to the broken master incident. For example: Next, merge the merge request: #master-broken-mirrors was created to remove duplicative notifications from the #master-broken channel which provides a space for Release Managers and the Engineering Productivity team to monitor failures for the following projects: The #master-broken-mirrors channel is to be used to identify unique failures for those projects and flaky failures are not expected to be retried/reacted to in the same way as #master-broken. We run JiHu validation pipelines in some of the merge requests, and it can be\nbroken at times. When this happens, check What to do when the validation pipeline failed for more details. Security issues are managed and prioritized by the security team. If you are assigned to work on a security issue in a milestone,\nyou need to follow the Security Release process. If you find a security issue in GitLab, create a confidential issue mentioning the relevant security and engineering managers, and post about it in #security. If you accidentally push security commits to gitlab-org/gitlab, we recommend that you: For more information on how the entire process works for security releases, see the\ndocumentation on security releases. A ~regression implies that a previously verified working functionality no longer works.\nRegressions are a subset of bugs. The ~regression label is used to imply that the defect caused the functionality to regress.\nThe label tells us that something worked before and it needs extra attention from Engineering and Product Managers to schedule/reschedule. The regression label does not apply to bugs for new features for which functionality was never verified as working.\nThese, by definition, are not regressions. A regression should always have the ~regression:xx.x label on it to designate when it was introduced. If it\u2019s unclear when it was introduced, the latest released version should be added. Regressions should be considered high priority issues that should be solved as soon as possible, especially if they have severe impact on users. When identified in time, for example in a SaaS deployment, fixing them within the same milestone avoids their being included with that release. For better efficiency, it\u2019s common for a regression to be fixed in an MR without an issue being created, either through reversion of the original MR or a code change. Regardless of whether there is an issue or not, the MR should also have the ~regression and ~regression:xx.x labels. This allows for trends to be accurately measured. Start working on an issue you\u2019re assigned to. If you\u2019re not assigned to any issue, find the issue with the highest priority and relevant label you can work on, and assign it to yourself. You can use this query, which sorts by priority for the started milestones, and filter by the label for your team. If you need to schedule something or prioritize it, apply the appropriate labels (see Scheduling issues). If you are working on an issue that touches on areas outside of your expertise, be sure to mention someone in the other group(s) as soon as you start working on it. This allows others to give you early feedback, which should save you time in the long run. If you are working on an issue that requires access to specific features, systems, or groups, open an access request to obtain access on staging and production for testing your changes after they are merged. When you start working on an issue: You are responsible for the issues assigned to you. This means it has to ship with the milestone it\u2019s associated with. If you are not able to do this, you have to communicate it early to your manager and other stakeholders (e.g. the product manager, other engineers working on dependent issues). In teams, the team is responsible for this (see Working in Teams). If you are uncertain, err on the side of overcommunication. It\u2019s always better to communicate doubts than to wait. You (and your team, if applicable) are responsible for: Once a release candidate has been deployed to the staging environment, please verify that your changes work as intended. We have seen issues where bugs did not appear in development but showed in production (e.g. due to CE-EE merge issues). Be sure to read general guidelines about issues and merge requests. Team members use labels to track issues throughout development. This gives visibility to other developers, product managers, and designers, so that they can adjust their plans during a monthly iteration. An issue should follow these stages: Workflow labels are described in our Development Documentation and Product Development Flow. For larger issues or issues that contain many different moving parts, you\u2019ll be likely working in a team. This team will typically consist of a backend engineer, a frontend engineer, a Product Designer and a product manager. In the spirit of collaboration and efficiency, members of teams should feel free to discuss issues directly with one another while being respectful of others\u2019 time. Avoid adding configuration values in the application settings or in\ngitlab.yml. Only add configuration if it is absolutely necessary. If you\nfind yourself adding parameters to tune specific features, stop and consider\nhow this can be avoided. Are the values really necessary? Could constants be\nused that work across the board? Could values be determined automatically?\nSee Convention over Configuration\nfor more discussion. Start working on things with the highest priority in the current milestone. The priority of items are defined under labels in the repository, but you are able to sort by priority. After sorting by priority, choose something that you\u2019re able to tackle and falls under your responsibility. That means that if you\u2019re a frontend developer, you work on something with the label frontend. To filter very precisely, you could filter all issues for: Use this link to quickly set the above parameters. You\u2019ll still need to filter by the label for your own team. If you\u2019re in doubt about what to work on, ask your lead. They will be able to tell you. It\u2019s every developers\u2019 responsibilities to triage and review code contributed by the rest of the community, and work with them to get it ready for production. Merge requests from the rest of the community should be labeled with the Community contribution label. When evaluating a merge request from the community, please ensure that a relevant PM is aware of the pending MR by mentioning them. This should be to be part of your daily routine. For instance, every morning you could triage new merge requests from the rest of the community that are not yet labeled Community contribution and either review them or ask a relevant person to review it. Make sure to follow our Code Review Guidelines. GitLab.com is a very large instance of GitLab Enterprise Edition. It runs release candidates for new releases, and sees a lot of issues because of the amount of traffic it gets. There are several internal tools available for developers at GitLab to get data about what\u2019s happening in the production system: There is extensive monitoring publicly available for GitLab.com. For more on this and related tools, see the monitoring handbook. GitLab Inc has to be selective in working on particular issues. We have a limited capacity to work on new things. Therefore, we have to schedule issues carefully. Product Managers are responsible for scheduling all issues in their respective product areas, including features, bugs, and tech debt. Product managers alone determine the prioritization, but others are encouraged to influence the PMs decisions. The UX Lead and Engineering Leads are responsible for allocating people making sure things are done on time. Product Managers are not responsible for these activities, they are not project managers. Direction issues are the big, prioritized new features for each release. They are limited to a small number per release so that we have plenty of capacity to work on other important issues, bug fixes, etc. If you want to schedule an issue with the Seeking community contributions label, please remove the label first. Any scheduled issue should have a team label assigned, and at least one type label. To request scheduling an issue, ask the responsible product manager We have many more requests for great features than we have capacity to work on.\nThere is a good chance we\u2019ll not be able to work on something.\nMake sure the appropriate labels (such as customer) are applied so every issue is given the priority it deserves.  Teams (Product, UX, Development, Quality) continually work on issues according to their respective workflows.\nThere is no specified process whereby a particular person should be working on a set of issues in a given time period.\nHowever, there are specific deadlines that should inform team workflows and prioritization. With the monthly release date being the third Thursday of the release month, the code cut-off is the Friday prior. The next milestone begins the Saturday after code cut-off. All other important dates for a milestone are relative to the release date: Refer to release post content reviews for additional deadlines. Note that deployments to GitLab.com are more frequent than monthly major/minor releases.\nSee auto deploy transition guidance for details. At the beginning of each release, we have a kickoff meeting, publicly livestreamed to YouTube. In the call, the Product Development team (PMs, Product Designers, and Engineers) communicate with the rest of the organization which issues are in scope for the upcoming release. The call is structured by product area with each PM leading their part of the call. The Product Kickoff page is updated each month, which follows the content on the livestream. Engineering Managers are responsible for capacity planning and scheduling for their respective teams with guidance from their counterpart Product Managers. To ensure hygiene across Engineering, we run scheduled pipelines to move\nunfinished work (open issues and merge requests) with the expired milestone to\nthe next milestone, and label ~\"missed:x.y\" for the expired milestone.\nAdditionally, label ~\"missed-deliverable\" whenever ~\"Deliverable\" is\npresented. This is currently implemented as part of our automated triage operations. Additionally, issues with the ~Deliverable label which have a milestone beyond current +1, will have the ~Deliverable label removed. We keep the milestone open for 3 months after it\u2019s expired, based on the release and maintenance policy. The milestone cleanup is currently applied to the following groups and projects: Milestones closure is in the remit of the Delivery team. At any point in time a release might need to be created for an active milestone,and once that is no longer the case, the Delivery team closes the milestone. The milestone cleanup will happen the day before the release date. These actions will be applied to open issues: Milestones are closed when the Delivery team no longer needs to create a backport release for a specific milestone. The monthly kickoff meeting is publicly streamed to the GitLab Unfiltered YouTube Channel. The EBA for Engineering is the moderator and responsible for initiating the Public Stream or designating another moderator if EBA is unable to attend. When working in GitLab (and in particular, the GitLab.org group), use group labels and group milestones as much as you can. It is easier to plan issues and merge requests at the group level, and exposes ideas across projects more naturally. If you have a project label, you can promote it to a group milestone. This will merge all project labels with the same name into the one group label. The same is true for promoting group milestones. We definitely don\u2019t want our technical debt to grow faster than our code base. To prevent this from happening we should consider not only the impact of the technical debt but also a contagion. How big and how fast is this problem going to be over time? Is it likely a bad piece of code will be copy-pasted for a future feature? In the end, the amount of resources available is always less than amount of technical debt to address. To help with prioritization and decision-making process here, we recommend thinking about contagion as an interest rate of the technical debt. There is a great comment from the internet about it: You wouldn\u2019t pay off your $50k student loan before first paying off your $5k credit card and it\u2019s because of the high interest rate. The best debt to pay off first is one that has the highest loan payment to recurring payment reduction ratio, i.e. the one that reduces your overall debt payments the most, and that is usually the loan with the highest interest rate. Technical debt is prioritized like other technical decisions in product groups by product management. For technical debt which might span, or fall in gaps between groups they should be brought up for a globally optimzed prioritization in retrospectives or directly with the appropriate member of the Product Leadership team. Additional avenues for addressing technical debt outside of product groups are Rapid Action issues and working groups. Sometimes there is an intentional decision to deviate from the agreed-upon MVC, which sacrifices the user experience. When this occurs, the Product Designer creates a follow-up issue and labels it Deferred UX to address the UX gap in subsequent releases. For the same reasons as technical debt, we don\u2019t want Deferred UX to grow faster than our code base. These issues are prioritized like other technical decisions in product groups by product management. As with technical debt, Deferred UX should be brought up for globally optimized prioritization in retrospectives or directly with the appropriate member of the Product Leadership team. UI polish issues are visual improvements to the existing user interface, touching mainly aesthetic aspects of the UI that are guided by Pajamas foundations. UI polish issues generally capture improvements related to color, typography, iconography, and spacing. We apply the UI polish label to these issues. UI polish issues don\u2019t introduce functionality or behavior changes to a feature. Open merge requests sometimes become idle (not updated by a human in more than a month). Once a month, engineering managers will receive an Merge requests requiring attention triage issue that includes all (non-WIP/Draft) MRs for their group and use it to determine if any action should be taken (such as nudging the author/reviewer/maintainer). This assists in getting merge requests merged in a reasonable amount of time which we track with the Open MR Review Time (OMRT) and Open MR Age (OMA) performance indicators. Open merge requests may also have other properties that indicate that the engineering manager should research them and potentially take action to improve efficiency. One key property is the number of threads, which, when high, may indicate a need to update the plan for the MR or that a synchronous discussion should be considered. Another property is the number of pipelines, which, when high, may indicate a need to revisit the plan for the MR. These metrics are not yet included in an automatically created a triage issue. Security is our top priority. Our Security Team is raising the bar on security every day to protect users\u2019 data and make GitLab a safe place for everyone to contribute. There are many lines of code, and Security Teams need to scale. That means shifting security left in the Software Development LifeCycle (SDLC). Each team has an Application Security Stable Counterpart who can help you, and you can find more secure development help in the #sec-appsec Slack channel. Being able to start the security review process earlier in the software development lifecycle means we will catch vulnerabilities earlier, and mitigate identified vulnerabilities before the code is merged. You should know when and how to proactively seek an Application Security Review. You should also be familiar with our Secure Coding Guidelines. We are fixing the obvious security issues before every merge, and therefore, scaling the security review process. Our workflow includes a check and validation by the reviewers of every merge request, thereby enabling developers to act on identified vulnerabilities before merging. As part of that process, developers are also encouraged to reach out to the Security Team to discuss the issue at that stage, rather than later on, when mitigating vulnerabilities becomes more expensive. After all, security is everyone\u2019s job. See also our Security Paradigm From time to time, there are occasions that engineering team must act quickly in response to urgent issues. This section describes how the engineering team handles certain kinds of such issues. Not everything is urgent. See below for a non-exclusive list of things that are in-scope and not in-scope. As always, use your experience and judgment, and communicate with others. A bi-weekly performance refinement session is held by the Development and QE teams jointly to raise awareness and foster wider collaboration about high-impact performance issues.\nA high impact issue has a direct measurable impact on GitLab.com service levels or error budgets. The Performance Refinement issue board is reviewed in this refinement exercise. The infradev process is established to identify issues requiring priority attention in support of SaaS availability and reliability. These escalations are intended to primarily be asyncronous as timely triage and attention is required. In addition to primary management through the Issues, any gaps, concerns, or critical triage is handled in the  SaaS Availability weekly standup. The infradev issue board is the primary focus of this process. (To be completed primarily by Development Engineering Management) Issues are nominated to the board through the inclusion of the label infradev and will appear on the infradev board. Issues with ~infradev ~severity::1 ~priority::1 ~production request labels applied require immediate resolution. ~infradev issues requiring a ~\u201cbreaking change\u201d should not exist.  If a current ~infradev issue requires a breaking change then it should split into two issues.  The first issue should be the immediate ~infradev work that can be done under current SLOs.  The second issue should be  ~\u201cbreaking change\u201d work that needs to be completed at the next major release in accordance with handbook guidance. Agreement from development DRI as well as the infrastructure DRI should be documented on the issue. Infradev issues are also shown in the monthly Error Budget Report. Triage of infradev Issues is desired to occur asynchronously. These points below with endure that your infradev issues gain maximum traction. In order to provide changes in an iterative and incremental manner, we should always seek to create smaller merge requests. Engineers are a vital part of a feedback cycle with product management to design an MVC as engineers understand the technical challenges that additional behaviours/edge cases have on the effort to ship something. You should always attempt to provide feedback as early as possible to product management if you can see opportunity to cut scope and deliver a smaller change no matter where you are at in the planning/development lifecycle. This document explains the workflow for determining if a feature will be included in a milestone release for the purposes of inclusion in the release blog post. Each release post is composed of many MRs created by PMs to describe the various sections of the post. When these MRs have been reviewed and are ready to be published, they will be assigned to the relevant engineering manager at which point, this process begins. For example: https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/32608."
    },
    {
        "title": "Data For Product Managers",
        "url": "https://handbook.gitlab.com/handbook/enterprise-data/programs/data-for-product-managers/",
        "content": "This page is intended to help Product Managers at GitLab understand what data is available to them and how they can use it to understand how their product is used. This page primarily covers two topics: how to consume data, and what data is available. The user-facing end of GitLab\u2019s data stack is comprised of our BI Tool, Tableau which is connected to our Snowflake data warehouse. The Tableau handbook page of the data team handbook has general information about Tableau aimed for a wider GitLab audience. Here are some useful links that we recommend for you to bookmark: You will need to locate the file you wish to update or create in the gitlab-data analytics project. Please be sure to read and follow the SQL style guide when creating the changes. If you wish to update only the descriptions or information about tables you will be looking for a schema.yml file. If you wish to actually change the structure of tables it will be a *.sql file. Next, create a branch and then submit an MR using the dbt Model Changes template to the gitlab-data analytics project. When creating your branch and MR please folow the data team workflow and use the appropriate data team labels. The first question we on the data team ask product managers is usually \u201care you interested in knowing this for self-managed or GitLab.com?\u201d Our approach to answering your question differs greatly between the two. Although our self-managed offering has many more active customers, our GitLab.com offering has much more data available to analyze. Query Example filtering out GitLab.com: Published data Tableau sources are great ways to allow Tableau users to build charts without writing any SQL or modeling. The data team has created several Published data Tableau sources that have the official badge. Any published data sources that are trusted data will have the [TD] prefix. We created several snippets that allow you to get quickly without any SQL writing some feature usage from the Service Pings data source.\nYou can find details about those snippets on the Product Manager Toolkit handbook page. A lot! Because Snowplow doesn\u2019t rely on Service Ping and is mainly for GitLab SaaS, data from Snowplow is much faster to collect (as soon as the feature is deployed) and visualize. As mentioned, even though the anonymization of snowplow events is a major limitation, with the fast feedback, it is an effective source of data to measure feature adoption and usage. We recommend Product Managers and their teams use Snowplow custom structured events, which are Snowplow\u2019s canonical events. We have built Tracking and GitLab::Tracking, 2 wrappers for Snowplow JavaScript and Ruby Trackers respectively. To get started, use the Snowplow event tracking template when creating a new Snowplow tracking issue Please read our Snowplow Guide for more information around the recommended taxonomy. Once your Snowplow events have been instrumented, as part of the validation process, the newly instrumented event should be tested to ensure they\u2019re working properly. While you as the PM probably won\u2019t be doing the validation yourself everytime, it is nice to know how it works. The content under this heading should help you get started. Testing Snowplow events can be tricky. Snowplow doesn\u2019t have a proper testing interface. However, several tools can help you debug, test, and validate your events implementation: The data you have instrumented is useful only if it can be visualized in a chart. Refer to the Tableau section of the handbook for information on creating charts. \nTo make your query faster, use a date filter in your WHERE statement.\nExample query:\nSELECT\n  event_action,\n  COUNT(*) AS event_count\nFROM legacy.snowplow_structured_events_all\nWHERE  derived_tstamp > CURRENT_DATE-30\nGROUP BY 1\nORDER BY 2 DESC\n To make your query faster, use a date filter in your WHERE statement. Example query: TODO"
    },
    {
        "title": "Pricing model",
        "url": "https://handbook.gitlab.com/handbook/company/pricing/",
        "content": "GitLab\u2019s pricing strategy is set by the CEO, Sid Sibrandij. Everyone can contribute, and the best way to communicate is on the #pricing Slack channel. Contributions are part of the day-to-day jobs of the following people: Most of GitLab functionality is and will be available for free in our Free tier. Our paid\ntiers include features that are\nmore relevant for managers, directors, and executives.\nWe promise all major features in our scope\nare available in Free too. Instead of charging for specific parts of our scope\n(CI, Monitoring, etc.) we charge for smaller features that you are more likely\nto need if you use GitLab with a lot of users. There are a couple of reasons for\nthis: Because we have a great free product we can\u2019t have one price. Setting it high\nwould make the difference from the free version too high. Setting it low would\nmake it hard to run a sustainable business. There is no middle ground that would\nwork out with one price. That is why we have Premium and Ultimate tiers.\nThe price difference between them is half an order of magnitude (5x). We will charge per user, per\napplication, or per instance. We do include free minutes with our subscriptions\nand trials to make it easier for users to get started. As we look towards more\ndeployment-related functionality on SaaS it\u2019s tempting to offer compute and\ncharge a percent on top of, for example, Google Cloud Platform (GCP). We don\u2019t\nwant to charge an ambiguous margin on top of another provider since this limits\nuser choice and is not transparent. So we will always let you BYOK (bring your\nown Kubernetes) and never lock you into our infrastructure to charge you an\nopaque premium on those costs. As a commercial organization, we always want to grow the number of paying customers, therefore we are focused on increasing the free to paid conversion rate. However, GitLab offers a free product, and our free users bring tremendous value to the company beyond just the likelihood of converting to a paid customer one day. Our pricing philosophy is aligned with our GitLab Values. We take a value-based pricing approach at GitLab. The core of the value-based pricing is to understand the value proposition that our innovations provide to our current and future customers for that offering. We aim to price our offerings to achieve continued growth and financial success for both the customer and GitLab. To understand the value that we deliver to our customers, we focus on the benefits that our customers can receive to achieve their business goals. The value to our customers can include: Defining and quantifying the value being delivered does not happen in isolation. We regularly engage with customers to understand how our solutions help them. These engagements are important as they will provide insights on how our innovations are valued by the customers and how it impacts our customers\u2019 willingness to pay. Willingness to pay is a crucial element when we decide on how to price and packaging our offerings. We understand that customers have choices when they decide to make a purchase. Hence,  understanding the competitive landscape of our products is very critical. With respect to competition, we focus on the key differences between our value proposition and the competition\u2019s value proposition. Our pricing aims to reflect the differential value that we provide. We aim to design the pricing structure that works best for our customers compared to our competitors inclusive of pricing metric. To following our pricing philosophy, we aim to support long-lasting customer relationships. When we develop our pricing, the target is that both our customers and GitLab become successful together. For long term success, where we can run a sustainable business and meet our company\u2019s financial goals, we do also consider cost to serve and margins as factors when pricing is determined. It is important to note that while costs and margins are factors in pricing, value provided to our customers is the foundational element. Pricing affects Product, Marketing, and Sales.\nTherefore, general pricing decisions are made by the CEO. Product makes most decisions on a day-to-day basis about what feature should go\nin what plan based on the paid tiers. The following table describes how large cross-functional pricing decisions should be made.  This decision making method differs from our normal RADCIE method due to the extremely cross-functional nature and business risk of large pricing decisions. | Responsible | Sr. Director, Pricing | Responsible for analysis and recommendation |\n| Agree | Chief Product Officer, CRO | Should ideally agree with the recommendation |\n| Perform | Pricing, Fulfillment, Sales Ops, Product Marketing, and Website teams | Executes the recommendation |\n| Input |  CMO, CFO | Should be consulted and allowed to provide input prior to decision |\n| Decide | CEO | Final decision maker | We have three pricing tiers.\nHow we make decisions on a day-to-day basis is specified on our stewardship page. When considering buyers as part of product tiering decisions we use the following guidance: When the tiering of a feature is being evaluated, the stewardship promise will override this guidance. Understanding the distinction of our buyer-based model can be difficult. In it we focus not on the user of the feature, but on the buyer and in what cases a feature would be useful to that buyer even in cases where the buyer is not the user. When making these decisions we ask questions like: Below we list product categories and the current and proposed features which reside in a given tier to highlight how the buyer-based model works in practice. While our tiers are based on who leads the purchasing decision there are occasions where driving increased usage takes precedence over the natural buyer-based tiering, always in favor of moving features to lower tiers. Here\u2019s why:\nAs GitLab develops new categories that are likely to be in paid tiers, it is still reasonable (and in many cases advisable) to get the early MVC versions to land in the free or lower paid-tier to spur adoption, encourage contributions and gain feedback from the wider user base. Over time, the team can then add more features on top of the MVC functionality that will be placed in the paid-tiers. However, Product Managers should not move features down in violation of the buyer-based model unless there is a concrete high confidence plan to follow up with meaningful additions to the base feature that can be added to and monetized with the right paid tier When considering tiering, if the feature is geared to be used (not purchased) by individuals and the answer to the question of who cares most about this feature? is today - very few people we should consider open-sourcing it to get more usage and contributors. Regardless of the reasoning behind the down-tiering of a feature, the process should still be followed. If a feature in the free tier (typically useful to ICs, but also to others) will open up the possibility to circumvent or abuse our tiering policy, we should exercise extreme caution and err on the side of maintaining the feature in a paid tier. An example of this is repo pull mirroring that is useful for ICs and can also be great for adoption (i.e. trying out GitLab.). However, it may also lead to larger instances in Free tier mirroring to smaller instances in paid tiers to make use of paid-tiered features. This goes against our pricing terms & conditions and therefore we chose to keep the feature in a paid tier instead of Free tier. When building integrations to partners it is possible to make exceptions to our buyer-based model when our tiers don\u2019t align well with those of the partner, but only in favor of lower tiers. As an example - a partner who provides a team collaboration tool with a free tier might desire any GitLab integration to be present in our free tier despite it clearly being appropriate for single team usage. The go-to-market benefits of this partnership can outweigh the divergence from our buyer-based model. We\u2019ve found that bundling our features within tiers into themes resulted in improved conversion performance on our pricing page. While it is how we present the value of our tiers, this themes-based representation serves as an additive filter for, and is not a replace of, our Buyer Based Tiering decision. Themes are then bundled into customer value drivers. The following are our current set of capabilities: Faster code reviews Advanced CI/CD Enterprise agile planning Release controls Self-managed reliability 10,000 compute minutes per month Support Advanced security testing Security risk mitigation Compliance Portfolio management Value stream management Free guest users 50,000 compute minutes per month Support Because themes are filters for our Buyer Based tiers, there can occasionally be instances where a feature\u2019s tier and its natural theme don\u2019t match. In that case we should either: Note - it is OK for the features of a theme to be in the listed tier and any lower tier. Our lower tiers have: Our higher tier is still the best option for our customers: There are multiple reasons why our lower tiers have more relative value: Arguments in favor of raising the price of the lower tier (which we won\u2019t necessarily do) are: Please note that all the above is not a plea to add more or fewer features to lower tiers, we should just follow our Buyer Based Open Core model. We use the same names for SaaS and Self-Managed tiers because: There is a big price difference between the different tiers (0$, $29, $99 per user per month, a price difference of infinite, 5x). For GitLab Inc., the majority of revenue comes from large enterprises buying the top two tiers. Most companies in a similar situation would focus only on the highest tiers.\nBut we want to make a our hybrid model work for the following reasons: A 5x higher price doesn\u2019t mean there is 5x more value, just like the Premium tier doesn\u2019t provide infinitely more value than the gratis Free tier.\nWhen deciding between tiers, organizations should look at the ratio between how much extra value they get divided by how much extra they pay.\nIf this ratio is comfortably above 1, it makes sense to move to a higher tier.\nThe value is in making people more effective, saving time on integrating tools, driving faster time to value, and retiring other tools.\nThis should more than pay for the increased price of a tier.\nAn analogy would be Apple\u2019s iPhone: it is twice as expensive as an average Android phone, and while it doesn\u2019t deliver twice as much value, the extra value is worth the extra cost. As Stripe documented: hybrid is hard, because \u201cThe most common result of attempting both models simultaneously is that only one of the models receives any traction, and (because these models weave themselves into all operations of the company) it typically strangles the other.\u201d This hybrid models is how we bridge the chasm between self-service and enterprise. We tried selling one feature at a time, but this was not feasible.\nAn improved version of that would be selling 7 main features, instead of 3 plans.\nExamples of main features would be: High Availability, Security, Service Desk, etc. The advantages are: The disadvantages are: We currently think the disadvantages outweigh the advantages. The advantages are: The disadvantages are: We believe having a single plan for one customer works because the advantages outweigh the disadvantages. For the GitLab sales team and for GitLab customers, we suggest handling the objection by focusing on the value and business outcomes As our customers adopt GitLab as the single application for their entire DevOps lifecycle, we are hearing more and more non-developer use cases using GitLab for Agile project management. The main functionality that some non-developer roles need aligns fairly well with our reporter permission access, including Managing Labels, Assigning Issues, and Creating and Editing Epics, etc. Those users don\u2019t really need to use much other developer functionality. Currently, we do not offer a different list price for users who only need the reporter permission because: We understand that our customers have non-developer use cases. Please contact our sales team or connect with us via this issue to discuss your specific use cases. Arguments to charge more for SaaS: Arguments to at least make them equal: Not sure what is normal in the market. Adobe did a good job, but they moved from perpetual licensing to subscriptions, where it is hard to compare the two prices. This is the title of a great article of which we\u2019ll apply the 8 points to GitLab below: Annual, up-front pricing is currently our only offering.\nAll internal systems should show only annual pricing to keep comparisons simple.\nWe do show monthly pricing externally. Arguments supporting annual up-front pricing: Arguments supporting also offering monthly pricing: Almost all SaaS products show monthly pricing on their pricing pages. GitLab shows monthly pricing on our website and notes clearly that it is billed annually. This is also a standard practice followed by companies like Salesforce. We previously have tried showing annual pricing on the website, but repeatedly heard from customers that they were confused by it. They often thought our product was priced significantly higher than it actually was because they expected the pricing to be displayed in monthly units and read the annual price as though it were per month. Most companies evolve in the following way: An example is Microsoft Office, where it is costly to buy components of Office365 separately, although higher tiers include more products.\nAt GitLab, we decided to skip the intermediate steps and immediately only offer a suite that includes all our products.\nHaving our complete scope included in our open source version is even part of our stewardship promises. Selling only a suite has risks, after the => is how we mitigate those at GitLab: Companies evolve to selling only a suite for the following reasons, after the => is how this applies to GitLab: We\u2019re going even further than selling a suite by integrating everything in a single application. We do that because of the advantages mentioned on our handbook page about us being single application. A secondary effect is that the user doesn\u2019t have to make a buying, or even an adoption, decision. Charging one price that incorporate all our stages is the perfect bundle. There are two factors that determine how much value GitLab creates for an organization, in order of importance: When an organization is larger, the benefits of GitLab are larger because: Since GitLab is an open core project, we\u2019ll always create much more value then we (are able to) capture. Based on the value created, the straightforward way to capture value would be to: These straightforward ways are not possible for the following reasons: So we\u2019re left with charging for features.\nWe can\u2019t charge for each feature separately, since that is unwieldy for the customer.\nSo we charge for tiers that contain a bundle of features.\nWe select features in the (more expensive) paid tiers that: Adding features to a (more expensive) paid tier is not the only thing stopping users from adopting them, but it is a very important factor. To simplify the above, we base our feature groupings on champion position (see below). We make feature tiering decisions based on: \u201cWho cares most about the feature\u201d.\nOur three tiers are differentiated based on the buyer persona or IC who buys GitLab, from individual contributor, to manager/director, to executive. Every person in the company is on the same tier, even if they don\u2019t use all the features.\nThe feature is put in the plan based on what champion is most likely to care about it.\nBuyers make sense, since a higher-cost plan needs a higher-placed buyer. Alternatives that don\u2019t work: More detail about this in Sid\u2019s presentations about Buyer-Based-Open-Core at the Open Source Leadership Summit in 2019 and at Heavybit. Also, see fork and commoditize (internal) in our list of concerns. A customer asked why merge request approvals were not included in free: Thanks for asking. We think that managers are more likely to care about merge requests approvals than individual contributors. That doesn\u2019t mean that individual contributors don\u2019t care about them. And it doesn\u2019t mean that in all cases managers care more, just in most cases. For more information please see our Buyer Based Open Core model: #buyer-based-open-core. We should not hesitate to open source features. When we put a feature into too high of a tier we should move it quickly because not having it in all tiers limits who can use the feature and this hurts: In most cases the following guidelines apply: Below is a video with the CEO discussing the philosophy of this with a Product Manager: When in doubt, we will default to moving features to a lower tier, moving it down quickly if\ndata shows that this is more appropriate. Not all tier changes will involve moving things to lower-priced plans and paid features may move into the higher tier, but\nopen source features should never move to paid tiers. Occasionally, a feature may unintentionally become available at a lower-tier due to a bug. This can include the free (open source) tier. When we fix the bug and return the feature to the correct tier, this is not the same as moving an open source feature to a paid tier. The definitive source for a given feature\u2019s tier is our documentation. We should focus on building new features that buyers want and making sure that the initial assessment of new features is never too low. While we reserve the\nability to move features up in tier, proving the necessity has a much higher bar since we are constraining the existing reach of a feature rather than expanding it. Please also note that the CEO is in charge of pricing and tiers; this is delegated to product for the day-to-day work.\nWhile other parts of the GitLab organization are consulted, the CEO is the directly responsible individual. To propose a change that impacts pricing or changes a feature\u2019s tier (e.g. moving a feature from Premium to Free), please follow the process outlined in the Feature Tier or Pricing Change issue template. What is interesting is that GitLab creates more value as you adopt more of it.\nThis shouldn\u2019t be confused with DevOps maturity.\nDevOps maturity is how advanced your practices are and how fast your DevOps lifecycle is, shown in cycle analytics.\nWith the best practices embedded in GitLab, you will mature faster than without it. GitLab enables a 200% faster DevOps lifecycle.\nBut DevOps maturity is mostly about organizational change. GitLab the product is just an enabler of it.\nEven if an organization uses everything of GitLab (high DevOps score), they can still have a slow process (slow lifecycle).\nWe know there is a correlation between a higher DevOps score and a faster lifecycle; but especially in organizations new to DevOps, it is a trend, not an absolute.\nLinking our tiers to maturity would mean we don\u2019t ask any money from the large organizations that currently have a slow lifecycle but that are making it faster by adopting all of GitLab.\nThese large organizations with a slow lifecycle benefit the most from GitLab, since they can adopt it completely, because they are not held back by an existing toolchain. As suggested by a user on X(X login required).\nThis is a good suggestion to consider given the GitLab approach to adapting to local markets throughout the business. GitLab will assess viability of the idea in our overall pricing strategy planning. It is difficult to do and our assessment of this will consider:"
    },
    {
        "title": "Acquisitions Handbook",
        "url": "https://handbook.gitlab.com/handbook/acquisitions/",
        "content": "GitLab\u2019s key goal in pursuing acquisitions is to accelerate our roadmap and offer better tools to customers more quickly. We are seeking to introduce new product categories and mature early categories faster\nthan by building everything internally. We want to acquire strong teams that have already built great tools and products relevant for GitLab customers and have them integrate their tech into GitLab. Additional benefits to GitLab: We are looking for companies interested in helping deliver on our vision to create a single application for the entire DevOps lifecycle. We value strong teams and technology and are looking for a combination of both that will help us accelerate our roadmap. We\u2019re looking for acquisitions which can either present a strategic value-add or create potential for significant revenue upside. Below is a set of general, yet not strict, characteristics of companies that are a potential fit for our acquisition process: Acquisitions receive a compensation offer specific to that engagement, which will be evaluated as part of our acquisition process as we learn more about your company and your technology. Andrew Newdigate, \u201cThroughout Gitter\u2019s acquisition process, GitLab was an excellent partner. We started the process in mid-December, and by mid-January, the team were onboard and had joined GitLab\u2019s summit in Canc\u00fan, Mexico. Compared to previous acquisition attempts that we had been through with other companies, the professionalism and focus of the GitLab team was refreshing. It quickly became apparent to me that Sid, Paul and the team at GitLab were interested in striking a fair deal, and were as concerned about the outcome for the Gitter team as my co-founder and I were. In the year-and-half since, GitLab has continued to be a great home for Gitter and I\u2019m incredibly proud to be part of the team.\u201d Philippe Lafoucri\u00e8re, \u201cWhen GitHub announced they would provide a Security graph and alerts, we knew we would not be able to compete with them. That meant the end of the story for us and our product. It was time to find a new home for the team. We started discussions with GitLab in November 2017 and officially joined the company in mid-January 2018. The whole process was seamless, with a particular care for the team. Expectations from both sides were discussed, with mutual respect and understanding.\nThe founders made themselves available for us at anytime, and we had regular meetings for several months until we all estimated the situation stable enough. Onboarding a whole team at once is a challenge: the peopleops team did everything they could to help and to make them feel comfortable with their new positions. They were happy to continue on the foundations we\u2019ve built over the years while being able to contribute to a greater goal. We managed to identify with the management where we could have the best impact, and provide results as soon as possible.\nI don\u2019t see anything GitLab could have done differently to make this acquisition smoother. The most important value to follow in this kind of event is Trust (because you can only lose it once). GitLab, and especially its CEO, was incredibly clear and respectful during all the process and beyond.\u201d Gemnasium: Our GitLab journey If you are interested in starting acquisition discussions with GitLab, please send an email to Corporate Development to connect and start the process. Learn more about our internal acquisition process and how you can prepare for an efficient process. See our performance indicators. For additional information contact Corporate Development. This is a detailed view of our acquisition process. For more information about\nour acquisitions approach visit our acquisitions handbook. The process is comprised of five key stages: We prioritize companies that fit with our product and acquisition priorities (\u201cPrioritized Pipeline\u201d) and reach out to their leadership to set up intro calls."
    },
    {
        "title": "UX Department",
        "url": "https://handbook.gitlab.com/handbook/product/ux/",
        "content": "We\u2019re the GitLab User Experience (UX) department. We comprise four areas to support designing and building the GitLab product. Our goal is to make our product easy to use, supportive of contributions from the wider GitLab community, and built for a diverse global community. We want GitLab to be the easiest and most delightful product in its class. We work closely with the community, and our stable counterparts Product Managers (PM), Frontend engineers (FE), Backend engineers (BE), Quality engineers, and the Brand team. We follow GitLab\u2019s shared process referred to as the Product Development Flow. Every Product Designer is aligned with a PM and is responsible for the same customer benefits the PM oversees. Technical Writers each support multiple stage groups. UX Researchers support multiple groups within a section. In the spirit of having stable counterparts, we plan headcount as follows: GitLab uses labels to categorize, prioritize, and track work. The following is a breakdown of the labels most directly related to the UX workflow. An overview of all the label types and uses can be found in the contributing doc. UX label: Indicates that UX work is required on this issue. These issues can be new features, ideas for improvement or anything else where UX should contribute their expertise. Inclusion label: A change to GitLab that promotes inclusion as it relates to our diversity value. Inclusive design label: Considering, exploring, and evaluating the different ways someone would access, interact with, or contribute to content that results in a more accessible experience. Accessibility and scoped accessibility labels are used to identify issues with accessibility impact. The scoped labels should be added after an accessibility audit has validated the impact and used in combination with priority and severity labels to triage an issue. learnability label: Issues that address learnability problems by helping users quickly become familiar with GitLab features. Scoped workflow labels from the Product Development Flow should be used to indicate where an issue is in the development lifecycle. Issues can move between workflow labels as many times as necessary, and not all labels will be applicable to every issue. Issues that require UX would use one of these labels as defined in the Product Development Flow: Pajamas component lifecycle labels are scoped labels used for creating and updating Pajamas components. Label usage guidelines can be found in the Pajamas component lifecycle documentation. UX problem validation label: Indicates that the issue requires UX work to validate that the problem is relevant to users. We use this label in addition to the Product Development Flow scoped labels, so that we can track validation efforts over time in our UX Performance Indicators. UX solution validation label: Indicates that the issue requires tasks to validate that the proposed solution is technically feasible and meets user needs. We use this label in addition to the Product Development Flow scoped labels, so that we can track validation efforts over time in our UX Performance Indicators. UI polish label: Indicates the issue covers only visual improvement(s) to the existing user interface. Deferred UX label: Deferred UX results from the intentional decision to deviate from the UX vision or MVC, which sacrifices the user experience. Deferred UX labeled issues are to be included in subsequent releases. Use this label to indicate that the UX released does not meet: This label is applied to any follow-up issues that address a UX gap. It does not apply to the issue or merge request that created the Deferred UX. For example, if the agreed MVC design solution is not fully realized due to release pressures or implementation oversight, that\u2019s considered Deferred UX. If the design is implemented correctly but unforeseen UX issues are identified, it is not considered Deferred UX. If in doubt about when to apply this label, use the following rule: If you can say \u201cThis UX problem did not originate from an issue or merge request,\u201d then it\u2019s just UX, not Deferred UX. In case your team makes the decision ship an MVC that contains Deferred UX, it is recommended to create an issue to track it as soon as the change has been released. Learn more about Deferred UX as a UX Department Performance Indicator. UX Paper Cuts label: Used to prioritize and track work from the UX Paper Cuts team. Seeking community contributions System Usability Scale (SUS) labels: Indicates that the issue is related to usability problems surfaced in one of our SUS research efforts. More specifically, issues related to SUS that are prioritized can be labeled with the corresponding Fiscal Year and Quarter. For example: SUS::FY22 Q2 - Incomplete.\nLearn more about SUS score as a UX Department Performance Indicator Regression label: Indicates a bug introduced in the latest release that broke correct behavior (see the contribution guidelines for more info). UX scorecard label: Indicates the primary issue or epic for the UX Scorecard. We use this label to help us easily find current work and track efforts over time. UX scorecard-rec label: Indicates this issue is a recommendation that was a result of a UX scorecard review. It\u2019s OK if the issue was created prior to the scorecard being done; it can still be pulled into the set of recommendations. CM scorecard label: Indicates the primary issue or epic for the CM Scorecard. It is used to easily find current work and track efforts. cm-scorecard-rec label: Indicates this issue is a recommendation that was a result of a CM Scorecard. Actionable Insights document learnings from research that need to be acted on. Type labels: Used to track feature, maintenance, and bug issues and MRs. UX Leadership are active participants in influencing the prioritization of all three work types. See also who are the DRIs for prioritization. Theme labels can be created to group issues that solve a similar user experience problem but don\u2019t have a category. This can be especially useful for a user experience that spans the product. These issues still require a UX label. UX: Feature Discovery Improvement: Indicates issue may improve feature discoverability. UX: Onboarding Improvement: Indicates issue is a potential onboarding improvement. The UX Calendar (internal only) is the SSOT for our team meetings. You can find the details for UX calls, UX Forum, and other team meetings here. These meetings are open to everyone in GitLab. Anyone in the UX department can add events to the Google Calendar. Managers and above can make changes and manage sharing, while ICs can make changes to events. Please reach out in the #ux_leadership Slack channel with any questions or requests. After each release, we have a company retrospective call in which we discuss what went well, what went wrong, and what we can improve for the next release. To understand the specific challenges faced by the UX Department, we hold an async UX retrospective after every milestone. This retro is carried out through a new Issue created for the recent release in the ux-retrospectives project. The goal is to evaluate what went well, what didn\u2019t go well, and how we can improve. The UX Forum is a recurring meeting for UX team members to share and discuss their work.\nThis includes past, current, or future work, and covers Product Design, UX Research, and Technical Writing.\nAll meetings are recorded and made available on Unfiltered for Product, UX, Engineering, and Leadership to watch at their convenience. In UX, we utilize performance factor worksheets (\ud83d\udd12 internal only) as a way to facilitate talent assessment and growth conversations between manager and their direct reports. These worksheets are available in Google Sheets format and the spreadsheets include tabs for a mid-year and year-end review, as well as a tab to list Achievement, Strengths, and Opportunities throughout the year. It is strongly encouraged for each team member to have their own worksheet created at the start of the fiscal year so that it can be used as a tool throughout the entire year. The GitLab Technical Writing team collaborates with developers, product managers, and the community to develop product documentation. Good documentation meets the evolving needs of GitLab customers, users, and administrators. It educates readers about features and best practices. It enables people to efficiently configure, use, and troubleshoot GitLab. The Technical Writing team manages the docs.gitlab.com site and its content, processes, and tooling. The documentation roadmap drives our efforts to improve both the content and documentation website. For example, we know that people have trouble finding information on docs.gitlab.com. We have roadmap items and OKRs to replatform the docs site, provide better task-based information, and make content easier to find. These larger projects, completed in addition to feature documentation, provide continual, iterative improvement to the user experience of our documentation."
    },
    {
        "title": "Legal & Corporate Affairs",
        "url": "https://handbook.gitlab.com/handbook/legal/",
        "content": "Welcome to the Legal and Corporate Affairs Handbook! Use this page to learn more about our team, GitLab policies, and shared processes. Visit the sub-team pages linked below for more detailed information and procedures. How to Reach Us For quick questions that do not require legal advice, deliverables, or any discussion of confidential information, you can reach out to the GitLab Legal and Corporate Affairs Team in Slack at #legal. We find this channel best for questions regarding process, who handles what, or how to find certain things if the handbook has not yielded the right result for you after searching. #legal is not a private channel, so your inquiry will be visible to the entire company. One of our Team Members will do their best to answer your question in a timely fashion. To open a general Legal Issue for questions related to deliverables and non-sensitive information, use this template. See the Legal Issue Tracker Workflow for more information. For sensitive, private, or confidential requests, email legal_internal@gitlab.com. Anonymous Internal Ethics and Compliance Reporting We take employee concerns very seriously and encourage all GitLab Team Members to report any ethics and/or compliance violations by using EthicsPoint. Further details can be found in the People Group Handbook under How to Report Violations and in our Code of Business Conduct and Ethics. The Commercial Legal Team works with our Sales and Partnership Team Members to deliver GitLab software and services. In addition, this team is responsible for reviewing and approving all agreements with regards to the procurement of goods and services. Resources include the Sales Guide: Collaborating with GitLab Legal, Procurement Guide, and other resources which provide how best to engage the Commercial Team, as well as assist in efficiently reaching terms with our vendors, customers and partners, including negotiating terms, and providing business and legal recommendations. For all questions or requests related to a specific Partner and/or Customer, including non-standard NDA requests, contract review / negotiations and general legal questions, please open a Legal Request in SFDC. For matters opened in GitLab Issues that require the Commercial Legal Team\u2019s attention, follow the GitLab Commercial Legal labeling instructions to notify the team. The Corporate & Compliance Team supports the compliance and corporate functions of GitLab, which includes regulatory filings with the U.S. Securities and Exchange Commission, review of internal and external communications with respect to GitLab\u2019s SAFE Framework, review and preparation of board and committee materials, general corporate and governance matters, as well as compliance and corporate governance matters for GitLab\u2019s direct and indirect wholly owned international and domestic subsidiaries and trade compliance. The Corporate Development Team prospects, pursues and integrates acquisitions to accelerate GitLab\u2019s roadmap and offer better tools to customers more quickly. For information about GitLab\u2019s acquisition strategy and approach, visit the Acquisitions Handbook. The Employment Legal Team collaborates with GitLab People Group on a broad range of matters across the entire arc of the employment relationship, from recruiting to onboarding, compensation, performance management, leave management, separation, and where necessary, litigation. The ESG Team creates and maintains GitLab\u2019s Corporate Sustainability strategy and programs. This includes ESG disclosures and public ESG reporting, identifying and prioritizing key issues to advance GitLab\u2019s social and environmental goals, and creating partnerships with non-profit organizations that support GitLab\u2019s values and mission. Legal Operations supports Legal & Corporate Affairs processes with a focus on defining and driving initiatives that improve the team\u2019s efficiency and effectiveness. Operations also includes Legal\u2019s Procurement function, which reviews purchases made to ensure adequate terms are present for GitLab. The Privacy, Product and IP Team collaborates with all GitLab teams including engineering, security, product, and marketing to provide guidance and direction in a broad range of matters relating to data privacy, open source licensing, intellectual property protection and export compliance. The Risk Management and Dispute Resolution team addresses dispute resolution across a wide range of topics, including active claims and disputes, external and internal investigations, subpoenas, and third-party discovery requests.  RMDR also coordinates and collaborates cross-functionally with various GitLab teams to address, manage and mitigate company risk. *Only available to GitLab Team Members. The Authorization Matrix designates who is authorized to sign legal documents. Only GitLab Team Members with signature authority can execute agreements on behalf of GitLab. Follow the Non-Disclosure Agreement Process to learn how to send an NDA in DocuSign or request an NDA if you do not have DocuSign access. Note that this process is only for standard GitLab NDAs. In the event a non-standard NDA is needed, follow the steps here. A legal hold is the process GitLab uses to preserve all forms of relevant evidence, whether it be emails, instant messages, physical documents, handwritten or typed notes, voicemails, raw data, backup tapes, and any other type of information that could be relevant to an investigation, pending or imminent litigation or when litigation is reasonably anticipated. Legal holds are imperative in preventing spoliation (destruction, deletion, or alteration) of evidence which can have a severely negative impact on a company\u2019s case, including leading to sanctions. Once GitLab becomes aware of an investigation or potential litigation, a GitLab attorney will provide notice to the impacted team members, instructing them not to delete or destroy any information relating to the subject matter of the investigation or potential litigation. The legal hold applies to paper and electronic documents. During a legal hold, all retention policies must be overridden. The Freedom of Information Act (\u201cFOIA\u201d) provides public access to all United States federal agency records except for those records (or portions of those records) that are protected from disclosure by any of nine exemptions or three exclusions (reasons for which an agency may withhold records from a requestor). Occasionally the records of a federal agency under a FOIA request may include GitLab records in the possession of the agency (i.e. when the agency is a customer of GitLab). In such an event, the federal agency will notify GitLab of the FOIA request and provide GitLab with the documents that the federal agency intends to release in response to the FOIA request. A GitLab legal team member will review the list and content of the documents identified by the federal agency pursuant to the FOIA request and will provide the appropriate response and/or make redactions to those documents, as necessary, prior to their release. In the event you receive a notification from a US federal agency pursuant to a FOIA request, indicating that GitLab documents or information have been identified for release by an agency , please immediately forward the request to FOIA@gitlab.com. The Foreign Corrupt Practices Act (\u201cFCPA\u201d) is a United States federal law that prohibits U.S. citizens and entities from bribing foreign government officials to benefit their business interests. It is not only an invaluable tool to help fight corruption but one to which we must be compliant. As GitLab Inc. is a U.S. incorporated entity, we need to make sure our operations worldwide are compliant with the provisions of the Foreign Corrupt Practices Act. To that end, GitLab requires Team Members to complete an annual online course relating to anti-bribery and corruption at GitLab. In the training, learners will explore improper payments, including facilitation payments and personal safety payments, as well as policies on commercial bribery. The goal of the course is to ensure our Team Members understand what it takes to avoid corruption, especially in high-risk countries, and to ensure GitLab is compliant with legal and regulatory obligations. For additional General Legal FAQs, please refer to the Internal Handbook. (Additional Terms) These Agile Planning Terms (\u201cTerms\u2019\u2019) are between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (or, if a different GitLab Affiliate as listed as \u201cGitLab\u201d on an Order Form) (\u201cGitLab\u201d), and the entity accepting these Terms (\u201cCustomer\u201d). These Terms are effective as of the earlier of (a) Customer\u2019s acceptance of these Terms within the GitLab Software or via an Order Form; or (b) Customer\u2019s use of any Agile Planning Features (as defined below) (\u201cEffective Date\u201d). Capitalized terms not otherwise defined herein shall have the meaning set forth in the Agreement (as defined below). Deprecated 2024-08-29 (Additional Terms) These Agile Planning Terms (\u201cTerms\u2019\u2019) are between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (or, if a different GitLab Affiliate as listed as \u201cGitLab\u201d on an Order Form) (\u201cGitLab\u201d), and the entity accepting these Terms (\u201cCustomer\u201d). These Terms are effective as of the earlier of (a) Customer\u2019s acceptance of these Terms within the (i) GitLab Software or (ii) via an Order Form, or (b) Customer\u2019s use of any \u201cAgile Planning Features\u201d (\u201cEffective Date\u201d).  Capitalized terms not otherwise defined herein shall have the meaning set forth in the Subscription Agreement (defined below). (Additional Terms) These AI Functionality Terms (\u201cTerms\u2019\u2019) are between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (or, if a different GitLab Affiliate is listed as \u201cGitLab\u201d on an Order Form) (\u201cGitLab\u201d), and the entity accepting these Terms (\u201cCustomer\u201d). These Terms are effective as of the earlier of (a) Customer\u2019s acceptance of these Terms within the (i) GitLab Software or (ii) via an Order Form, or (b) Customer\u2019s use of any AI Functionality (\u201cEffective Date\u201d). (Additional Terms) deprecated 2023-10-31 These AI Functionality Terms (\u201cTerms\u2019\u2019) are between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (or, if a different GitLab Affiliate is listed as \u201cGitLab\u201d on an Order Form) (\u201cGitLab\u201d), and the entity accepting these Terms (\u201cCustomer\u201d). These Terms are effective as of the earlier of (a) Customer\u2019s acceptance of these Terms within the (i) GitLab Software or (ii) via an Order Form, or (b) Customer\u2019s use of any AI Functionality (\u201cEffective Date\u201d). Deprecated 2024-08-29 (Additional Terms) These AI Functionality Terms (\u201cTerms\u2019\u2019) are between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (or, if a different GitLab Affiliate is listed as \u201cGitLab\u201d on an Order Form) (\u201cGitLab\u201d), and the entity accepting these Terms (\u201cCustomer\u201d). These Terms are effective as of the earlier of (a) Customer\u2019s acceptance of these Terms within the (i) GitLab Software or (ii) via an Order Form or (b) Customer\u2019s use of any AI Functionality (\u201cEffective Date\u201d). We take the intellectual property rights of others seriously and require that our Users do the same. The Digital Millennium Copyright Act (DMCA) established a process for addressing claims of copyright infringement. If you own a copyright or have authority to act on behalf of a copyright owner and want to report a claim that a third party is infringing that material on or through GitLab\u2019s services, please send a notice that meets the minimum requirements of the DMCA, to dmca@gitlab.com, and we will take appropriate action. Employment law refers to the law that governs the relationship between employer and employee, so the Employment section of GitLab Legal interacts with the People Group on a regular basis to provide information and legal advice related to the entire arc of our team members\u2019 relationship with GitLab.  So what does that mean? Based on the outcome of its global expansion process for gathering and assessing relevant details on any particular country (which include local employment legislation and statutory requirements, potential PEO/EOR service agreements or limitations, branch or entity incorporation options, product and privacy considerations, etc), GitLab\u2019s employment team provides information regarding legal risk and compliance requirements based on particular jurisdictions and particular job types. Often, it is up to the others within the organization whether or not to continue down a certain path once the risks and requirements are known. These Fulfillment Reseller Flow-Through Terms (the \u201cAgreement\u201d) are made as of the date agreed to between the Authorized Partner (as defined below) and the Fulfillment Reseller (as defined below) (the \u201cEffective Date\u201d). Each shall be referred to herein as \u201cParty\u201d, or collectively as the \u201cParties\u201d. For the avoidance of doubt, as further set forth in Section 10 (MISCELLANEOUS), GitLab Inc. or the applicable GitLab entity which has executed terms with the Authorized Partner (\u201cGitLab\u201d) shall be a third-party beneficiary to this Agreement between the Parties, and shall have the right to enforce any terms and conditions onto the Fulfillment Reseller.  In consideration of the mutual agreements contained herein and intending to be legally bound hereby, the Parties agree as follows. This policy helps us identify unacceptable use of our services, and applies to all users of all GitLab services including those on the Free, Premium, and Ultimate GitLab tiers. We refer to \u201cour services\u201d throughout \u2013 this means all services (including related websites) owned or operated by GitLab. We reserve the right to take any action we feel is appropriate to enforce this policy. We may take action to prevent use of our services which goes against the spirit of this policy, even if that use is not expressly forbidden. GitLab Data Processing Addendum Date of last revision: 2022/11/16 This Education Program Agreement (\u201cAgreement\u201d) is between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104  (\u201cGitLab\u201d), and the Educational Institution (as defined below) electronically accepting this Agreement (\u201cMember\u201d). This Agreement is entered into on the earlier of, (a) Member clicking \u201cAgree\u201d or \u201cYes\u201d to the terms of this Agreement to gain initial access to, or use of, the Software or (b) Member is given access to the Software pursuant to the requirements of the GitLab for Education Program (\u201cEffective Date\u201d).GitLab and Member each shall be referred to as a \u201cParty\u201d and collectively as the \u201cParties\u201d. Date of last revision: 2022/08/19 This Open Source Program Agreement (\u201cAgreement\u201d) is between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (\u201cGitLab\u201d), and the Open Source Project on behalf of which this Agreement is executed. This Agreement is entered into on the earlier of, (a) Member clicking \u201cAgree\u201d or \u201cYes\u201d to the terms of this Agreement to gain initial access to, or use of, the Software or (b) Member being given access to the Software pursuant to the requirements of the GitLab for Open Source Program (\u201cEffective Date\u201d). GitLab and the Open Source Project each shall be referred to as a \u201cParty\u201d and collectively as the \u201cParties\u201d. (Additional Terms) These Professional Services Terms (\u201cTerms\u2019\u2019) are between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (or, if a different GitLab Affiliate as listed as \u201cGitLab\u201d on an Order Form) (\u201cGitLab\u201d), and the entity accepting these Terms (\u201cCustomer\u201d). These Terms are effective as of the earlier of (a) Customer\u2019s acceptance of these Terms within (i) via an Order Form or (b) via a SOW (\u201cEffective Date\u201d). Capitalized terms not otherwise defined herein will have the meaning set forth in the Subscription Agreement (defined below). This Subscription Agreement (\u201cAgreement\u201d) is between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (or, if a different corporate entity is listed as \u201cGitLab\u201d on an Order Form [as defined below], (\u201cGitLab\u201d)), and the individual or entity signing or electronically accepting this Agreement, or any Order Form that references this Agreement (\u201cCustomer\u201d). This Agreement is entered into on the earlier of, (a) Customer clicking \u201cAgree\u201d or \u201cYes\u201d to the terms of this Agreement to gain initial access to, or use of, the Software, (b) GitLab and Customer agreeing to an Order Form referencing this Agreement, or (c) Customer is given access to the Software (\u201cEffective Date\u201d). (Additional Terms) This Testing Agreement (\u201cAgreement\u201d) is between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (\u201cGitLab\u201d), and either: (i) the entity electronically accepting this Agreement; or (ii) the entity on behalf of which the Testing Features are enabled, as applicable and in either case, \u201cCustomer\u201d. This Agreement is effective as of the earlier date on which: (i) Customer clicks to accept this Agreement within the GitLab Software; or (ii) an individual acting on behalf of Customer opts to enable the Testing Features (\u201cEffective Date\u201d). The parties agree to the following terms and conditions related to Customer\u2019s use of the applicable Testing Feature (as defined below). Deprecated: 2023-05-18 This Testing Agreement (\u201cAgreement\u201d) is between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (\u201cGitLab\u201d), and the entity electronically accepting this Agreement (\u201cCustomer\u201d). This Agreement is effective as of the date Customer clicks to accept this Agreement within the GitLab software (\u201cEffective Date\u201d). The parties agree to the following terms and conditions related to Customer\u2019s use of applicable Testing Feature. Deprecated: 2023-06-29 This Testing Agreement (\u201cAgreement\u201d) is between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (\u201cGitLab\u201d), and either (i) the entity electronically accepting this Agreement; or (ii) the entity on behalf of which the Testing Features are enabled, as applicable and in either case, \u201cCustomer\u201d. This Agreement is effective as of the earlier date on which (i) Customer clicks to accept this Agreement within the GitLab software; or (ii) an individual acting on behalf of Customer opts to enable the Testing Features (\u201cEffective Date\u201d). The parties agree to the following terms and conditions related to Customer\u2019s use of the applicable Testing Feature. Deprecated 2024-08-29 This Testing Agreement (\u201cAgreement\u201d) is between GitLab Inc. with offices at 268 Bush Street, Suite 350, San Francisco, CA 94104 (\u201cGitLab\u201d), and either (i) the entity electronically accepting this Agreement; or (ii) the entity on behalf of which the Testing Features are enabled, as applicable and in either case, \u201cCustomer\u201d. This Agreement is effective as of the earlier date on which (i) Customer clicks to accept this Agreement within the GitLab software; or (ii) an individual acting on behalf of Customer opts to enable the Testing Features (\u201cEffective Date\u201d). The parties agree to the following terms and conditions related to Customer\u2019s use of the applicable Testing Feature. GitLab Inc. (collectively with its subsidiaries,\u201cGitLab\u201d, \u201cwe\u201d, \u201cour\u201d) is committed to lawful and ethical behavior in all we do and expects members of GitLab\u2019s Board of Directors (\u201cBoard\u201d) and officers, employees, and contractors (collectively, \u201cTeam Members\u201d) to conduct business ethically, with integrity, and in accordance with all applicable laws and regulations. GitLab\u2019s culture is based on our VALUES, which are reflected in and reinforced by our Code of Business Conduct and Ethics and various supporting policies, such as our Anti-Fraud Policy and Anti-Retaliation Policy (collectively, \u201cCompliance Standards\u201d). Because GitLab is made up of individuals who are aligned with our VALUES and who are accountable to our customers, shareholders, and each other, we have designed this Ethics and Compliance Program (the \u201cProgram\u201d) as an operational framework for our team members. This Program is dedicated to (among other things) making sure GitLab\u2019s Compliance Standards are current, complete, and readily accessible. Team Members are educated on these Compliance Standards, through continuous training, awareness campaigns, required annual reviews and acknowledgments, and additional resources, including #compliance-legal. Thank you for visiting! The purpose of this resource is to provide GitLab team members with information on how legal assists and interacts with the procurement of products and services at GitLab. For information on the Procurement Team, policies and process, visit The Procurement Page For general questions that do not require legal advice, deliverables, or any discussion of confidential information, you can reach out to the GitLab Legal Team at #legal. Before submitting a Deal Registration, please review the Master Partner Agreement. PLEASE READ THIS AGREEMENT CAREFULLY BEFORE ACCESSING GITLAB\u2019S PARTNER PORTAL OR OTHERWISE, USING, ACCESSING, CONSUMING, PURCHASING, RESELLING OR OTHERWISE DISTRIBUTING THE SOFTWARE OR SERVICES FROM GITLAB. BY CLICKING YOUR ASSENT BELOW OR USING, ACCESSING OR CONSUMING THE GITLAB SOFTWARE OR SERVICES, YOU SIGNIFY YOUR ASSENT TO AND ACCEPTANCE OF THIS AGREEMENT AND ACKNOWLEDGE YOU HAVE READ AND UNDERSTAND THE TERMS. AN INDIVIDUAL ACTING ON BEHALF OF AN ENTITY REPRESENTS AND WARRANTS THAT HE OR SHE HAS THE AUTHORITY TO ENTER INTO THIS AGREEMENT ON BEHALF OF THAT ENTITY. IF YOU DO NOT ACCEPT THE TERMS OF THIS AGREEMENT, THEN YOU MUST NOT USE, ACCESS, CONSUME, PURCHASE, RESELL OR OTHERWISE DISTRIBUTE THE GITLAB SOFTWARE OR SERVICES. PLEASE READ THIS AGREEMENT CAREFULLY BEFORE USING ACCESSING OR CONSUMING THE SOFTWARE OR SERVICES FROM GITLAB. BY CLICKING YOUR ASSENT BELOW OR USING, ACCESSING OR CONSUMING THE GITLAB SOFTWARE OR SERVICES, YOU SIGNIFY YOUR ASSENT TO AND ACCEPTANCE OF THIS AGREEMENT AND ACKNOWLEDGE YOU HAVE READ AND UNDERSTAND THE TERMS. AN INDIVIDUAL ACTING ON BEHALF OF AN ENTITY REPRESENTS THAT HE OR SHE HAS THE AUTHORITY TO ENTER INTO THIS AGREEMENT ON BEHALF OF THAT ENTITY. IF YOU DO NOT ACCEPT THE TERMS OF THIS AGREEMENT, THEN YOU MUST NOT USE, ACCESS OR CONSUME THE GITLAB SOFTWARE OR SERVICES Trade control laws, which often consist of sanctions, export controls, and import laws, govern how and under what circumstances technology, software, and technical assistance may be exported. Trade control laws vary from country to country but usually exist to protect national security and further foreign policy and economic interests. Under United States law, exports, re-exports, and transfers, can take many forms, including oral, written, and visual disclosure, physical shipment, and electronic transfer or transmission. An export can also occur when technology, software, or technical assistance is transmitted to U.S. nationals abroad, or to non-U.S. nationals located within the United States. The export of certain software, technology, or technical assistance to certain countries, certain end users, or for certain end uses, may require authorization from the United States government prior to export, re-export, or transfer. Vendor Data Processing Addendum"
    },
    {
        "title": "Commercial Legal",
        "url": "https://handbook.gitlab.com/handbook/legal/commercial/",
        "content": "The GitLab Legal Commercial team is responsible for all contracting matters at GitLab. This includes, procurement, revenue, channel, technical and alliances. The Commercial Team partners with sales, technical, and business stakeholders to ensure the alignment with GitLab contracting standards, as well as the most efficient timeline to reach execution."
    },
    
    {
        "title": "Employment Law at GitLab",
        "url": "https://handbook.gitlab.com/handbook/legal/employment-law/",
        "content": "Employment law refers to the law that governs the relationship between employer and employee, so the Employment section of GitLab Legal interacts with the People Group on a regular basis to provide information and legal advice related to the entire arc of our team members\u2019 relationship with GitLab.  So what does that mean? Based on the outcome of its global expansion process for gathering and assessing relevant details on any particular country (which include local employment legislation and statutory requirements, potential PEO/EOR service agreements or limitations, branch or entity incorporation options, product and privacy considerations, etc), GitLab\u2019s employment team provides information regarding legal risk and compliance requirements based on particular jurisdictions and particular job types. Often, it is up to the others within the organization whether or not to continue down a certain path once the risks and requirements are known. In any situation(s) that relates to specific team members or otherwise requires any team member personal information remain confidential, the People Group (and any other GitLab Team Members) should email legal-employment@gitlab.com. This respects team member privacy and may, where applicable, retain attorney-client privilege. If the Legal Employment team requires support from the People Connect team for communicating a country specific legal requirement to team members, to consult with team members in an entity country if necessary, or to arrange legally required contract amendments, to name just a few examples, which may relate to individual team members or groups of team members, assistance can be requested using the confidential process and template referenced here. When individual team members have questions about their employment at GitLab, they should interact with the People Group rather than reaching out directly to the Legal Employment team. Visit the People Group Handbook to determine who to work with for your particular needs. If People Group needs to engage with Legal Employment on a particular question, they will apply the legal-employment::to-do label on the issue that requires attention. This will update the Legal Employment Issue Board and allow the team to triage appropriately. When the Legal Employment team has finished their portion of the issue, they will update the label to legal-employment::done. Below are some common employment topics where Legal is asked to provide input. The paragraphs below are intended to assist People Group to know when to reach out to Legal. Note: GitLab team members should always obtain approval from the Senior Director of Legal, Employment prior to speaking with outside counsel regarding employment-related matters. Legal supports the Talent Acquisition team to develop sourcing processes, candidate tracking processes, and job posting processes that meet applicable compliance requirements. Legal reviews sourcing and talent acquisition strategy for compliance and advises about requirements for applicant tracking in the various countries in which we hire. Legal reviews overall background check policy and procedure in place, helps develop background check adjudication process, and serves as escalation point when the Senior Background Check Specialist has questions or concerns about specific results. Legal should be asked to review negotiated contracts that seek to change standard terms. As different countries have different requirements for hiring and disclosures, Legal will assist People Operations to ensure that onboarding issues are compliant for specific locales. Total Rewards is responsible for determining what benefits should be provided. Legal is available for advice when determining whether those benefits comply with local law. Relocation requests are handled by People Connect, which has a very thorough explanation of the process and requirements. After People Connect team members have worked through their workflow, Legal is available to assist with specific unresolved questions. If a GitLab team member engages People Operations about a possible conflict of interest, the People Operations team should encourage discussion between the team member and their manager, as many conflict of interest determinations are business decisions, rather than legal decisions. If the team member and manager agree that there is no conflict then the applicable Functional Leader can provide written approval, which is maintained in Workday.  Legal is involved in managing the process to ensure that decisions regarding what is or is not a conflict remain consistent across departments and so that the manager and team member can understand the potential risks and implications in order to make an informed decision. As GitLab scales, global expansion efforts require support from a dedicated cross-functional team with multidisciplinary background: Sales, Engineering, Talent Acquisition, Tax, People Ops, Total Rewards, Payroll, Legal, and Finance, with strategic decisions on which countries to prioritize expansion in being made at E-group level. There are challenges related to global expansion, including economic impact, legal exposure, tax exposure, and accounting impact. The GitLab Employment Team coordinates the \u2018global expansion legal process\u2019 for each proposed or potential country, as required, collaborating with each of the other GitLab legal teams to gather and review relevant information on any particular country to assess, including whether GitLab already has team members there, and if so, what employment model is currently in use and whether it can be scaled. If there are no team members in a country, the team considers (with input from all of GitLab Legal) what employment options there might be, whether there are any limitations or restrictions on hiring and what the best solution might be for now and for into the future. The GitLab Employment Legal Team are available to collaborate with the People Teams if or when a new employment policy is required or an update or review of a current policy is undertaken and, if not involved at an earlier stage, should still be asked to perform a final review when policies are updated or created. The Employment Legal Team can be engaged to assist with policy creation, updates or review by using this issue template. By adding the legal-employment::to-do label on the issue that requires attention, the issue will update the Legal Employment Issue Board and allow the team to triage appropriately. In the event that a customer or vendor has questions regarding terms that affect our team members (such as drug tests or more intensive background checks), the procurement team will reach out to the Employment team."
    },
    {
        "title": "ESG",
        "url": "https://handbook.gitlab.com/handbook/legal/esg/",
        "content": "The Environmental, Social, and Governance (ESG) Team creates and maintains GitLab\u2019s Corporate Sustainability strategy and programs. This includes ESG disclosures and public ESG reporting, identifying and prioritizing key issues to advance GitLab\u2019s social and environmental goals, and creating partnerships with nonprofit organizations that support GitLab\u2019s values and mission. Environmental, social, and governance (ESG) practices, although newly formalized in GitLab Inc.\u2019s (\u201cGitLab\u201d, \u201cwe\u201d, \u201cour\u201d) strategy, have been embedded into our work culture since our inception. Deeply integrated into our business philosophy, GitLab\u2019s ESG strategy is driven by our values of Collaboration, Results, Efficiency, Diversity, Inclusion and Belonging, Iteration, and Transparency (CREDIT). In December 2022, we conducted an ESG materiality assessment to determine which ESG topics are most important to our business and our stakeholders. Through engagement with both internal and external stakeholders, we explored which ESG topics have the greatest impact on GitLab\u2019s business, and where we have the potential to have the greatest impact on the environment, society, and our global communities. Our materiality matrix was finalized in January 2023. Every year GitLab publishes an annual ESG report where we share our approach to managing our key ESG focus areas, provide updates on programs and policies, achievements to date, metrics and targets and plans for the future. The purpose of the advisory committee is create cross-functional alignment on ESG objectives and decision making, to go beyond simply compliance and into long-term operational implementation. Members of the ESG Advisory Committee: Information on how GitLab Inc. supports Registered Nonprofit Organizations can be found in the Philanthropy Policy Please note that for all Philanthropic Requests, including requests for GitLab to join as a member to an association, program or organization, approval by the ESG team and CLO is required as defined by the Oversight Responsibility section of the Policy. If you would like to submit a philanthropic request, please follow the instructions based on your request type. There are two ways that team members can submit a request for monetary support. If you are requesting funding from the ESG team to support a Registered Nonprofit Organization, please note that at this time, we are not accepting applications. If you would like to submit a Nonprofit Organization to be considered for support in the future, please go to the Philanthropic Requests epic and open a new issue using the Monetary_Support Template.  You will be notified if there is a future opportunity. If you have a department or TMRG  budget that you would like to utilize to support a Registered Nonprofit Organization, please go to the Philanthropic Requests epic and open a new issue using the Monetary_Support Template. Please tag your manager to approve the request if you are submitting on behalf of your department. If you are submitting a request on behalf of a TMRG or DIB, please add Sherida McMullan as a reviewer.\nPlease allow a minimum of 10 working days for review. Once all necessary approvals have been documented for the charitable contribution request, if the donation is >$5,000, the requester will need to set the recipient up in Coupa and follow the PO process in order to issue payment. Please create a purchase request in Zip to get the organization registered and to process payment. If the donation is equal to $5,000 or <$5,000, please contact AP@gitlab.com to process payment as an exception to the PO process. Please note that if it is a new recipient that we have not paid before, an invitation to register in Coupa will be sent to the main contact on file to get their payment & tax information set up in the system.Please note that the requester is responsible for contacting the AP team to make the donation. Once the donation is made, the requester should close the issue. If the requester needs assistance with the payment, contact the ESG team. GiveLab is GitLab\u2019s Team Member Volunteer Program. The GiveLab Program lives under the ESG Team and is a part of GitLab\u2019s overall ESG strategy and program development. The term GiveLab encompasses all Team Member Volunteering initiatives at GitLab. GitLab encourages team members to take part in volunteer initiatives that support their local communities, participate in virtual volunteer activities, and organize volunteer activities as part of team events and get togethers. Team members may self organize volunteer events at any point throughout the year. To submit a request for a team volunteer activity with a Registered Nonprofit Organization that isn\u2019t on the current GiveLab Nonprofit Directory, please go to the Philanthropic Requests epic and open a new issue using the Volunteer_Support Template. Team members can also request support from the ESG Team to organize local or virtual volunteer opportunities on their behalf by going to the Philanthropic Requests epic and opening a new issue using the Volunteer_Support Template. Please write \u201cyes\u201d for the question, \u201cWould you like the ESG team\u2019s help organizing the volunteer activity?\u201d All team members and volunteer activities must adhere to the GitLab Philanthropy Policy. Team members must follow GitLab\u2019s paid time off (PTO) policy if volunteering during work hours and use the \u201cpublic service/volunteer\u201d option in Workday. If volunteering in person, team members may incur some expenses. For calendar year 2024, team members can expense up to a total of $25 for expenses incurred that meet the allowed for reimbursement criteria. All expenses should be submitted in Navan using the \u201cGiveLab\u201d classification. Please note that GitLab does not allow team members to travel to in-person volunteer events. All in-person volunteering should be local to the team member. As with all company expenses, team members must be thoughtful in spending the company\u2019s money and use best judgment to ensure that all expenses are deemed \u201cordinary and necessary.\u201d Team members should follow all team member expense responsibilities. Expenses allowed for reimbursement (for in-person volunteer events): Expenses not allowed for reimbursement: As with our unique ways of working, GitLab and its team members have identified and sought out opportunities for impact that speak not only to our values but also to our all-remote nature. To review previous opportunities that team members participated in, visit the historical activities page. Add this content to the GiveLab section on the ESG page GiveLab 30 Days of Impact is GitLab\u2019s first annual volunteer campaign created to encourage team members to foster connections, build trust among one another and embody our CREDIT values while positively impacting our communities. We have designed this program with our high-performing team culture and results for customers in mind. GiveLab 30 days of Impact will run from 2024-11-12 through 2024-12-12 and our goal is to encourage as many team members as possible to volunteer over the course of 30 days. Throughout the month, team members can volunteer as little as one hour of their time to make an impact. We understand that our team members are driven by many different factors, and we welcome that volunteer participation will look different for everyone. Through GiveLab 30 days of Impact we aim to offer many different ways for team members to get involved such as: While GitLab encourages year-round volunteerism through GiveLab, GiveLab 30 days of Impact centralizes our efforts into an annual campaign to have a larger collective impact over a specific timeframe. Corporate volunteerism has been proven to be an effective strategy for boosting engagement, improving employee retention, and strengthening relationships at work.\nAdditionally, this program offers volunteering opportunities around a major holiday season in many parts of the world, a time when many are seeking opportunities to give back. Below you\u2019ll find information on our GitLab-sponsored virtual events, what\u2019s to come on some local in-person volunteer events, and ideas on how to volunteer as a team or individually. Virtual GitLab-sponsored volunteer events are open for all team members to join, and are scheduled across different time zones and regions to offer flexible options in choosing an activity to participate in. By signing up for a virtual event, you\u2019ll receive a calendar invite and a Know Before You Go document outlining all preparation details. Additional virtual volunteer events may be added, check back for details. SuitUp programs empower students to discover their passions through experiential learning opportunities and mentorship alongside corporate volunteers. There are two types of opportunities available with Suit Up: Necessary volunteer skills: No technical skills are required to volunteer. Volunteers should feel comfortable in sharing their career journey guidance and/ or providing feedback and coaching to students. Dates: 2024-11-13, 2024-11-21, 2021-12-3, and 2024-12-10. Sign up here. Time commitment: 1-2.5 hours Regions supported through volunteerism: US & EMEA Each year, disasters around the world kill nearly 100,000 and affect or displace 200 million people. Many of the places where these disasters occur are literally \u2018missing\u2019 from open and accessible maps and first responders lack the information to make valuable decisions regarding relief efforts. Missing Maps is an open source, collaborative project in which volunteers help map areas where humanitarian organizations are working to meet the needs of people who live at risk of disasters and crises. During this volunteer event, The Red Cross will guide volunteers through mapping an area of need within a live group virtual setting. No special skills are necessary and a brief training will be provided during the volunteer session. Necessary volunteer skills: No technical skills are required to volunteer. Volunteers will be required to create a Missing Maps account to participate, and user experience is best when completed through the app/ phone. Date: 2024-12-5. Sign up here. Time commitment: 1 hour Regions supported through volunteerism: TBD by Missing Maps based upon the open source projects currently open. Hospital visits and medical treatment lead to significant mental and physical stress in children. Studies have shown that listening to an audiobook could be effective in alleviating fear and anxiety for children during treatment or while at the pediatric care center. For this event, volunteers will audio-record short stories and poems for children undergoing treatment. The audiobooks will be available at the nonprofit\u2019s center as a source of comfort and engagement over the course of their treatment. Necessary volunteer skills: No technical skills are required to volunteer. Volunteers should feel comfortable reading aloud in a private setting. This event will currently be held in English, however if there are enough volunteers who prefer to record the books in Japanese, we will offer that as an alternative opportunity. Date: 2024-12-5. Sign up here. Time commitment: 1 hour Regions supported through volunteerism: APAC Resumes reviewed by skilled professionals empower youth by helping them showcase and communicate their skills to potential employers more effectively. They offer a valuable resource typically unavailable to those from underserved backgrounds and foster equal opportunities in the job market. Volunteers will review the resumes of youth to provide tips on industry-standard best practices and help enhance their resumes. Necessary volunteer skills: Spanish speaking and writing is required for participation in this activity. Date: 2024-12-10. Sign up here. Time commitment: 1 hour Regions supported through volunteerism: LATAM This exercise is designed to help students build confidence and develop essential problem-solving skills, while the user-friendly and inclusive nature of Scratch makes coding approachable for everyone. Volunteers will create a repository of ten engaging scratch coding exercises to inspire middle school students to explore computer science concepts. These problem statements will then help ignite curiosity and empower students to explore fundamental concepts in a fun and accessible way. Necessary volunteer skills: No technical skills are required to volunteer. Goodera will guide volunteers during this session and will provide templates, samples and resources for volunteers to create the scratch cards. Date: 2024-11-20. Sign up here. Time commitment: 1 hour Regions supported through volunteerism: APAC Engage with Senior Citizens who are presently in a nursing home or institutional care setting, often a place where residents can suffer from social isolation. In this volunteer opportunity, volunteers will foster connections and engage in meaningful conversations and activities with a group of Senior Citizens, guided by Goodera. Necessary volunteer skills: No technical skills are required to volunteer. Date: 2024-12-4. Sign up here. Time commitment: 1 hour Regions supported through volunteerism: APAC In-person opportunities can be organized by the GitLab ESG team, GiveLab Champions, and team members. If you would like to organize an in-person opportunity, please open an issue and reach out to April Skeete in the #givelab slack channel. The following locations have plans to host a volunteer event, and as additional opportunities are confirmed they will be added and promoted within the location-specific slack channel. We\u2019ve curated a list of eligible nonprofits with open volunteer opportunities in the cities where we have larger numbers of team members. Team members can facilitate conversations directly with the nonprofits to learn about current needs. Please open an issue and reach out to April Skeete in the #givelab slack channel Many of you already volunteer in your community and we want to capture how you make an impact. If you already utilize PTO to volunteer, follow the instructions on requesting time off and adding \u2018volunteer time\u2019 as the reason and join the #givelab slack channel to share your story! At GitLab, our mission is to enable everyone to contribute to and co-create the software that powers our world. This, together with our values, is at the core of how we manage our business, including our approach to Environmental, Social, and Governance and our ESG programs such as GiveLab. Contributors to GitLab \u2014 the platform and the company \u2014 make up the GitLab community and are fundamental to GitLab\u2019s strategy and mission. Team members who wish to volunteer their time contributing to GitLab help live our mission and contribute to the open source community. All GitLab volunteer activities must support registered nonprofit organizations that align with our values and our GitLab Philanthropy Policy. A \u201cRegistered Nonprofit Organization\u201d is one that has been registered with the local government or authorized agency within its applicable local, state, provincial, federal, or national government. Team member participation is voluntary, should not interfere with work commitments, and time off is required to be in alignment with GitLab\u2019s PTO policy. Travel is not permitted for this program. Team Members may choose to volunteer virtually or through local in-person events. Volunteer events typically last between one and four hours.\nManagers play an important role in supporting team members in taking time for themselves and their families, while also ensuring accountability to results and coverage for teams and its goals. Our Results for Customers value sits at the top of our values hierarchy, and our PTO policy  empowers managers to appropriately manage workloads and deliverables, while also giving team members the time away they need from work. Team Members taking time off to volunteer should communicate time off in advance with their manager. To request volunteer time off, follow the Paid Time Off procedures outlined in our handbook and reach out to People Connect via HelpLab should you have any concerns. A step-by-step guide on how to request paid time off can be found here. Note that when following along with this guide, during \u201cStep 8\u201d there is a section listed as \u201cReasons\u201d, and here you should select \u201cVolunteer Time Off\u201d from the dropdown options. Note that at this time, entering your paid time off requests labeled as \u201cVolunteer Time Off\u201d can only be completed by submitting your request within Workday, and not the Workday Slack App. Please see our GiveLab reimbursement policy to understand current allowances as they relate to volunteering costs. Surveys will be sent to team members following their volunteer participation and we additionally welcome all feedback around this volunteer program as we aim to continue improving GiveLab 30 Days of Impact following the first iteration. We appreciate the internal stakeholders who have provided initial input to include relevant program considerations such as the People Team, PBPs, Finance, DIB & TMRGs and EBAs. Additionally, we\u2019ll continue to incorporate considerations from our GiveLab Champions, who sit within various departments across the company. Join the #givelab slack channel We have created an internal GiveLab Volunteer Directory that features a list of vetted nonprofit organizations with available volunteer opportunities. Team members can search the document for virtual volunteer opportunities, opportunities to volunteer with GitLab Foundation grantees and search for local opportunities. We encourage all team members to contribute to our GiveLab Volunteer Directory. To recommend a nonprofit organization to add to the Directory, please open a Volunteer Recommendation Issue. GiveLab Champions overview The GiveLab Champions are team members who are passionate about giving back to their communities and want to encourage other team members to do the same. GiveLab Champions self-identify to participate in the voluntary Champions group, managed by the ESG team. The GiveLab Champions help activate the GiveLab signature program (launching Fall of 2024), but also work to organize and promote volunteer opportunities year-round. The importance of GiveLab Champions GiveLab Champions help team members build trust through social connections, build connections within their communities, and help GitLab provide meaningful opportunities for team members to give back. The GiveLab Champions ensure global voices are heard and relevant causes are represented based on where team members live. GiveLab Champions help to make GitLab a better place to work. Team member benefits of volunteering GiveLab Champion responsibilities Time commitment The time commitment for a GiveLab Champion is estimated to be 3-5 hours per quarter. Participation can vary throughout the year. Selection criteria Selection process GiveLab Champions By Division Engineering Finance Legal & Corporate Affairs Marketing People Product GitLab for Nonprofits GitLab for Nonprofits is an in-kind donation program that provides licenses and seats at no cost to eligible Registered Nonprofit Organizations. GitLab for Nonprofits operates on a first come first served basis. Once the annual donation of 5,000 seats is met, the application will remain closed for the year. FAQs What are the benefits of the GitLab for Nonprofits program? GitLab is a single platform for project management, collaboration, source control management, git, automation, security, and much more. Because it is easy to use, flexible, and all in one place, it is the best choice for nonprofits to scale their work. The GitLab for Nonprofits Program gives free licenses of GitLab to registered nonprofit organizations. Nonprofits accepted into the program will be provided a free Ultimate license for one year (SaaS or self-managed) for up to 20 seats. Additional seats may be requested although they may not be granted. Who qualifies for the program? GitLab supports Registered 501c3 (or jurisdictional equivalent) Nonprofit Organizations in good standing that align with our Values. A \u201cRegistered Nonprofit Organization\u201d is one that has been registered with the local government or authorized agency within its applicable local, state, provincial, federal or national government. GitLab prioritizes Registered Nonprofit Organizations that help advance GitLab\u2019s social and environmental key topics that were defined in GitLab\u2019s 2022 materiality assessment. GitLab\u2019s current social and environmental key topics are: For the calendar year 2024, we will limit the in-kind program to 5,000 seats, which was approved by finance and the board in the Philanthropy Policy. Each organization will be eligible for up to 20 seats. This will allow us to assist as many organizations as possible. This will be revisited throughout the year and adjusted as needed. Interested organizations who are new customers may request additional seats although the request may not be granted. To limit churn, current GitLab customers that apply to transition to the Nonprofit Program will not be granted a special request above the 20 seats. What are the terms of the GitLab for Nonprofits program? Upon acceptance, program members are subject to the GitLab Subscription Agreement. The decision to issue a GitLab for Nonprofits license is always at the sole discretion of GitLab. How does someone apply? Interested organizations need to visit the GitLab for Nonprofits page and submit the application form. How are applications processed? Must Nonprofits renew their memberships? Yes. All nonprofits must renew their membership annually, which involves a re-verification process. Nonprofits will submit for renewal the same way they first applied for the program. Where can members receive support? While GitLab for Nonprofits Program benefits do not include product support, program members can receive help with GitLab in a number of ways. In general, we recommend the following: I\u2019m a GitLab Team Member and I have a customer applying for the program. What do I do? At this time, GitLab does not offer a matching gifts program. For requests related to GitLab Membership of Association, Program or Organization, and includes terms, conditions and/or obligations on GitLab that must be executed, please follow the below process.\nOpen an issue using the Membership Request Issue Template. Complete and attach the necessary information. Note: If you are submitting a request on behalf of a TMRG or DIB, please add Sherida McMullan as a reviewer NOTE: For any request(s) that require payment, please be certain to follow applicable ESG & Procurement processes. Six key topics were identified in GitLab\u2019s materiality assessment. These key topics will drive GitLab\u2019s ESG strategy and program development. This page will continue to be updated as we make progress towards developing plans and programs to advance our ESG goals.  Here are GitLab\u2019s current key topics with their drivers: Please read our ESG report to learn about our progress. To learn more about ESG at GitLab, please take our ESG Training course available on LevelUp and in the Handbook. Disclosing our progress through data aligns with our Transparency and Results values. We have a section in our Handbook devoted to Key Performance Indicators (KPIs) where we update our progress regularly. Every part of GitLab has KPIs linked to the company Objectives and Key Results (OKRs). As we build our ESG strategy, we will continue to add and update relevant ESG KPIs to the handbook. Q: Who can I contact for ESG-related questions? A:  Senior Director, ESG/DRI: Stacy Cline - @slcline on GitLab.\nEmail: ESG@GitLab.com. Q: Does GitLab calculate its carbon emissions? A:  Yes, GitLab  measures and discloses its greenhouse gas (GHG) emissions in the annual ESG report. Please view the results of our FY24 GHG inventory here and our third-party assurance letter here. Q: Does GitLab participate in CDP? A: GitLab does not currently respond to the CDP questionnaire. However, we publicly disclose information that closely aligns with the information requested in the questionnaire. We disclose our GHG inventory results, third party assurance letter and our TCFD disclosures in our annual ESG report. We are actively working on setting a GHG reduction target. Please see our FY24 ESG Report, FY24 Performance Data Tables, and TCFD Index for details. Q: Has GitLab set a Science Based Target (SBT)? A: Not yet. GitLab is currently working on setting a reduction target. Q: Does GitLab track employment by gender and ethnicity? A: Yes, view the most recent identity data. Q: Does GitLab set goals to increase diversity? A: Yes, GitLab publishes people success KPIs. Q: How does GitLab define underrepresented groups? A: An underrepresented group describes a subset of a population that holds a smaller percentage within a significant subgroup than the subset holds in the general population. View the full definition here. Q: Is GitLab certified as a diverse supplier? A: GitLab is a publicly traded company (NASDAQ: GTLB) and is not defined as a diverse supplier and is unable to be certified as such, accordingly. Nevertheless, diversity, inclusion, and belonging (DIB) is a core value at GitLab. On a daily basis, we strive to keep our operations, employment practices, and supplier selection in line with this value. GitLab\u2019s DIB team builds an environment where all team members feel a sense of belonging, which results in a truly inclusive and welcoming work environment. Moreover, GitLab\u2019s Procurement team selects potential suppliers with responsible sourcing and diversity in mind. Q: I\u2019m a GitLab team member and I received an ESG questionnaire through an RFP. What do I do? A: Please follow the steps outlined in the RFP process. Q: Does GitLab sponsor/fund nonprofit organizations? A: Through the corporate philanthropy program, GitLab supports registered 501c3 (or country equivalent) nonprofit organizations in good standing that align with our Values. A \u201cRegistered Nonprofit Organization\u201d is one that has been registered with the local government or authorized agency within its applicable local, state, provincial, federal, or national government. GitLab prioritizes financial contributions to organizations that align with our values, support our environmental and social goals, and help us advance our mission to make it so that everyone can contribute. We endeavor to build long-term partnerships with community organizations and avoid a transactional approach to our corporate giving. Our current social and environmental focus areas are: Monetary contributions are initiated by the request of our team members and TMRGs, and the process can be reviewed here. Q: Does GitLab donate its product to nonprofits? A: Through GitLab for Nonprofits, GitLab donates up to 5,000 seats annually to Registered Nonprofit Organizations. Interested Registered Nonprofit Organizations are required to apply and will be vetted for registration and standing status. Licenses are donated on a first come first serve basis and the number of seats to be donated within a fiscal year is reviewed annually by the ESG Team, the FP&A Business Partner, and Chief Legal Officer. Please review our Nonprofit program application for further details.\nPlease see GitLab\u2019s Trade Compliance Policy Handbook for a list of embargoed countries. Registered Nonprofit Organizations in embargoed countries are not eligible for the in-kind donation program. Welcome to GitLab\u2019s inaugural Environmental, Social, and Governance (ESG) report. ESG has been an integral part of GitLab\u2019s business and culture, even before we explicitly used the term \u201cESG.\u201d Our approach to ESG aligns with our Values. This can be seen in the management and oversight of our business and in the way we have managed risks and opportunities related to our team and our wider community. It is also evident in our customer-centric approach, our all remote philosophy, the development of our products, and our being an intentional force for good."
    },
    {
        "title": "Legal Operations",
        "url": "https://handbook.gitlab.com/handbook/legal/legalops/",
        "content": "The Legal Operations Team is responsible for supporting Legal Team processes with a focus on defining and driving initiatives that improve the team\u2019s efficiency and effectiveness. Check out the Legal Operations Portfolio to learn more about our active projects. The Legal Operations Team manages the Legal Tech Stack \u2013 the tools used by the rest of the GitLab Legal Team. (Note that the tech stack document is accessible to GitLab Legal Team Members only.) For information on GitLab\u2019s Procurement Team, policies, and processes, visit the GitLab Procurement Team handbook. Use the Procurement Guide: Collaborating with GitLab Legal to learn about how Legal assists and interacts with the procurement of products and services. Processes: The purpose of this process is to streamline receiving and tracking invoices and accruals for outside counsel vendors. For more information about invoicing and payment, see the Accounts Payable handbook. This process is designed to enable LACA team members to submit requests related to attending events/conferences, furthering development, or purchasing tools/software funded by LACA. This process does not apply to equipment, Individual Use Software or other personal reimbursement requests."
    },
    {
        "title": "GitLab Privacy",
        "url": "https://handbook.gitlab.com/handbook/legal/privacy/",
        "content": "The Privacy Team is part of the Legal and Corporate Affairs Team. We provide support and guidance to uphold consistent business processes around the proteciton of personal data as it relates to GitLab customers, users, Team Members, and other natural persons. We collaborate cross-functionally and serve as advocates to ensure that the data privacy practices of GitLab meet the needs of our cross-functional partners and are continually balanced with an ever-changing global data privacy and protection landscape. Slack channel - #legal is the best place for questions relating to our team that do not require legal advice, deliverables, or any discussion of confidential information. For issues that require action from the Privacy Team, apply the label Privacy::Intake. This will update the Privacy_Legal Issue Board and allow the team to triage the issue appropriately. We also use the following labels: For sensitive, private, or confidential requests email legal_internal@gitlab.com. Please do not send emails to this address for engineering, marketing, sales or procurement requests. These should be directed to #legal or an issue should be created in the Legal and Compliance project. Tell people what you are doing with personal data and why you are doing it so that the person can make an informed decision about whether they want to allow it to happen. Do not be creepy about what personal data is collected or how it is used and do not change the way personal data is used without first giving people notice and an opportunity to object, or, where required, obtaining prior consent. Make it easy for people to tell us their privacy preferences and honor those preferences even if they change over time. Build a product or service that has privacy-focused settings turned on by default and let the consumer decide if and when they want to change that. Transparency is a core value and every team member is responsible for the proper collection and use of personal data consistent with our Privacy Statement. Anonymization The process of permanently and irreversibly altering personal data in a way that it is no longer capable of being related back to a specific individual. Consent A freely given, specific, informed and unambiguous indication of an individual\u2019s wishes. Consent is captured by an unticked checkbox or other unequivocal statement which signifies agreement to the processing of personal data before or at the time of collection. Data Classification A method of determining types of data associated by risk. See GitLab Security Data Classification Standards for more information. Data Controller A natural or legal person, agency, or other entity which alone, or jointly with others, determines the purpose and means of processing personal data. For example, GitLab is a Data Controller is in the areas of marketing and sales where the personal data of prospects and leads is managed solely at our discretion. GitLab also serves as a Data Controller for all personal data collected from Team Members for employment purposes and any administration of benefits. Data Processor A natural or legal person, agency, or other entity which processes personal data on behalf of a Data Controller. GitLab acts as a Data Processor when we manage personal data native to a Customer\u2019s instance or namespace.  GitLab acts as a Processor in these situations because the Customer is the ultimate owner of the data it submits to the service offerings, and our contracts servce as Customer\u2019s instructions to GitLab regarding the processing of their data. Data Subject An identified or identifiable natural person. Data Subject Rights Rights granted to individuals in relation to personal data or information processed about them.  Because Data Subjct Rights are instrumental to the privacy and protection of data subjects, many of these rights are codified under global privacy legilsation, such as the GDPR, CCPA, and LGDP. If a business processes personal data pursuant to certain bases such as consent or legitimate interest, then a data subject may assert one of its fundamnetal rights and a business is obligated to respond under law.  The rights granted vary slightly by country, region, province or state. GitLab treats all users and Team Members the same and will respond to a data subject request from any individual user or team member even if they live in a country, region, or state/province without specific data protection laws. Expand the following section for more information about the data subject rights available. Right of Access A request seeking access to the specific pieces of personal data that have been collected and used by a Data Controller. Right to Correct A request asking for inaccurate or incomplete personal data to be corrected. Right to Delete A request which seeks the erasure of personal data relating to the data subject. Deletion requests must meet certain conditions and businesses are not required to delete any personal data that is processed to meet legal obligations, including that data which may be processed in pursuit or in defense of claims. Right to Portability A request where the data subject wants to transfer their data to another Data Controller; typically seen when the individual changes service providers that share a compatible electronic filing system. Right to Restrict Processing This is a request for the Data Controller to stop processing personal data under certain circumstances. This may also include a request to limit the use and disclosure of Sensitive Personal Data. Right to Object A request to opt-out of all data processing or specific processing of personal data based on consent or legitimate interest. Generally this is a request to opt-out of processing for targeted advertising, which includes the sale or sharing of personal data for profiling or cross-context behavioral advertising. Right Not to be Subject to Fully Automated Decisions This is a request that the data subject not be subjected to a decison based solely on automated processing, including profiling, which would have a significant legal impact. An example might be an algorithm that excludes someone of a certain race from obtaining a credit card. DPIA A Data Protection Impact Assessment is a method to review and document identified privacy compliance risks, as well as evalute higher risks to the rights and freedoms of individuals, including any that pose potential for significant harm. Learn more about GitLab\u2019s process for completing DPIAs here. Personal Data Any data, individually or when combined with other data, that identifies, relates to, describes or is reasonably capable of being associated with or linked to an identifiable natural person (a \u2018data subject\u2019), whether directly or indirectly. See also, Sensitive Personal Data. Privacy by Default A concept that should be implemented at the product development stage and uses appropriate measures to ensure that, by default, the only personal data processed is what is truly necessary. In practice, this means a user\u2019s privacy settings prioritize privacy in their default state. Privacy by Design A concept which focuses on intentionally designing a product that incorporates foundational privacy principles and ensures that Controllers and Processors are able to fulfill data protection obligations. This may include appropriate technical and organizational measures such as pseudonymisation and encryption. Pseudonymization The process of altering personal data so that it can no longer be attributed to a specific individual without the use of additional re-identifying information.  In order to practice successful Pseudonymization, the re-identifying information should be kept separate from the pseudonymized data. Publicly Available Personal Data Refers to personal data that is publicly available from federal, state, or local government records or made manifestly public by the data subject. Under limited data privacy laws this may also include personal data made public through widely distributed media. Sensitive Personal Data Data that is particularly personal and intimately tied to the core identity of a person. This type of data generally includes racial or ethnic origin, political opinions, religious or philosophical beliefs, trade union membership, genetic data, biometric data, data related to health, data related to sex life or sexual orientation, criminal offenses, and citizenship/immigraion status.  In some jurisdictions, Sensitive Personal Data includes government identifiers and financial data. Every vendor that handles personal data is required to go through a Privacy Review prior to being onboarded, which includes completion and approval of the privacy due diligence questionnaires detailed in the Procurement process. Certain vendors who are classified as handling red or orange data under our Data Classification Standards are reviewed annually. Additionally, when new product features are designed, there are times when a formal privacy review is required. This section outlines the process for these reviews. For Third-Party Risk Acceptance, any Moderate/High risk requires VP and/or above approval Anytime a new feature or a change to an existing feature is planned, Product Managers and Engineering Managers should evaluate if the planned development presents a legal risk where personal data is involved. If Personal Data is impliciated, utilize the Legal Risk Checklist and Workflow (internal only) GitLab Team Members are required to complete annual training which covers general privacy practices worldwide. The goal of annual training is to ensure that Team Members understand what personal data is and how to handle it to ensure that GitLab maintains the trust our customers have placed in us as well as to ensure that GitLab remains compliant with frequently changing legal and regulatory obligations. Under various global data privacy laws (for example, GDPR and CPPA), GitLab users have the right to request that GitLab provides you with information about the personal data GitLab has about you. Users also have the right to request deletion of their personal data and complete removal of their GitLab.com account in accordance with these laws. Though the laws apply only to individuals in certain geographic areas, GitLab accepts requests for data access, correction and deletion from all of our users worldwide."
    },
    {
        "title": "Product",
        "url": "https://handbook.gitlab.com/handbook/legal/product/",
        "content": "The guidance for using open source software has been updated to enable team members to comprehensively determine which open source license types are pre-approved (deemed acceptable) for use, and which require prior review by the Legal & Corporate Affairs team (as their use may be unacceptable). Team members wishing to use open source software should now refer to the comprehensive Blue Oak Council license list, and proceed, as follows: Team members must ensure that we comply with all requirements and restrictions associated with the applicable license (these are typically defined in the body text of the license). If you\u2019re contributing to an open source project on behalf of GitLab, you may be required to enter into a CLA. In accordance with the Authorization Matrix Policy, Legal approval is required to you enter into a CLA on behalf of GitLab. If you have the choice between a Corporate and Individual CLAs, opt for the Corporate CLA. Follow these steps to obtain legal approval and enter into a CLA on behalf of GitLab: Contributions to a third-party project on behalf of GitLab should be made using your @gitlab.com email address. We are continuing to develop our policy and workflow around CLAs on behalf of GitLab contributors. See related issue here. For any questions in the meantime, please post to the #legal Slack channel. Alternatively, if looking for information on contributing to GitLab see here. GitLab has established guidance to aid with determining authorship of academic papers developed at GitLab. This guidance is accessible to team membery only here The purpose behind this initiative is to ensure consistent and fair licensing enforcement for breaches of certain licensing terms, in order to support the continued growth of the open source community. Further information on this initiative is available here. GitLab\u2019s GPL Cooperation Commitment follows: Before filing or continuing to prosecute any legal proceeding or claim (other than a Defensive Action) arising from termination of a Covered License, GitLab commits to extend to the person or entity (\u201cyou\u201d) accused of violating the Covered License the following provisions regarding cure and reinstatement, taken from GPL version 3. As used here, the term \u2019this License\u2019 refers to the specific Covered License being enforced. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. GitLab intends this Commitment to be irrevocable, and binding and enforceable against GitLab and assignees of or successors to GitLab\u2019s copyrights. GitLab may modify this Commitment by publishing a new edition on this page or a successor location. Definitions \u2018Covered License\u2019 means the GNU General Public License, version 2 (GPLv2), the GNU Lesser General Public License, version 2.1 (LGPLv2.1), or the GNU Library General Public License, version 2 (LGPLv2), all as published by the Free Software Foundation. \u2018Defensive Action\u2019 means a legal proceeding or claim that GitLab brings against you in response to a prior proceeding or claim initiated by you or your affiliate. GitLab means GitLab Inc. and its affiliates and subsidiaries."
    },
    {
        "title": "Risk Management and Dispute Resolution",
        "url": "https://handbook.gitlab.com/handbook/legal/risk-management-dispute-resolution/",
        "content": "The Risk Management and Dispute Resolution (RMDR) division of GitLab Legal and Corporate Affairs (LACA) is responsible for informing and guiding GitLab\u2019s risk management strategies as well as managing internal and external investigations, litigation and other dispute resolution. We seek to support resolution across a wide range of topics, including responding to subpoenas and discovery requests, drafting and revising legal documentation, managing investigations and negotiating and drafting agreements. It is our goal to proactively address and resolve these matters in support of GitLab\u2019s business objectives, coordinating with internal business partners across the company whenever appropriate. In support of these goals, we adopt this mantra: if you see something, say something! There are times when GitLab team members must immediately consult with RMDR to ensure that GitLab is managing its legal risks effectively. These include: If in doubt, please involve RMDR earlier rather than later \u2013 we would always rather be proactive than reactive. You can reach out to RMDR via rmdr@gitlab.com. Privileged communication is communication, written or oral, that is protected from later disclosure in litigation because it was conveyed to the attorney in confidence by a client for the purpose of seeking legal advice or by an attorney for the purpose of giving legal advice. Privilege can also be asserted over certain confidential documents created by attorneys for the same purpose. The terminology differs depending on the jurisdiction. For example, in the United States, the privilege is generally referred to as \u201cattorney-client privilege\u201d for communications made to or from an attorney for the purpose of providing legal advice or \u201cattorney work product\u201d for communication or documentations created in relation to actual or anticipated litigation. In many of our EMEA and APAC countries, it may be called \u201cclient legal privilege,\u201d \u201clegal professional privilege,\u201d \u201clegal advice privilege,\u201d or \u201clitigation privilege.\u201d Additionally, the scope of the privilege differs by country. It is therefore likely that the status of a privileged communication that contains legal advice in respect of foreign law will be determined by reference to the law of the country in which any action is taken.  If you have jurisdiction-specific questions about privilege, please contact a LACA team member who sits in that jurisdiction. Practically speaking, this means that communications between our team members and members of LACA are not necessarily privileged just because a member of the LACA team is involved. As a threshold matter, the LACA team consists of both attorneys and non-attorneys. Communications may be privileged if the person wishing to assert the privilege can establish that the communication was made to an attorney of the LACA team and the dominant purpose of the communication was to seek legal advice. Conversely, if the dominant purpose of the communication - even if made to an attorney - is simply to seek business advice, it is very unlikely to be privileged. Additionally, otherwise privileged communication will lose its privilege in most circumstances if it is further or also disclosed to third parties. Thus, team members should always be aware of who has access to the communication and should be very careful about forwarding it. What are some tips for team members to follow to help maintain privileged communication? Below are the steps you can take to help ensure that any communications you have with GitLab\u2019s LACA team can be considered privileged: For more information, please see the internal handbook here. A legal hold is the process GitLab uses to preserve all forms of relevant evidence, whether it be emails, instant messages, physical documents, handwritten or typed notes, voicemails, raw data, backup tapes, and any other type of information that could be relevant to an investigation, pending or imminent litigation or when litigation is reasonably anticipated. Legal holds are imperative in preventing spoliation (destruction, deletion, or alteration) of evidence which can have a severely negative impact on a company\u2019s case, including leading to sanctions. Once GitLab becomes aware of an investigation or potential litigation, a GitLab attorney will provide notice to the impacted team members, instructing them not to delete or destroy any information relating to the subject matter of the investigation or potential litigation. The legal hold applies to paper and electronic documents. During a legal hold, all retention policies must be overridden. Your obligation to follow the procedures outlined in the notice continues until the hold is lifted, even if you depart the Company. If you depart the Company, all Company owned devices and any material you are holding in accordance with any active Legal Hold Notice or active Company investigation should be turned over upon your departure."
    },
    {
        "title": "Trade Compliance",
        "url": "https://handbook.gitlab.com/handbook/legal/trade-compliance/",
        "content": "Trade control laws, which often consist of sanctions, export controls, and import laws, govern how and under what circumstances technology, software, and technical assistance may be exported. Trade control laws vary from country to country but usually exist to protect national security and further foreign policy and economic interests. Under United States law, exports, re-exports, and transfers, can take many forms, including oral, written, and visual disclosure, physical shipment, and electronic transfer or transmission. An export can also occur when technology, software, or technical assistance is transmitted to U.S. nationals abroad, or to non-U.S. nationals located within the United States. The export of certain software, technology, or technical assistance to certain countries, certain end users, or for certain end uses, may require authorization from the United States government prior to export, re-export, or transfer. GitLab Enterprise Edition, related technology, and services (collectively, \u201cGitLab Software\u201d), are subject to the Export Administration Regulations (\u201cEAR\u201d), administered by the U.S. Department of Commerce, Bureau of Industry and Security (\u201cBIS\u201d), and various sanctions programs administered by the U.S Treasury Department\u2019s Office of Foreign Assets Control (\u201cOFAC\u201d). The GitLab Community Edition is freely available to the public and is not subject to the EAR. GitLab continuosly monitors developments to these regulations to maintain compliance and to leverage any opportunity to broaden access to GitLab in a compliant manner that allows everyone to contribute. The GitLab Software has been classified via CCATS G178430 as a 5D992.c mass market encryption product with eligibility for export to most destinations under 15 CFR 740.17(b)(1) of license exception ENC. GitLab users may not export, re-export, or transfer GitLab Software, without first obtaining authorization from the U.S. government, to (a) any U.S. embargoed country including but not limited to Cuba, Iran, North Korea, Syria, Russia, Belarus, and the Crimea, Donetsk, and Luhansk regions of Ukraine, (b) any party identified on OFAC\u2019s Specially Designated Nationals and Blocked Person list or the Department of Commerce Denied Persons, Entity, or Unverified lists, or (c) for end use involving sensitive nuclear, rocket systems, unmanned aerial vehicles, missiles, chemical or biological weapons, or for any other end use prohibited by 15 CFR 744. GitLab provides this information, which is subject to change without notice, to facilitate GitLab users\u2019 compliance with applicable trade control law. GitLab users remain solely responsible for exporting, re-exporting, and transferring GitLab Software and any user-developed content in accordance with those regulations and should seek legal counsel as necessary."
    },
    {
        "title": "Handbook Development",
        "url": "https://handbook.gitlab.com/docs/development",
        "content": "The handbook site uses Hugo for static page generation\nfrom Markdown. The handbook uses a base theme called Docsy. A custom theme override\nis located in the Docsy GitLab Theme\nproject and automatically included in the handbook setup. For help and support with the development environment, please reach out in the public\n#handbook Slack channel. If you encounter a problem or bug, please open an issue or MR in the respective handbook projects. Follow the editing the handbook documentation. The Markdown files get parsed by Hugo, and converted into static HTML files, including all assets (JS, CSS, images, etc.).\nThe static files are uploaded to GitLab Pages. There are four internal projects and one external project used in the process of building and deploying the internal and external handbooks. Review the Hugo development documentation to learn more. To minimize maintenance, a small number of group and project access tokens are used.\nThis overview is not meant to be a comprehensive list. Search in this and other development documentation pages for details on the individual access tokens. A \u201czap\u201d (internal) (use shared 1Password sign in) has been configured with a group level webhook to notify the #handbook-escalation channel. Due to its reliability, you may want to consider creating an issue, or some other reminder. The handbook monitor project runs a pipeline every 10 minutes (see pipeline schedule) to check if the handbook is \u201cup\u201d using hurl. If the job fails, the pipeline will post to the #handbook-escalation Slack channel. Note: Internal handbook is not monitored in this way as there is a blocking issue. See internal-handbook#90.\nSimilarly, the request for integrating the handbook to infra\u2019s monitoring is pending. See docsy#14 for more information. Notices are also posted in that channel when pipelines fail on the main branch of the handbook projects. Supported methods: Cloning the repository allows you to manually edit the handbook locally. If you prefer to use the Web IDE, please continue reading the editing the handbook documentation. We recommend using git to clone the repository and then editing the handbook with a text editor such\nas Visual Studio Code, Typora,\nNova or Sublime to name a few. Clone the repository: Public handbook: Internal handbook: Docsy GitLab theme: After cloning the repository, sync the required data files from the\ndata file location (currently the www-gitlab-com repository).  Without this\nstep, the handbook cannot be run locally. Open a terminal, navigate into the cloned handbook repository path, and run the sync-data.sh script. Example for the public handbook: Hugo needs to be run to generate the static files from the handbook markdown content. When installing Hugo, review the CI file of the relevant handbook repository for the version of Hugo in use. The latest version may or may not work. There are two ways to run Hugo: The handbook is huge, and by default, the hugo server command loads everything to memory. The following options for the hugo command can be helpful for debugging or otherwise running locally: To render the entire site to disk (and inspect the output in ${PWD}/public),\npurge the generated files first, and then run Hugo. For some pages to render you may need a personal access token.\nGenerate one and export it as an environment variable prior to running hugo commands: If you need to make changes to the underlying theme you\u2019ll need to make changes in the Gitlab-Docsy module. To enforce rules and guidelines, we use: Once an error is encountered, the relevant job fails and a comment is added to the merge request with a list of errors, with guidance for the suggested fix.\nWarnings and suggestions are not reported in the comment, but are in the code quality report. Currently, all configuration and script files exist in each repository. See configuration file sync issue. The custom handbook lint script (handbook version) is used to verify a number of the guidelines we have, including: We use Hugo lint to check for the validity of internal links. It supports relative linking to the markdown file, and the production path. Each job also outputs the top 30 incorrect links to assist in fixing them. See the ReadMe for more information about how Hugo lint works. Refer to the markdown guide for style guide information, and guidance on rules. We use markdownlint-cli2 in our pipelines with a slightly customized set of rules.\nBefore pushing any changes, you can run markdownlint-cli2 and fix any suggested changes to avoid pipeline failures. To run markdownlint-cli2 using Docker, run: If you have markdownlint-cli2 installed locally, you can run the command in the relevant repository.\nThis method is recommended when editing the config file (look for the markdownlint file), and testing the changes. To have markdownlint automatically fix some errors,\nadd the fix option: Rules are configured to be close to the GitLab documentation markdownlint, without some of the stricter styling rules.\nThe relevant rules are also noted in the markdown guide. We use Vale to verify some of the rules in the Handbook Markdown Guide. Vale errors will fail the pipeline and are included in the MR comment.\nWarnings are included in the job log, code quality, and MR diff. To run Vale using Docker, run: If you have vale installed locally, you can test the changes. To limit the results, add the minAlertLevel option, such as: Rules are configured to be close to the GitLab documentation vale rules.\nWhen the gitlab_base rules are exactly the same, they are included in the gitlab_base folder in the content sites repositories.\nWhen the rules differ, they are stored in the handbook folder. Docsy is used as a base for the internal and public handbooks. Modifications\nand extensions have been added on top to ensure efficient handbook usage. All Hugo partials and shortcodes should be added to this repository, instead\nof duplicating them locally into the handbook projects. The Docsy GitLab theme\nis integrated into the public/internal handbook repositories using a Go module in\ngo.mod. To develop on the Docsy GitLab theme locally build the handbook (or internal-handbook) project with the updated local copy of the docsy-gitlab theme following the steps below: Add the following line to the bottom of the go.mod file in the handbook project: Run the Hugo server: Load the site locally: Any changes made to files in local docsy-gitlab project will be rendered in the local instance. When making changes that may have a user impact (not content only changes): Changes made to docsy-gitlab will be made available to the handbook and internal-handbook after the version is bumped and deployed to each project. This includes all theme updates with partials, shortcodes, and any changes to /docs. Much of this process has been automated, but a few manual steps are still required. To release a docsy-gitlab change follow these steps: For more information on the release process, see the release script. Note: Before updating dependencies, review the go.mod file in the target\nproject for additional notes and requirements. Always update dependencies individually to isolate potential bugs and regressions. Never pull latest\nbut pin the dependencies to a specific released version. Do not bump Docsy versions without testing them extensively in MR review apps. You can add redirects to the layouts/index.redirects file in the relevant repository.\nRefer to the GitLab Pages redirect documentation\nfor how these are formatted. Please add your redirect in chronological order with a removal date of: The CI/CD pipelines for the handbook and internal-handbook projects are roughly the same, and should remain that way. The build stage performs a few linter and security jobs (handbooklint, hugolint, markdownlint, and secret_detection), and a build job which builds the whole site and saves it as CI artifacts. The deploy stage uses the artifacts generated in the build stage to deploy the production site for changes to the main branch or review apps which can be deployed for MRs. The notify stage has two jobs that are triggered on specific events: The pipelines can be triggered to run in $BUILD_AND_TEST_ONLY mode which means they will run all the test and build jobs, but none of the deploy or notify jobs. A pipeline can be triggered in $BUILD_AND_TEST_ONLY mode by setting the $BUILD_AND_TEST_ONLY CI variable to true. This is used primarily by the downstream pipelines triggered from the www-gitlab-com project. Tools or scripts that need to interact with the repositories to perform handbook tasks should use the GITLAB_TOKEN CI variable. This is group level access token called Docsy GitLab Release with a developer role and has api and write_repository scopes. This token will expire after a year and will need to be refreshed. Follow the steps below to refresh the token: See above for more on general management of access tokens. The deploy and review apps are configured in the pages job in the .gitlab-ci.yml configuration file. Review app deploys can be run for merge requests by running the manual pages job, or by adding the ~\"deploy-review-app-always\" label to the MR. Production deploys are only run from the main branch. Conditional CI variables are used to configure the environment for review apps using GitLab Pages Multiple Deployments. The route map is configured in the .gitlab/route-map.yml. The CI/CD pipeline for docsy-gitlab is responsible for building, testing, and releasing the Docsy GitLab theme used by both handbook and internal-handbook. The test stage performs the markdownlint, and secret_detection jobs. The build stage performs runs the hugo command to ensure the theme builds successfully. The release stage performs one manual job to create a new release of the theme and merge requests to both handbook and internal-handbook. See the Releases section for more details. The CI/CD pipeline for www-gitlab-com is responsible for triggering downstream builds of both handbook and internal-handbook in $BUILD_AND_TEST_ONLY mode. This ensures that any changes to dependent data files in www-gitlab-com will build successfully for both handbook and internal-handbook. Right now the handbook projects doesn\u2019t use the Reviewer Roulette\nfeature of the danger-review CI/CD component. See issue. We use the architecture plugin to provide guidance on how to review MRs that contain changes to\narchitecture evolution design documents. In order to make Danger post message to MRs we need to setup a project token (api scope with Developer role) and\na CI/CD variable called DANGER_GITLAB_API_TOKEN to contain this project token (Masked but not Protected).\nSee above for more on general management of access tokens. For more details, follow the Danger documentation\nand inspect the MR adding the reviewer roulette to the public handbook. The CI/CD linting jobs generate code quality report artifacts for MR widget integration. If there are errors detected,\na custom CI/CD job posts a Markdown table summary as MR comment, linking to helpful handbook editing resources. The parse-codequality-report.sh script in the handbook and internal-handbook generates the code quality report posted in the MR. Changes to these reports need to be applied to both projects. The code quality report relies on the GITLAB_TOKEN to perform the reporting actions on any MRs. See maintenance tasks. The triage-bot project is meant to help triage issues in the handbook, internal-handbook, and docsy-theme projects.\nIt has two main goals: Please see the .triage-policies.yml for rules.\nYou can find more about how to create policies in the GitLab triage gem project readme. The triage bot is scheduled to run 3 times a week. See the project\u2019s pipeline schedule for details. Triage uses the TRIAGE_BOT access token to perform tasks. This must have the Developer role to take actions on merge requests.\nSee above for more on general management of access tokens."
    }
]