[{
    "title": "GitLab Values",
    "url": "https://handbook.gitlab.com/handbook/values/",
    "content": "GitLab\u2019s six core values are\n\ud83e\udd1d Collaboration,\n\ud83d\udcc8 Results for Customers,\n\u23f1\ufe0f Efficiency,\n\ud83c\udf10 Diversity, Inclusion & Belonging,\n\ud83d\udc63 Iteration, and\n\ud83d\udc41\ufe0f Transparency,\nand together they spell the CREDIT we give each other by assuming\ngood intent. We react to them with values emoji\nand they are made actionable below. \n     \n We take inspiration from other companies, and we always go for the boring solutions. Our CEO, Sid Sijbrandij, has shared the origin of each of the CREDIT values, but\njust like the rest of our work, we continually adjust our values and strive to make them better.\nGitLab values are a living document.\nIn many instances, they have been documented, refined, and revised based on lessons learned (and scars earned) in the course of doing business. We used to have more values, but it was difficult to remember them all. In response, we condensed them, created an acronym (CREDIT), and listed operating principles to guide behavior. Everyone is welcome to suggest improvements. Please assign MRs to update these values to our CEO Sid and @mention him in Slack if you work at GitLab Inc. or on Twitter if you don\u2019t. Driving Results with CREDIT from GitLab on Vimeo. To achieve results, team members must work together effectively. At GitLab, helping others is a priority, even when it is not immediately related to the goals that you are trying to achieve.\nSimilarly, you can rely on others for help and advice\u2014in fact, you\u2019re expected to do so.\nAnyone can chime in on any subject, including people who don\u2019t work at GitLab.\nThe person who\u2019s responsible for the work decides how to do it,\nbut they should always take each suggestion seriously and try to respond and explain why it may or may not have been implemented. We value caring for others.\nDemonstrating we care for people provides an effective framework for challenging directly and delivering feedback.\nKindness doesn\u2019t mean holding back on feedback or avoiding disagreements, these are crucial to professional growth and getting results for customers.\nKindness means you make a separation between the work and the person, you can criticize someone\u2019s work but still be respectful to the person.\nGive as much positive feedback as you can, and do it in a public way. There are aspects of GitLab culture, such as intentional transparency, that are unintuitive to outsiders and new team members.\nBe willing to invest in people and engage in open dialogue.\nFor example, consider making private issues public wherever possible so that we can all learn from the experience. Don\u2019t be afraid of judgement or scrutiny when sharing publicly, we all understand it\u2019s impossible to know everything. Everyone can remind anyone in the company about our values.\nIf there is a disagreement about the interpretations, the discussion can be escalated to more people within the company without repercussions. Share problems you run into, ask for help, be forthcoming with information and speak up. Give negative feedback in the smallest setting possible.\nOne-on-one video calls are preferred. Negative feedback is distinct from negativity and disagreement. If there is no direct feedback involved, strive to discuss disagreement in a public channel, respectfully and transparently. In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. We deal with negative all the time at GitLab. If it\u2019s not a problem, then why are we discussing it? We deal with negativity a lot, and that\u2019s also part of our ambition. If you want to get better, you talk about what you can improve. We\u2019re allowed to publicly discuss negative things; we\u2019re not allowed to give negative feedback in a large setting if it could be feasibly administered in a smaller setting. Negative feedback can be given in a group setting if it\u2019s to someone higher in the management chain. This shows that no one is above feedback. GitLab co-founder and CEO Sid Sijbrandij and former CTO Eric Johnson discuss this in this GitLab Unfiltered video. We want to solve problems while they are small.\nIf you are unhappy with anything (your duties, your colleague, your boss, your salary, your location, your computer), please voice your concerns rather than keeping them to yourself. If you need to escalate beyond your manager, you could consider speaking to your skip-level, a more senior person, or a people business partner. Recognize the people that helped you publicly, for example in our #thanks chat channel. When publicly thanking, it\u2019s important to recognize the following: Giving feedback is challenging, but it\u2019s important to deliver it effectively.\nWhen providing feedback, always make it about the work itself;\nfocus on the business impact and not the person.\nMake sure to provide at least one clear and recent example.\nIf a person is going through a hard time in their personal life, then take that into account.\nAn example of giving positive feedback is our thanks chat channel.\nFor managers, it\u2019s important to realize that team members react to a negative incident with their managers six times more strongly than they do to a positive one.\nKeeping that in mind, if an error is so inconsequential that the value gained from providing criticism is low, it might make sense to keep that feedback to yourself.\nIn the situations where negative feedback must be given, focus on the purpose for that feedback: to improve the team member\u2019s performance going forward.\nGive recognition generously, in the open, and often to generate more engagement from your team. We use a lot of text-based communication, and if you know the person behind the text, it will be easier to prevent conflicts.\nSo we encourage people to get to know each other on a personal level through informal communication, for example, virtual coffee chats, and during GitLab Contribute. While it\u2019s wise to seek advice from experts within your function, we encourage GitLab team members to do the same across departments. This enables the company to iterate more quickly, embrace the understanding that everyone can contribute and include more diverse perspectives when possible. If you have to remind someone of the position you have in the company, you\u2019re doing something wrong.\nPeople already know our decision-making process.\nExplain why you\u2019re making the decision, and respect everyone irrespective of their function.\nThis includes using the rank of another person - including the CEO - to sell an idea or decision. We naturally have a double standard when it comes to the actions of others.\nWe blame circumstances for our own mistakes, but individuals for theirs.\nThis double standard is called the Fundamental Attribution Error.\nIn order to mitigate this bias, you should always assume positive intent in your interactions with others, respecting their expertise and giving them grace in the face of what you might perceive as mistakes. When disagreeing, folks sometimes argue against the weakest points of an argument, or an imaginary argument (e.g. \u201cstraw man\u201d). Assume the points are presented in good faith, and instead try to argue against the strongest version of your opponent\u2019s position. We call this arguing against a \u201csteel\u201d position, instead of a \u201cstraw\u201d one. This concept is borrowed from argue the \u201csteel man\u201d technique. A \u201csteel\u201d position should be against the absolute most effective version of your opponent\u2019s position \u2014 potentially even more compelling than the one they presented. A good \u201csteel\u201d position is one where the other person feels you\u2019ve represented their position well, even if they still disagree with your assumptions or conclusion. There is a lot of good in this article about not wanting jerks on our team, but we believe that jerk is a label for behavior rather than an inherent classification of a person.  We avoid classifications. If you made a mistake, apologize as soon as possible.\nSaying sorry is not a sign of weakness but one of strength.\nThe people that do the most work will likely make the most mistakes.\nAdditionally, when we share our mistakes and bring attention to them, others can learn from us, and the same mistake is less likely to be repeated by someone else.\nMistakes can include when you have not been kind to someone. In order to reinforce our values, it is important, and takes more courage, to apologize publicly when you have been unkind publicly (e.g., when you have said something unkind or unprofessional to an individual or group in a Slack channel). Don\u2019t defend a point to win an argument or double-down on a mistake.\nYou are not your work; you don\u2019t have to defend your point.\nYou do have to search for the right answer with help from others. In a GitLab Unfiltered interview, GitLab Head of Remote Darren M. adds context on this operating principle. In many organizations, there\u2019s a subtle, low-level, persistent pressure to continually prove your worth.\nAnd I believe that this fuels imposter syndrome and wreaks havoc on mental health. What\u2019s so troubling to me is how often perception is reality.\nIn other words, those who have mastered the art of being perceived as elite reap benefits, though this has nothing to do with actual results. At GitLab, \u201cno ego\u201d means that we foster and support an environment where results matter, and you\u2019re given agency to approach your work in the way that makes sense to you.\nInstead of judging people for not approaching work in an agreed-upon way, \u201cno ego\u201d encourages people to glean inspiration from watching others approach work in new and different ways. Being no ego is a standard we hold ourselves as people to but is not one that applies to GitLab as a company or product.\nWe want to celebrate and highlight GitLab\u2019s accomplishments, including being one of the largest all-remote companies.\nThis doesn\u2019t mean we don\u2019t recognize our mistakes, including how we handled telemetry. A candidate who has talked to a lot of people inside GitLab said that, compared to other companies, one thing stood out the most: everyone here mentioned wanting to see each other succeed. Keep an eye out for others who may be struggling or stuck.\nIf you see someone who needs help, reach out and assist. This might involve offering to pair program or setting up a sync brainstorming session. The goal is to connect them with someone else who can provide expertise or assistance.\nWe are a team, so we succeed and shine together by supporting each other! Always make suggestions about examples of work, not the person.\nSay \u201cYou didn\u2019t respond to my feedback about the design\u201d instead of \u201cYou never listen\u201d.\nAnd, when receiving feedback, keep in mind that feedback is the best way to improve, and that others giving you feedback want to see you succeed. Our collaboration value is about helping each other when we have questions, need critique, or need help.\nNo need to brainstorm, wait for consensus, or do with two what you can do yourself. The Bolt Handbook refers to this as the Founder Mentality, where all team members should approach the problem as if they own the company. Investigate mistakes in a way that focuses on the situational aspects of a failure\u2019s mechanism and the decision-making process that led to the failure, rather than cast blame on a person or team.\nWe hold blameless root cause analyses and retrospectives for stakeholders to speak up without fear of punishment or retribution. People joining the company frequently say, \u201cI don\u2019t want to step on anyone\u2019s toes.\u201d\nAt GitLab, we should be more accepting of people taking initiative in trying to improve things.\nAs companies grow, their speed of decision-making goes down since there are more people involved.\nWe should counteract that by having short toes and feeling comfortable letting others contribute to our domain.\nFor example, pointed, respectful feedback to a proposal by GitLab\u2019s CEO led to his own merge request being closed. However, it is not required to respond to comments. We know we must rely on others for the expertise they have that we don\u2019t.\nIt\u2019s OK to admit you don\u2019t know something and to ask for help, even if doing so makes you feel vulnerable.\nIt is never too late to ask a question, and by doing so, you can get the information you need to produce results and to strengthen your own skills as well as GitLab as a whole.\nAfter your question is answered, please document the answer so that it can be shared. Don\u2019t display surprise when people say they don\u2019t know something, as it is important that everyone feels comfortable saying \u201cI don\u2019t know\u201d and \u201cI don\u2019t understand.\u201d\n(As inspired by Recurse.) When collaborating, it is always important to stay above radar and work transparently, but collaboration is not consensus and disagreement is part of collaboration.\nYou don\u2019t need to ask people for their input, and they shouldn\u2019t ask you \u201cWhy didn\u2019t you ask me?\u201d\nYou don\u2019t have to wait for people to provide input, if you did ask them.\nYou don\u2019t need to have everyone agreeing to the same thing - they can disagree, commit, and disagree. Two-way doors decisions can be reversed as part of disagree, commit, and disagree, while one-way door decisions benefit from more input. Recognize these reversible two-way door decisions for when less input is required to iterate faster.\nWe believe in permissionless innovation\u2014you don\u2019t need to involve people, but everyone can contribute.\nThis is core to how we iterate, since we want smaller teams moving quickly rather than large teams achieving consensus slowly. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate collaboration when we take action to help others and include other\u2019s (both internal and external) input (both help and feedback) to achieve the best possible outcome. We exist to help our customers achieve more. Everything we do should be in service of making our customers successful with GitLab. Results for Customers is at the top of our values hierarchy, as our customers achieving results drives overall business performance that enables everything else. The Results for Customers value is displayed through the following operating principles: While we iterate with small changes, we strive for large, ambitious results. We have an ambitious mission and vision, and we aim to be the best in the world across all our functions. Setting ambitious, measurable goals enables us to best deliver customer results.  We agree in writing on measurable goals. Within the company we use OKRs to stay accountable. We have and report against KPIs with guiding targets. All GitLab team members should understand our customers\u2019 needs, issues, and value propositions. We understand how they use GitLab and what they need from a platform in order to meet their goals. Internally facing teams consider the impact of their work as it pertains indirectly to GitLab\u2019s customers. We better understand customers and their needs through: We create together with our customers. There is an open dialogue between GitLab and our customers so that we can better identify what they need. As a result of building a solution for them, we can also bring that solution to the world. Our focus is to increase customer results. At GitLab, one way to drive customer results is through platform enhancements that drive the most value for direct users. This requires being aware of the Concur effect. Arvind Narayanan, a Princeton Professor, described his frustration with Blackboard in a viral Tweet: It has every feature ever dreamed up. But like anything designed by a committee, the interface is incoherent and any task requires at least fifteen clicks (and that\u2019s if you even remember the correct sequence the first time). Software companies can be breathtakingly clueless when there\u2019s a layer of indirection between them and their users. Everyone who\u2019s suffered through Blackboard will have the same reaction to this: try having less functionality! Ryan Falor followed up on Narayanan\u2019s tweet with his definition of the Concur Effect: See the Hacker News discussion for a specific UX example. At GitLab, we want to drive customer results through focusing on platform enhancements that drive the most value for direct users. Customer results are more important than: We care about what you achieve: the code you shipped, the needle you moved, the user you made happy, and the team member you helped. Someone who took the afternoon off shouldn\u2019t feel like they did something wrong, unless it negatively impacted a goal or result they were responsible for. You don\u2019t have to defend how you spend your day if you are performing and delivering against expectations. We trust team members to do the right thing instead of having rigid rules. We trust team members to show up and do their best work. Do not incite competition by proclaiming how many hours you worked yesterday. If you are working too many hours, talk to your manager to discuss solutions. We use our own product in the way our users do to surface improvements that will lead to better customer results. GitLab is a DevSecOps Platform that can be used by people throughout the business. This is how we use it within GitLab. For example, we use our OKR functionality company-wide to inform product enhancements and for team members to have a great understanding of the customer experience. We also dogfood in the following ways: When something breaks, doesn\u2019t work well, or needs improvement, we are more likely to notice it internally and address it before it impacts our larger community. We give people agency to focus on what they think is most beneficial. If a meeting doesn\u2019t seem interesting and someone\u2019s active participation is not critical to the outcome of the meeting, they can always opt to not attend, or during a video call they can work on other things if they want. Staying in the call may still make sense even if you are working on other tasks, so other peers can ping you and get fast answers when needed. This is particularly useful in multi-purpose meetings where you may be involved for just a few minutes. Challenging the status quo can lead to remarkable results - we must never stop. A challenger mindset requires that we continually ask ourselves bold, difficult questions about our business the problems we solve while resisting complacency. To succeed we must innovate and delight our customers with the value of the products we build. A challenger mindset requires a relentless pursuit of excellence - we must be tenacious. Each win for our customers builds reputational capital we can use to earn the trust of prospects in a competitive market. While competition is a feature of capitalism internally as GitLab team members we must focus our efforts inwardly on achieving our very best results for customers to win market share. You don\u2019t always get results and this will lead to criticism from yourself and/or others. We believe our talents can be developed through hard work, targeted training, learning from others, on-the-job experience, and receiving input from others. It is in our DNA as a company and individuals to look for opportunity, stay humble, and never settle. We try to hire people based on their trajectory, not their pedigree. We also strive to foster a culture of curiosity and continuous learning where team members are provided and proactively seek out opportunities to grow themselves and their careers. We believe that with the right expectations and direction, people can grow to take on new challenges and surpass expectations. Our definition of cross-functional optimization is that you do what is best for the organization as a whole. Don\u2019t optimize for the goals of your team when it negatively impacts the goals of other teams, our users, and/or the company. Those goals are also your problem and your job. For example, you may have set a non-urgent functional milestone that is supposed to land at the end of the quarter. If delivering within the last week requires engagement from the GTM teams, the right decision may be to push your own team\u2019s target by a week to reduce the ask for the GTM team as the GTM focuses on meeting its revenue objectives. In the context of collaboration, if anyone is blocked by you on a question, your approval, or a merge request review, you should prioritize unblocking them, either directly or through helping them find someone else who can. We refer to this as \u201cpersistence of purpose\u201d. As talked about in The Influence Blog, tenacity is the ability to display commitment to what you believe in. You keep picking yourself up, dusting yourself off, and quickly get going again having learned a little more. We value the ability to maintain focus and motivation when work is tough and asking for help when needed. We expect team members to complete tasks that they are assigned. You are responsible for executing with attention to detail, connecting the dots across the organization and anticipating and solving problems. As an owner, you are responsible for overcoming challenges, not suppliers or other team members. Take initiative and proactively inform stakeholders when there is something you might not be able to solve. Time gained or lost has compounding effects. Try to get the results as fast as possible, but without compromising our other values and ways we communicate, so the compounding of results can begin and we can focus on the next improvement. It\u2019s important that we keep our focus on action, and don\u2019t fall into the trap of analysis paralysis or sticking to a slow, quiet path without risk. Decisions should be thoughtful, but delivering fast results requires the fearless acceptance of occasionally making mistakes; our bias for action also allows us to course correct quickly. Try to get results as fast as possible, but without compromising our other values and ways of working When a decision is in place, we expect people to commit to executing it. Any past decisions and guidelines are open to questioning as long as you act in accordance with them until they are changed. This is a common principle.\nEvery decision can be changed;\nour best decision was one that changed an earlier one.\nIn a manager-report relationship, usually the report is the Directly Responsible Individuals (DRI).\nThe manager may disagree with the final decision, but they still commit to the decision of the DRI. In a group setting, participants may disagree with a proposal but not articulate their views for one reason or another. Sometimes, many or all individuals may disagree yet choose not to speak up, because no one believes they would get agreement from the group. As a result, everyone loses out on their feedback. Dissent is expression of that disagreement. However, it can be difficult and even socially expensive.\nExpression of feedback is a way for everyone to grow and learn, and is based on facts rather than opinions. Share your perspective, rather than agreeing simply to avoid conflict or to go along with everyone else. When you want to reopen the conversation on something, show that your argument is informed by previous conversations and assume the decision was made with the best intent.\nYou have to achieve results on every decision while it stands, even when you are trying to have it changed.\nYou should communicate with the DRI who can change the decision instead of someone who can\u2019t. If there is a disagreement and you can\u2019t move forward because of it, agree to escalate and escalate to one or both of your managers. Early escalation, delivered with context of the challenge, enables managers to function as an unblocker. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate results when we do what we promised to each other, customers, users, and investors. At GitLab, efficiency means producing results without wasting materials, time, or energy. We optimize solutions globally for the broader GitLab community over one person or a small group. Focus on efficiency should be global in nature, not just local to a given function. Global efficiency could include efficiency with customers, candidates, and contributors as well. It is easy to prioritize consistency over efficiency because consistency is often more efficient initially and makes managing processes more efficient. We should slow down when optimizing for consistency. Taking a company-wide lens when evaluating changes will help ensure that new processes will improve efficiency for GitLab as a whole and be the best decision for the company as a whole. When we work internally with other team members, we leverage GitLab\u2019s unique working practices and operating principles to achieve top efficiency. We do not expect people outside of GitLab to conform to GitLab\u2019s ways of working, and we will make accommodations to work effectively with them. For example, we may collaborate heavily in-person and not default to async communications. Most companies regress to the mean and slow down over time. While some changes are required as a company grows and matures, not all change is inevitable or should be allowed to passively happen. As GitLab grows, we are conscious of how we operate and how it enables our ability to continue to operate with the agility of a startup. We try to limit ourselves to healthy constraints. We document everything: in the handbook, in meeting notes, in issues.\nWe do that because \u201cthe faintest pencil is better than the sharpest memory.\u201d\nIt is far more efficient to read a document at your convenience than to have to ask and explain. Having something in version control also lets everyone contribute suggestions to improve it. Use the simplest and most boring solution for a problem, and remember that \u201cboring\u201d should not be conflated with \u201cbad\u201d or \u201ctechnical debt.\u201d\nThe speed of innovation for our organization and product is constrained by the total complexity we have added so far, so every little reduction in complexity helps.\nDon\u2019t pick an interesting technology just to make your work more fun;\nusing established, popular tech will ensure a more stable and more familiar experience for you and other contributors. Make a conscious effort to recognize the constraints of others within the team.\nFor example, sales is hard because you are dependent on another organization, and development is hard because you have to preserve the ability to quickly improve the product in the future. Team members should first search for their own answers and, if an answer is not readily found or the answer is not clear, ask in public as we all should have a low level of shame. Write down any new information discovered and pay it forward so that those coming after will have better efficiency built on top of practicing collaboration, inclusion, and documenting the results. Team members have more room to grow themselves when they are able to self-service and self-learn. Optimize solutions globally for the broader GitLab community. As an example, it may be best to discard a renewal process that requires thousands of customers to each spend two hours in favor of one that only takes sixty seconds, even when it may make a monthly report less efficient internally! In a decision, ask yourself \u201cFor whom does this need to be most efficient?\u201d Quite often, the answer may be your users, contributors, customers, or team members that are dependent upon your decision. Consider the time investment you are asking others to make with meetings and a permission process. Try to avoid meetings, and if one is necessary, try to make attendance optional for as many people as possible. Any meeting should have an agenda linked from the invite, and you should document the outcome. Instead of having people ask permission, trust their judgment and offer a consultation process if they have questions. Every dollar we spend will have to be earned back. Be as frugal with company money as you are with your own. In saying this, we ask team members to weigh the cost of purchases against the value that they will bring to the company. Consider the degree to which a purchase increases your ability to better accomplish your work and achieve business results relative to cost. Lowering overhead reduces the cost to operate the business and lets us shift spend toward other priority areas. We have guidelines around this operating principle to help team members better understand our expensing process and expectations. Amazon states it best with: \u201cAccomplish more with less. Constraints breed resourcefulness, self-sufficiency, and invention. There are no extra points for growing headcount, budget size, or fixed expense.\u201d Give short answers to verbal questions so the other party has the opportunity to ask more or move on. Keep one-to-many written communication short, as mentioned in this HBR study: \u201cA majority say that what they read is frequently ineffective because it\u2019s too long, poorly organized, unclear, filled with jargon, and imprecise.\u201d We want each team member to be a manager of one who doesn\u2019t need daily check-ins to achieve their goals. Team members are given the freedom to own projects and initiatives and are trusted to see them through to a successful end. When team members are managers of one they can have an increased work/life balance, because they are more empowered to make decisions around how they allocate their time throughout each day. When possible, we give people the responsibility to make a decision and hold them accountable for that, instead of imposing rules and approval processes. You should have clear objectives and the freedom to work on them as you see fit. Freedom and responsibility are more efficient than rigidly following a process, or creating interdependencies, because they enable faster decision velocity and higher rates of iteration. When team members have freedom and responsibility over rigidity, they have more room to help others. Not every problem should lead to a new process to prevent them. Additional processes make all actions more inefficient; a mistake only affects one. Once you have accepted the mistake, learn from it. When team members are free to accept mistakes, they can take more calculated risks. We value constant improvement by iterating quickly, month after month. If a task is not the smallest viable and valuable thing, cut the scope. Adoption of features, user requirements, and the competitive landscape change frequently and rapidly. The most successful companies adapt their roadmap and their organization quickly to keep pace. One of the things that makes this challenging is the impact on our team. People may need to change teams, subject matter, or even who manages them. This can rightly feel disruptive. If we coach ourselves to embrace the positive aspects of change, such as increased opportunity and new things to learn, we can move faster as a company and increase our odds of success. It is important to hold management accountable for being deliberate. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate efficiency when we work on the right things, not doing more than needed, and not duplicating work. Diversity, inclusion and belonging are fundamental to the success of GitLab. We aim to make a significant impact in our efforts to foster an environment where everyone can thrive. We are designing a multidimensional approach to ensure that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. We actively chose to build and institutionalize a culture that is inclusive and supports all team members equally in the process of achieving their professional goals. We hire globally and encourage hiring in a diverse set of countries. We work to make everyone feel welcome and to increase the participation of underrepresented minorities and nationalities in our community and company. For example, we celebrate our sponsorship of diversity, inclusion & belonging events. Take initiative to operate asynchronously whenever possible. This shows care and consideration for those who may not be in the same time zone, are traveling outside of their usual time zone, or are structuring their day around pressing commitments at home or in their community. This is demonstrated by communicating recordings of meetings, using GitLab Issues and Merge Requests rather than texts, calls, or Slack messages, and being sensitive to local holidays and vacation statuses. Encourage others to default to documentation rather than pressuring others to be online outside of their working hours. Part of embracing diversity is a willingness to embrace often uncomfortable conversations and situations. This concept is also at the core of inclusion and helping to eliminate the problems that are faced by certain GitLab team members who may not be in the majority. We believe that being willing to embrace discomfort is the path forward to a safe, balanced and inclusive work place for all. Challenge yourself, challenge your own pre-set notions and ideas about different cultures or things you don\u2019t understand. When we are willing to embrace being uncomfortable, we can focus on actually fixing the issues at hand rather than simply \u201cappearing to care\u201d. Microaggressions are much more than merely rude or insensitive comments. They can wear people down by slowly chipping away their sense of belonging/safety/inclusion over time. What is a microaggression? \u201cThe everyday slights, indignities, put downs and insults that people of color, women, LGBT populations or those who are marginalized experiences in their day-to-day interactions with people.\u201d -  Derald W. Sue At GitLab we believe that everyone is entitled to a safe working space where they can express who they are and participate in conversations without worry of being spoken to in a harmful way, given that we want to encourage everyone to be mindful of what is a microaggression and be mindful of their potential impact. We believe that team members seeking feedback from a diverse group of team members, inside and outside of their group or function, leads to better decisions and a greater sense of team member belonging. For more guidance on how we define Diversity, please refer to GitLab\u2019s definition of Diversity, Inclusion & Belonging. Feedback from a more heterogenous group often leads to better business outcomes as we incorporate diverse perspectives and uncover unconscious bias. An example of this operating principle in action showcases the value of actively seeking diverse perspectives. The term \u201cBrag Document\u201d was used to describe when individuals documented their accomplishments. Documenting accomplishments is critical to team member development. However, team members had the psychological safety to raise the question of whether or not the title of the document made some feel uncomfortable. In an effort to seek a diverse perspective, a survey was conducted in one of the Team Member and Advocacy Resource Group (TMRG) channels. The poll results showed that 100% of those polled preferred a different title and the title was changed. One of the unique elements to an all-remote culture is the ability to visit a person\u2019s home while collaborating. If the tenor of the meeting allows, feel welcome to invite your family members or pets to drop by and greet your colleagues. Be mindful of language and use of profanity to encourage a family-friendly environment. Caregiving, outreach programs, and community service do not conveniently wait for regular business hours to conclude. If there\u2019s a cause or community effort taking place, feel welcome to work with your manager and shift your working hours to be available during a period where you\u2019ll have the greatest impact for good. For colleagues supporting others during these causes, document everything and strive to post recordings so it\u2019s easy for them to catch up. People feel more included when they\u2019re supported. To encourage this, and to support diversified learning across departments, consider GitLab\u2019s Internship for Learning program. We don\u2019t hire based on culture or select candidates because we\u2019d like to have a drink with them. We hire and reward team members based on our shared values as detailed on this page. We want a values fit, not a culture fit.\nWe want cultural diversity instead of cultural conformity. Said differently: \u201cculture add\u201d > \u201cculture fit\u201d or \u201chire for culture contribution\u201d since our mission is that everyone can contribute. We generally avoid discussing politics or religion in public forums because it is easy to alienate people that have a minority opinion. This doesn\u2019t mean we never discuss these topics. Because we value diversity, inclusion and belonging, and want all team members to feel welcome and contribute equally, we encourage free discussion of operational decisions that can move us toward being a more inclusive company. GitLab also publicly supports pro diversity, inclusion & belonging activities and events. There is sometimes a grey area where advocating for diversity and political activities may intersect. Team members should use discretion in grey area communications, because a culture of belonging requires us to be respectful of the broad spectrum of views within our work environment. What does this mean in practice? Please feel empowered to share information that highlights diversity, inclusion and belonging issues and how GitLab and GitLab team members can get involved. In line with our Code of Business Conduct and Ethics, avoid posting articles that reference specific political figures or parties. While it is acceptable for individuals to bring up politics and religion in social contexts such as coffee chats and real-life meetups with other coworkers (with the goal to understand and not judge), always be aware of potential sensitivities, exercise your best judgment, and make sure you stay within the boundaries of our Code of Business Conduct and Ethics. We\u2019re a global company where perspectives and local norms may differ from culture to culture. Diversity, inclusion and belonging is about broad inclusion at a worldwide level. If there is a question or concern, please reach out to diversityinclusion@gitlab.com or #diversity_inclusion_and_belonging. Unexpected and unconventional things make life more interesting.\nCelebrate and encourage quirky gifts, habits, behavior, and points of view. Open source is a great way to interact with interesting people. We try to hire people who think work is a great way to express themselves. Do not make jokes or unfriendly remarks about characteristics of the people who make up GitLab and how they identify.\nEveryone has the right to feel safe when working for GitLab and/or as a part of the GitLab community.\nWe do not tolerate abuse, harassment, exclusion, discrimination, or retaliation by/of any community members, including our team members.\nYou can always refuse to deal with people who treat you badly and get out of situations that make you feel uncomfortable. We recognize that unconscious bias is something that affects everyone and that the\neffect it has on us as humans and our company is large.\nWe are responsible for understanding our own implicit biases and helping others\nunderstand theirs. We are continuously working on getting better at this topic. We list our Parental Leave publicly so people don\u2019t have to ask during interviews. Use inclusive language.\nFor example, prefer \u201cHi everybody\u201d or \u201cHi people\u201d to \u201cHi guys\u201d, and \u201cthey\u201d instead of \u201che/she\u201d. While there are several good guides from folks like 18f, University of Calgary, and Buffer on using inclusive language, we don\u2019t keep an exhaustive list.\nWhen new possibly non-inclusive words arise, we prefer to be proactive and look for an alternative.\nIf your goal is to be inclusive, it is more effective to make a small adjustment in the vocabulary when some people have a problem with it, rather than making a decision to not change it because some people don\u2019t think it is a problem.\nAnd if you make a mistake (e.g. accidentally using the wrong pronoun or an outdated phrase), acknowledge it, apologize gracefully and move on; there is no need to dwell on it, and you can work to avoid making that mistake in the future.\nPlease also visit our Gender and Sexual-orientation Identity Definitions and FAQ page if you have questions around pronouns and other topics related to gender / sexual orientation. We attach part of our identity to our names, and if it is mispronounced it can feel less inclusive.\nIf it happens repeatedly, you may be unintentionally sending a message to that person that you are not interested\nin learning how to pronounce their name correctly. This applies to everyone you are in contact with:\nteam members, customers, candidates for jobs, and anyone else. People whose name is repeatedly mispronounced might feel unimportant or self-conscious, and might not\nspeak up about it.\nOther negative behaviors include giving a person a nickname without their permission, or\nactively avoiding using their name in sync calls. It might be challenging to pronounce names from a different language or culture than your\nown, but with some effort, name pronunciation can be learned by anyone. Some ways to achieve this are: Some people might choose to use a nickname, for example: \u201cBob\u201d instead of \u201cRobert\u201d.\nAs long as this is their choice this is perfectly acceptable.\nWe should avoid assigning a nickname to a person without their permission. Slack has two features to help with this issue: the phonetic name pronunciation field and the ability to record your own name pronunciation audio clip. We encourage all team members to complete both of these. Update them by editing your profile. This is documented on our page about interviewing. Be consciously inclusive in meetings by giving everyone present an opportunity to talk and present their points of view. This can be especially important in a remote setting. With internal meetings, consider using an agenda document for questions. For example, with GitLab Group Conversations, every meeting has a numbered list that GitLab team members can add questions to. During the meeting, questions are answered in turn and discussions noted in the same document. Sometimes, these documents can have so much traffic (during the meeting) such that only a limited number of people can edit the document. In these situations, those who have questions should post on zoom chat and those who can edit the document should help copy the question over to the document. In addition, those who can edit the document should also post in zoom chat to see if anyone has any questions that they could help add to the document so that meeting attendees are more empowered to contribute to the conversation. Customers are not used to working in this way. To promote inclusion with customers: ask participants for their goals; make sure during demos that you pause for question; leave time for discussion. Being globally distributed has the benefit that someone can cover for you when you are off work. However, population density is not balanced across timezones. Policies should remain fair to those in less dense regions. For example, the Asia Pacific region covers more timezones but has fewer team members. If we use an algorithm to assign tasks to those in later timezones, all American tasks would fall on the fewer Asia Pacific employees. This can damage belonging and inclusivity and should be avoided. When planning an event, the organizer should cater for location density differences to maximize participation in all regions. As a globally-dispersed company, we have team members from many different backgrounds and cultures. That means it is important for each of us to use great judgment in being respectful and inclusive of our teammates. At the same time, we may sometimes not fully realize we have said or done something to offend someone. It is important that our teammates hold each other accountable and let them know if they have unintentionally or intentionally done something so they can learn and gain additional understanding of perspectives different from our own. It is also important that our teammates don\u2019t feel excluded or minimized by the words we use or the things we do. Thus, we all need to speak up when we see something that isn\u2019t respectful or inclusive. Neurodiversity refers to variations in the human brain regarding learning, attention, sociability, mood, and other mental functions. There are various neurodevelopmental conditions, like autism, ADHD, dyslexia, dyscalculia, dyspraxia, cognitive impairment, schizophrenia, bipolarity, and other styles of neurodivergent functioning. While neurodivergent individuals often bring unique skills and abilities which can be harnessed for a competitive advantage in many fields (for example, cybersecurity), neurodivergent individuals are often discriminated against. Due to non-inclusive hiring practices, they sometimes have trouble making it through traditional hiring processes. Neurodiversity inclusion best practices benefit everyone, and at GitLab, everyone can contribute. The handbook, values, strategy, and interviewing processes must support the ability for everyone to thrive. At GitLab we embrace Neurodiversity through adopting a variety of different work styles and communication styles, and we lean into transparency, asynchronous as a default working style, and pre-filled meeting agendas. These best practices become even more important when embracing neurodiversity. Providing multiple ways to consume information (written / video / audio) allows everyone to contribute independent of their preferred comprehension style. It is important to ask team members specifically what their preferred communication method is in order to provide them information in a format that is easily consumable for them. Remember, brains work differently and always assume positive intent, even if someone behaves in an unexpected way. While it may be an unexpected behavior to you, it may not be unexpected to the individual exhibiting the behavior. That is the beauty and value of diversity, embracing differences and becoming stronger and better as a result. We also recommend that all team members review the Reasonable Accommodation process. A Reasonable Accommodation for a team member could include noise-cancelling headphones, scheduling smaller group session zoom calls, providing very explicit and precise instructions and due-dates when given tasks, or providing a variety of supportive software tools. The most important thing that managers can do is facilitate an environment in which all team members feel psychologically safe enough to make requests for what they need in order to do their job. Long-lasting relationships are the rocks of life, and come before work. As someone said in our #thanks channel after helping a family member for five days after a hurricane: \u201cTHANK YOU to GitLab for providing a culture where \u201cfamily first\u201d is truly meant\u201d.  Use the hashtag: #FamilyAndFriends1st Equity vs. Equality: What\u2019s the Difference? While the terms equity and equality may sound similar, the implementation of one versus the other can lead to dramatically different outcomes for marginalized people. Equality means each individual or group of people is given the same resources or opportunities. Equity recognizes that each person has different circumstances and allocates the exact resources and opportunities needed to reach an equal outcome. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate diversity, inclusion and belongings when we foster an environment where everyone can thrive and ensuring that GitLab is a place where people from every background and circumstance feel like they belong and can contribute. If you would like to improve your skills or expand your knowledge on topics relating to Diversity, Inclusion, & Belonging at GitLab, check out our resources: Merriam-Webster defines iteration as the \u201cthe action or a process of iterating or repeating: such as a procedure in which repetition of a sequence of operations yields results successively closer to a desired result.\u201d At GitLab, we iterate to do the smallest valuable thing to get fast feedback and efficiently reach a desired end goal. Feedback can be from internal users (dogfooding), a limited number of external users (through our early access program), or through feedback from our broader user community. We validate each iteration and adjust, but not at the expense of the user experience that we deliver to our customers. When we iterate at GitLab, we break up the work that we know we need to do into smaller chunks to iterate toward a targeted end state: Iteration does not require us to ship features that are open to all users from day one. Feedback could come from internal users or a limited number of external users (early access program). It also is not a replacement for having a plan. We expect you to know where you are going, but you can iterate to get there. An iteration might be additive (adding something) or subtractive (removing something). If you make suggestions that can be excluded from the first iteration, turn them into a separate issue that you link. While you should have a clear vision of the desired outcome and how it addresses a customer pain point or improves the user experience, be efficient in your planning. Unless you identify important cross-functional interdependencies, focus detailed planning on the first step. It might feel you are moving too slowly; however, planning is critical in order to ensure you can move fast when implementing. You\u2019re doing it right if you feel that you have shipped the minimal feature set in the first iteration. This value is the one people most underestimate when they join GitLab. The impact, both on your work process and on how much you achieve, is greater than anticipated. Frequently, the simplest version that provides value turns out to be the best one. Many people who join GitLab say they already practice iteration. But this is the value that is the hardest to understand and adopt. People are trained that if you don\u2019t deliver a perfect or polished thing, there will be a problem. If you do just one piece of something, you have to come back to it. Doing the whole thing seems more efficient, even though it isn\u2019t. If the complete picture is not clear, your work might not be perceived as you want it to be perceived. It seems better to make a comprehensive product. They see other GitLab team members being really effective with iteration but don\u2019t know how to make the transition, and it\u2019s hard to shake the fear that constant iteration can lead to shipping lower-quality work or a worse product. In reality, it is possible to ship a minimally valuable product while continuing to adhere to the documented quality standards. The way to resolve this is to write down only what value you can add with the time you have for this project right now. That might be 5 minutes or 2 hours. Think of what you can complete in that time that would improve the current situation. Iteration can be uncomfortable, even painful. If you\u2019re doing iteration correctly, it should be. Reverting work back to a previous state is positive, not negative. We\u2019re quickly getting feedback and learning from it. Making a small change prevented a bigger revert and made it easier to revert. However, if we take smaller steps and ship smaller, simpler features, we get feedback sooner. Instead of spending time working on the wrong feature or going in the wrong direction, we can ship the smallest product, receive fast feedback, and course correct. People might ask why something was not perfect. In that case, mention that it was an iteration, you spent only \u201cx\u201d amount of time on it, and that the next iteration will contain \u201cy\u201d and be ready on \u201cz\u201d. Iteration enables results and efficiency. In the GitLab Unfiltered video embedded above, GitLab CEO and co-founder Sid Sijbrandij shares key operating principles to reinforce iteration in an organization. Iteration involves driving results in pursuit of a long-term vision. While the intermediate goals may change as we iterate, we are unlikely to be successful if we don\u2019t start with a vision of what we are working toward. Shipping that vision in iterations allows us to learn from customers using it and adjust the vision if needed. Iteration for the sake of iteration can lead to inefficiencies and not deliver desired results. Iteration without a plan can lead to inefficiencies and a subpar customer experience. Before iterating we need to plan. A plan should include: If we are not aware of interdependencies beyond our team, and we are not collaborating with others across the organization, we risk deliverables that settle into a \u201clocal maximum\u201d of quality, richness, and efficiency. This localization is largely defined by team structure and organizational boundaries. While an iteration can take place within a single team, that team is responsible for identifying inter-dependencies and proactively communicating and aligning with other teams working on related projects. This helps ensure that iterations are not \u201chalf-baked\u201d and align with work being done across the entire organization. Don\u2019t wait on the small things. When you have something of value like a potential blog post or a small fix, implement it straight away. Right now, everything is fresh in your head and you have the motivation. Inspiration is perishable. Don\u2019t wait until you have a better version. Don\u2019t wait until you record a better video. Don\u2019t wait for an event (like Contribute). Inventory that isn\u2019t released is a liability since it has to be managed, becomes outdated, and you miss out on the feedback you would have received had you implemented it straight away. When we don\u2019t wait we signal intent to others that we have a purpose to resolve something.  Note: \u201cDon\u2019t wait\u201d should not be used as a justification for not iterating toward the global maximum or at expense of the plan. If there are interdependencies to be considered or the iteration is customer facing, slow down and ensure that we are considering what is best for GitLab and our customers. We always try to set a due date. If needed, we cut scope.\nIf we have something planned for a specific date, we make that date. For example we shipped over 133 monthly releases. But every one of them doesn\u2019t contain all the features we planned.\nIf we planned an announcement for a certain date, we might announce less or indicate what is still uncertain.\nBut we set a due date because having something out there builds trust and gives us better feedback. As discussed in Sid\u2019s interview on iteration, waiting for approval can slow things down. We can prevent this with automation (such as tests of database migration performance) or clean-up after the fact (refactor a Pajamas if something was added that isn\u2019t coherent), but we try to ensure that people don\u2019t need to wait for sign-off. As iteration does not require us to ship to all users on day one, we can clean up after an internal or beta release to mitigate the negative impact to all customers. Iteration does not mean being open to all users from day one. If you do a gradual rollout of your change, prefer: Short iterations reduce our cycle time. Small iterations make it easier to work with the wider community. Their work looks more like our work, and our work is also quicker to receive feedback. We encourage MVCs to be as small as possible. Always look to make the quickest change possible to improve the user\u2019s outcome. If you validate that the change adds more value than what is there now, then do it. This may be additive (adding something) or subtractive (removing something). No need to wait for something more robust. More information is in the product handbook, but this applies to everything we do in all functions. Specifically for product MVCs, there is additional responsibility to validate with customers that we\u2019re adding useful functionality without obvious bugs or usability issues. If you need to decide something as a team, make a concrete proposal instead of calling a meeting to get everyone\u2019s input. Having a proposal will be a much more effective use of everyone\u2019s time. Every meeting should be a review of a proposal. We should be brainwriting on our own instead of brainstorming out loud. State the underlying problem so that people have enough context to propose reasonable alternatives. The people that receive the proposal should not feel left out and the person making it should not feel bad if a completely different proposal is implemented. Don\u2019t let your desire to be involved early or to see your solution implemented stand in the way of getting to the best outcome. If you don\u2019t have a proposal, don\u2019t let that stop you from highlighting a problem, but please state that you couldn\u2019t think of a good solution and list any solutions you considered. By making a proposal you also provide better visibility into the work and the context surrounding it. In this GitLab Unfiltered video, GitLab CEO and co-founder Sid Sijbrandij converses about iteration in engineering, leveraging proposals to break work into smaller components. At GitLab, we rarely mark any content or proposals as drafts. Everything is always in draft and subject to change. When everything is in draft, contributions from team members as well as the wider community are welcomed. By having everything in draft and assuming others have low context, confusion can be reduced as people have shared access to information. As we continue to expand the number of users we have, they will continue to expect stability and reliability. We must optimize for the long term without sacrificing stability along the way. This means that users may be inconvenienced in the short term, but current and future users will enjoy a better product in the end. Educating users on the longer-term plan helps create a shared understanding of how a small change will incrementally grow into something more. For example, we could share how a dropdown will evolve into a much more nuanced solution in the future. We can take the following steps to articulate our plan: In many organizations, you take a risk when you put forth any work that\u2019s not perfect, work where you haven\u2019t spent endless cycles planning for contingencies or counterpoints. Because of this, you\u2019re incentivized to invest a lot of time and effort into preparing for \u2018What if?\u2019 scenarios before any work is presented, even if the release is not customer facing and there is a low level of risk in imperfection. The downside to that is clear when we are dogfooding: If you do eventually put forth the work, but it needed to be course-corrected a long time ago, you\u2019ve squandered time that you could have spent improving it through iteration. Having a low level of shame when dogfooding or working internally requires you to combat a natural inclination to conceal work until it\u2019s perfect, and instead celebrate the small changes. Cultural differences can bring unique challenges and expectations to iteration. For some, expressions like \u201cit doesn\u2019t have to be perfect\u2026\u201d can challenge cultural norms. We encourage you to bring your authentic self and seek shared understanding when iterating. Giving feedback and ensuring psychological safety are necessary for every iterative attempt. We believe great companies sound negative because they focus on what they can improve, not only on what is working well.\nIn every conversation, inside and outside the company, we should ask a question: What do you think we can improve?\nThis doesn\u2019t mean we don\u2019t recognize our successes; for example, see our Say Thanks value. We are positive about the future of the company. We are Short Term Critical And Long Term Optimistic (STeCALTO, for short). First, optimize for speed and results (and be deliberate about how your change affects other processes/functionality); when it is a success, figure out how to scale it. Great examples are in this article by Paul Graham. Resist the urge to bundle a series of smaller iterations so team members don\u2019t see a project as their last (or best) opportunity to contribute. It\u2019s tempting to create encompassing projects or initiatives that roll many smaller projects up. This incarnation of scope creep drives up cost, encourages fewer risks, and incentivizes perfection (via longer cycle times) over progress. When we resist bundling, we reduce the risk that work will be canceled due to scale or scope. By resisting bundling we also reduce the coordination needed because fewer people or teams may be involved. Most decisions are easy to reverse. In these cases, the Directly Responsible Individual should go ahead and make them without approval. Only when you can\u2019t reverse them should there be a more thorough discussion. By embracing iteration and making two-way door decisions, we are more efficient and achieve more results. Changing something without shipping it is a revision, not iteration. Only when the change is rolled out to users, these can be internal users or a limited customer group, can you learn from feedback. When you\u2019re changing a proposal based on different opinions, you\u2019re frequently wasting time; it would be better to roll out a small change quickly and get real world feedback. Never call a revision an iteration because it is almost the opposite. In order to embrace iteration, we should have the attitude that we are trying to achieve as much as possible in a small amount of time; it\u2019s where we land at the end state of an iteration that counts. The benefit of iteration is to get fast feedback from users. Focus on sharing context at the end of the first iteration rather than a hypothetical future state that requires multiple iterations. By embracing iteration we can increase creativity in incremental components. When you are submitting a merge request for a code change, or a process change in\nthe handbook, keep it as small as possible. If you are adding a new page to the\nhandbook, create the new page with a small amount of initial content, get it merged\nquickly via Handbook Usage guidelines, and then add additional sections iteratively with subsequent merge requests.\nSimilarly, when adding features to GitLab, consider ways to reduce the scope of the feature before creating the merge request to ensure your merge request is as small as possible. Rapid iteration can get in the way of results if it\u2019s not thought out; for example, when adjusting our marketing messaging (where consistency is key), product categories (where we\u2019ve set development plans), organizational structure or product scope alignment (where real human stresses and team stability are involved), sales methodologies (where we\u2019ve trained our teams) and this values page (where\nwe use the values to guide all GitLab team members). In those instances, we add additional review to the approval\nprocess; not to prohibit, but to be more deliberate in our iteration. The change process is documented in the GitLab Handbook Usage page and takes place via merge request approvals. Iteration is often counterintuitive and difficult to do. To clarify what an iteration is, it helps to see examples of what is not an iteration. Below are 12 examples of things we\u2019ve seen mistaken as iteration, but don\u2019t meet our definition of iteration. In this GitLab Unfiltered video, GitLab co-founder and CEO Sid Sijbrandij elaborates on each of these 12 things that are not iteration. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate iteration when we do the smallest viable and valuable thing, get it out quickly for feedback, and make changes based that feedback. Be open about as many things as possible. By making information public, we can reduce the threshold to contribution and make collaboration easier. Use public issue trackers, projects, and repositories when possible. Transparency is not communication. Just because something exists in the handbook or elsewhere doesn\u2019t mean it can\u2019t be communicated again or in a more robust fashion to the people who need to understand or acknowledge it. On a personal level, be direct when sharing information, and admit when you\u2019ve made a mistake or were wrong. When something goes wrong, it is a great opportunity to say \u201cWhat\u2019s the kaizen moment here?\u201d and find a better way without hurt feelings. Even as a public company, we know that our value of transparency will be key to our success. This value can be hard to follow at times. You might ask yourself: what should be shared, how much to share, whether or not to speak up but definitely take the time to always opt for maximum transparency by adhering to the operating principles below. Often, company values get diluted as they grow, most likely because they do not write anything down. But we will make sure our values scale with the company. As a public company, we declare everyone in the company as an insider, which allows us to remain transparent internally about our numbers, etc. Everything else that can be transparent will continue to be so. When there are exceptions, material that is not public by default is documented. Everything at GitLab is public by default.\nThe public process does two things: allows others to benefit from the conversation and acts as a filter. Since there is only a limited amount of time, we prioritize conversations that a wider audience can benefit from. One example of transparency at GitLab is the public repository of this website\nthat also contains this company handbook. Others include the GitLab CE and GitLab EE issue trackers, as well as marketing and infrastructure. Transparency creates awareness for GitLab, allows us to recruit people that care about our values, gets us more and faster feedback from people outside the company, and makes it easier to collaborate with them. It is also about sharing great software, documentation, examples, lessons,\nand processes with the whole community and the world in the spirit of open source, which we believe creates more value than it captures. In line with our value of transparency and being public by default, all GitLab team member profiles should be public. Public profiles also enable broader collaboration and efficiencies between teams. To do so, please make sure that the checkbox under the Private profile option is unchecked in your profile settings. If you do not feel comfortable with your full name or location on your profile, please change it to what feels appropriate to you as these are displayed even on private profiles. Because we are public by default and have the SAFE framework we don\u2019t need to make cases for why things should be transparent. If something is unSAFE and needs to remain not public it can be. We make information public by default because transparency is one of our values.\nHowever it is most important to focus on results.\nTherefore, a category of information is public unless there is a reason for it not to be. If something is not public, there should be a reference in the handbook that states a confidential decision was taken with a link to our Not Public guidelines, unless GitLab Legal and Corporate Affairs believes it carries undue risk. We document what is not public by default on our communication page. If you believe something shouldn\u2019t be public that currently is (or vice versa), then make a merge request to the relevant page(s) suggesting the change so that you can collaborate with others and discuss with the DRI. When content contains information which is not public it is recommended to remove the specific sections which are not public, put them on their own page in the internal handbook, and then link out to that with a \u201cnot public/internal only\u201d note. Always share publicly what we can. When information is not public, it may also be treated as limited access, only shared with certain GitLab roles, teams, or team members due to privacy considerations, contractual obligation, or other reasons that the author or DRI can specify.\nCertain kinds of information default to limited access, including details about team members or customers who did not give permission to share the information. Most companies become non-transparent over time because they don\u2019t accept any\nmistakes. Instead, we should always err on the side of transparency when there\nis a choice to be made between caution or inaction, and transparency. If we make\na mistake, we now know what the limits of transparency are for the company and\nwe should document this. The only exception to this rule would be in the case when there are legal concerns. Because some information is not public the public information can be lacking some context. We should be cognizant of that. Being direct is about being transparent with each other. We try to channel our inner Ben Horowitz by being both straightforward and kind.\nFeedback is always about your work and not your person. That doesn\u2019t mean it will be easy to give or receive it. If you state one thing, and then change course and support a different direction, point, or outcome, articulate this. It is OK to have your position changed by new data. Articulating that an earlier stance is not your current stance provides clarity to others and encourages data-driven decision making. Be transparent to the right people (up) at the right time (when still actionable). If you make a mistake, don\u2019t worry; correct it and proactively let the affected party, your team, and the CEO know what happened, how you corrected it, and how\u2014if needed\u2014you changed the process to prevent future mistakes. We practice transparency even when hiding the facts would be easier. For example, many companies do not give you the real reason why they declined your application because it increases the chance of legal action. We want to only reject people for the right reasons and we want to give them the opportunity to grow by getting this feedback. Therefore, we\u2019ll accept the increased risk of holding ourselves to a high standard of making decisions and do the right thing by telling them what we thought. Other examples are being transparent about security incidents and participating in and contributing to Live Broadcasts. Transparency has costs (distraction, mis-interpretation, etc.) but also great benefits (productivity, hiring, retention, brand awareness, etc). Team members can view more details on these benefits by referencing the \u201cTransparency Benefit Quantification\u201d slides in Google Drive). We should carefully weigh the tradeoff between costs and benefits, to prevent a knee-jerk reaction to reduce transparency when it has costs. By having most company communications and work artifacts be public to the Internet, we have one single source of truth for all GitLab team members, users, customers, and other community members. We don\u2019t need separate artifacts with different permissions for different people. Our transparency value means more than just making information accessible to all. In order to improve performance it\u2019s important that we not only ensure information is accessible, but also ensure it flows to the correct places and is findable by those who need it. Focusing on information flow will ensure you, for example, utilize multi-modal communication, or that you keep your stakeholders informed of changes by posting links to MRs in Slack. Transparent changes have the reasons for the change laid out clearly along with the change itself. This leads to fewer questions later on because people already have some understanding. A change with no public explanation can lead to a lot of extra rounds of questioning, which is less efficient. This also helps with institutional memory: a year from now when you want to know why a decision was made, or not, the issue or MR that has the decision also shares why the decision was made.\nThis is related to Chesterton\u2019s fence - it\u2019s much easier to suggest removing or changing something if you know why it exists in the first place. If you use generalized terms such as \u201cindustry standard\u201d or \u201cbest practices,\u201d be sure to give context, as without context they can be seen as potentially vague or opaque. Similarly, merely stating a single value isn\u2019t a great explanation for why we are making a particular decision. Many things could be considered \u201citeration\u201d or \u201cefficiency\u201d that don\u2019t match our definition of those values. Try to link to an operating principle of the value or provide more context, instead of just saying a single value\u2019s name. Saying why and not just what enables discussion around topics that may impact more than one value; for instance, when weighing the efficiency of boring solutions with the focus on customer results. When decisions align with all of our values, they are easy to discuss and decide. When there are multiple values involved, using our values hierarchy and directly discussing the tradeoffs is easier with more context. Articulating why also helps people understand how something changed when you articulate that you changed your mind. Saying why does not mean justifying a decision against all other suggestions.\nThe DRI is responsible for their decision.\nThe DRI is not responsible for convincing other people, but they should be able to articulate their reasoning for the change. When a GitLab Team Member comes across an ask or material (MR, handbook, etc.) that does not provide a \u201cwhy\u201d with sufficient context, the Team Member is responsible for getting the why and, if needed, working with the DRI to ensure that it is adequately documented and communicated to give context to other team members.  In the absence of a why, team members may speculate the why. This is something that can lead to disruption and inefficiency. Enable everybody involved to come to the same conclusion as you. This not only involves reasoning, but also providing, for example: raw data and not just plots; scripts to automate tasks and not just the work they have done; and documenting steps while analyzing a problem. Do your best to make the line of thinking transparent to others, even if they may disagree. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn.\nWe demonstrate transparency when we are open with as many things as possible reducing the threshold to contribution and make collaboration easier. Our values provide guidelines on how to behave and are written to be actionable.\nThey help us describe the type of behavior that we expect from GitLab team members.\nThey help us to know how to behave in the organization and what to expect from others. Values provide a framework for distributed decision making, detailed in GitLab\u2019s TeamOps management philosophy. They allow individuals to determine what to do without asking their manager and they allow teams to make consistent decisions. When teams across the organization reference the same values in their decision making, there is consistency in how decisions are made. This ensures that our culture remains driven by our values. Lastly, values create a conscious culture that is designed to help you prosper and experience exceptional personal growth through work. Our values also help us to prevent the five dysfunctions: Some dysfunctions are not addressed directly by our values; for example, trust is not one of our values.\nSimilar to happiness, trust is something that is an outcome, not something you can strive for directly.\nWe hope that the way we work and our values will instill trust, instead of mandating it from people; trust is earned, not given. Operating principles are behaviors that empower GitLab team members to definitively live out a given value.\nThey clarify what a given core value means and looks like at GitLab.\nUnderstanding this distinction is critical to thriving at GitLab,\nparticularly for newer team members who may be familiar with a prior organization\u2019s interpretation of iteration or collaboration (as examples). Values are not just things we do, but things that actively drive good behavior.  When we remove them it doesn\u2019t mean we stopped believing in it, just that it wasn\u2019t actively helping to drive behavior. If we don\u2019t prune our operating principles, then we will be like every other company: things that make sense but are not leading to a better culture. Most companies have a list of values. In companies without strong values, folks often use generalizations when they refer to values. For example, \u201cnot a value add\u201d or \u201cscored well on values during our interview.\u201d In companies with strong values, folks name the specific, relevant value as it applies to a given topic or situation. Values are only powerful when they are individually understood and applied by team members. For certain business decisions or projects (such as compensation and end-point management ), GitLab team members may have a lot of opinions and interest,\nand they want to provide their feedback and comments.\nOn the other hand,  it might be challenging for the project DRI to digest and respond to all these inputs.\nWhat should you do in this scenario? Everyone can contribute at GitLab.\nWe encourage team members to share feedback and leave comments on issues.\nLeaving feedback and comments shows that team members care about a topic and about GitLab as a company.\nThese perspectives may also uncover potential risks and problems in the project. There shouldn\u2019t be a \u201cDon\u2019t they have their job to do?\u201d type of response.\nFurthermore, we shouldn\u2019t judge team members who are perceived as being the \u201csqueaky wheel.\u201d\nAt GitLab, we measure results, not hours.\nAs long as a team member is producing required results, they are empowered to decide how to spend their time. On the other hand, as GitLab grows in size, we need to make decisions and the decisions may not be agreed to by everyone.\nIf a decision or project is sensitive or controversial, and receives large amounts of feedback, it can be challenging for the project DRI to handle.\nIn these cases, it\u2019s best to have time-boxed feedback built into timelines. In a hypothetical example where a DRI needs to decide between red and gold potatoes for a stew, they would create an issue with the following sentiment: We\u2019re deciding between red potatoes and gold potatoes to go into the stew. We have to decide by Tuesday 2020-07-14 so that we can get our order to the grocery store on Wednesday 2020-07-15. We\u2019ll be collecting input and feedback until that point. Jane is the DRI and will make the decision on 2020-07-14 with all the information we have at that point. Here is the framework we\u2019re using for the decision: Once the decision is made, it will be what is going into the stew. This method has shown itself to be effective at soliciting productive feedback that doesn\u2019t derail a timeline while ensuring team members feel heard. Companies are encouraged to copy and implement GitLab\u2019s values. They are Creative Commons and can be copied verbatim. We make our values public for the same reasons we make our OKRs (Objectives and Key Results) and strategy public. There is great power and efficiency in teams who share company values. Concealing values until after someone is hired into an organization is not a wise strategy. Not everyone will see our values and feel aligned with them, and that\u2019s OK. By making values public, it shows respect for the time of job seekers who conduct due diligence on prospective employers. When people who are aligned with GitLab\u2019s values apply for an open vacancy, this allows our hiring teams to more efficiently move candidates through the interview process. In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. Companies may ask you to write a blank check. They\u2019ll say, \u2018Come join our organization, and when you\u2019re here, you need to subscribe to our values, our way of working, and our strategy. It\u2019s very essential, and it\u2019s part of our identity!\u2019 But these companies don\u2019t give you the opportunity up front to evaluate it. It doesn\u2019t make any sense to me. If it\u2019s so important that people share your values, have them out there. Occasionally, values can contradict each other. It\u2019s useful to keep in mind this hierarchy to resolve confusion about what to do in a specific circumstance, while remaining consistent with our core values. Think of the hierarchy as a weighting system. Values higher in the hierarchy do not automatically override values lower in the hierarchy. Here are some examples:  In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. It\u2019s an attempt to relieve at least some of the tension. It\u2019s not absolute. If you think of values as binary, that\u2019s not going to work. There will always be interpretation, and there\u2019s always magnitude to consider. We made a hierarchy so that it\u2019s clear, in the end, the result matters most. For instance, we\u2019re not going to be transparent for the sake of being transparent. We\u2019re not radical in our transparency. We do it because we think it will lead to better outcomes. Those hierarchies are really important. They won\u2019t preempt every debate, but it helps. Our values are updated frequently and as needed. Everyone is welcome to make a suggestion to improve them. To update: make a merge request and assign it to the CEO. If you\u2019re a team member or in the core team please post a link to the MR in the #values Slack channel. If you\u2019re not part of those groups, please send a direct Twitter message to @sytses. Whatever behavior you reward will become your values. We reinforce our values by: Criteria we use for promotions and communicate to the whole company on announcement. What we select for during hiring. What we emphasize during on-boarding. Criteria we use for our annual compensation review. What we refer to when making decisions. The example the E-group sets for the company since a fish rots from the head down. What we expect from all team members, as ambassadors for our values. Keeping them up to date with a stream of commits that add details. Behavior we give each other 360 feedback on. Behavior we compliment. Criteria we use for discretionary bonuses. What we include in our offer letters Criteria we use to manage underperformance. What we do when we let people go. Giving value awards during Contribute. Providing GitLab team members and qualified individuals transparency into all aspects of the company through the CEO Shadow Program to enable them to better engage and collaborate cross-functionally. Linking the takeaways of courses to our values, like we did for the Crucial Conversations training. The default settings of the software we use (for example: Speedy meetings, document sharing, agendas, etc.) Reinforcing our values with features in GitLab, for example the Iterations feature. Applying one of our values virtual backgrounds in video calls. Our GitLab Song Book, the song lyrics often mention GitLab values. Regularly conduct a values exercise at the e-group offsite. The most important moments to reinforce our values are decisions which affect individual team members most: hiring, promotions, and bonuses, which is why every promotion document at GitLab is shared with the entire company and uses the values as its core structure. In negative feedback, we should be specific about what the problem is. For example, saying someone is \u201cnot living the values\u201d isn\u2019t helpful. Your values are what you hire for, what you praise people for, and what you promote them for. By definition, what you do in those instances are your values. It\u2019s not what you say they are. Values should be explicitly part of our hiring process, our job profiles, and our review process. When we give bonuses and promotions, they are always linked to values. That\u2019s the crucial thing. If you reinforce them there, that\u2019s the most powerful thing you can do. \u2014 Sid Sijbrandij, GitLab co-founder and CEO Value erosion can occur when indifference and apathy are tolerated. It can also occur when individuals justify undesired behaviors by interpreting values as \u201cme values\u201d rather than \u201ccompany values.\u201d For example, a team member may speak to the importance of personal efficiency in order to justify not collaborating professionally with peers. This is not what we expect from team members in terms of efficiency and collaboration. If you feel that values are not being lived out in a given scenario, speak up and ask for context in a respectful manner. Navigating value conflicts starts with assuming positive intent from other team members. Offer links to relevant values and/or operating principles when discussing the issue. If there is confusion or disagreement about the interpretation of a value, please surface the discussion in GitLab\u2019s #values Slack channel (for GitLab team members) or @-mentioning  @gitlab on Twitter (for those who do not work at GitLab). In a GitLab Unfiltered interview on values, GitLab co-founder and CEO Sid Sijbrandij offers the following context. Almost every time we face a hard decision at GitLab, it\u2019s because values are in conflict. It\u2019s not binary logic. It requires conversation, and sometimes there is no obvious answer. We can only achieve resolution by respectfully talking with each other and trusting the DRI to make the ultimate decision. From our values we excluded some behaviors that are obvious; we call them our permission to play behavior: We don\u2019t want people to play politics at GitLab. An example of politics is people discussing a proposal and being overly focused on whose proposal it is.\nThis is a manifestation of the Belief Bias, where we judge an argument\u2019s strength not by how strongly it supports the conclusion but by how strongly we support the conclusion.\nProposals should be weighed on their merits and not on who proposed them.\nAnother example is people being promoted based on others liking them or having a lot of alliances. We want people to be promoted based on their results. We value collaboration, but that\u2019s different from being promoted just because people like you. Below are some attributes of political and non-political work environments. GitLab plans to maintain a non-political one. Values make and clarify choices. A well-chosen value has a defensible opposite. Apple, for example, values secrecy over transparency and product perfection over iteration. They are successful building around our counter values \u2014 although the result is a very different company. During every GitLab 101 session with new hires we discuss our values. We document the questions and answers to Frequently Asked Questions about the GitLab Culture. New team members should read GitLab\u2019s guide to starting a new remote role, and reference interviews centered on values within the GitLab Unfiltered YouTube channel. Our mission is that everyone can contribute. This mission guides our path, and we live our values along that path. We have a page which documents our Mitigating Concerns. Many of our values help to mitigate some of these concerns. Anyone with a GitLab account can access the GitLab Values Quiz. To participate in the quiz, you will need to complete this learning course in Level Up. If you have questions, please reach out to our L&D team at learning@gitlab.com."
},
{
    "title": "GitLab Mission",
    "url": "https://handbook.gitlab.com/handbook/company/mission/",
    "content": "It is GitLab\u2019s mission to enable everyone to contribute to and co-create the software that powers our world. There are three ways you can contribute and co-create: To ensure that everyone can contribute with GitLab we allow anyone to create a proposal, at any time, without setup, and with confidence. Let\u2019s analyze that sentence a bit. We actively welcome contributors to enable everyone to contribute to and co-create with GitLab, the application. When everyone can contribute and co-create, users become contributors and we greatly\nincrease the rate of innovation to benefit customers and users. There is also an open dialogue between GitLab and our customers, partners, and the community so that we can also better identify what they need. That way we can not only build a solution for them, but bring that solution to the world. We think that it is logical that our collaboration tools are a collaborative\nwork themselves. More than 3,000 people from the wider community have contributed to GitLab to make that a reality. We do this by having quality code, tests, documentation, popular frameworks,\nand offering a comprehensive GitLab Development Kit\nand a dedicated GitLab Design System.\nWe use GitLab at GitLab Inc., we dogfood\nit and make it a tool we continue to love. We celebrate contributions by\nrecognizing a Most Valuable Person (MVP) every month.\nWe allow everyone to anticipate, propose, discuss, and contribute features by having everything on\na public issue tracker. We ship a new version every month so contributions\nand feedback are visible fast. To contribute to open source software, people\nmust be empowered to learn programming.\nThat is why we sponsor initiatives such as Rails Girls.\nThere are a few significant, but often overlooked, nuances of the enabling everyone to contribute to GitLab, the application mantra: A group discussion reiterating the importance of everyone being able to contribute: To enable everyone to contribute to GitLab, the company we have open business processes.\nThis allows all team members to suggest improvements to our handbook. We hire remotely so our team members can be judged on results, not presence in an office. We engage on social media platforms and in our blog post comments. And we strive to take decisions guided by our values. We welcome all contributors in the www-gitlab-com project so that everyone can contribute to about.gitlab.com. GitLab uses about.gitlab.com to share our expertise with the world and believe we can build even greater levels of trust with contributions from our team and community. We strive to provide a great experience for our existing and new community members by reviewing changes and integrating the contributions into our regularly planned updates. Our Mission is on a 30 year cadence. Our purpose is to help people increase their lifetime earnings through training, access to opportunities, and the DevSecOps platform. Our mission is the way we realize our purpose. By enabling everyone to contribute to and co-create the software that powers our world, we increase access for people to be creators. With more contributors and more creators, we increase both the volume and velocity of innovation. More innovation drives economic progress that benefits consumers, businesses, and the economy as a whole. As a result, innovation both directly and indirectly increases the total volume of available opportunities and average value of each individual opportunity. Access to a broader set of more valuable opportunities ultimately increases people\u2019s lifetime earnings. Our purpose is on the same 30 year cadence as our mission. Our purpose informs our mission, which directly or indirectly informs the rest of the items in our cadence. As a result, progress for the items on our cadence page like Yearlies creates progress for both our mission and our purpose. Our mission is the inspiration for our vision. Our vision is on a 10 year cadence. Our mission guides our path, and our values are the principles we live along this path. We firmly adhere to laws including trade compliance laws \u2013 see the GitLab Code of Business Conduct and Ethics, in countries where we do business, and welcome everyone abiding by those legal restrictions to be customers of GitLab. In some circumstances, we may opt to not work with particular organizations, on a case-by-case basis. Some reasons we may choose not to work with certain entities include, but are not limited to: This policy is in alignment with our mission, contributor and employee code-of-conduct and company values. Here are some links that may give you some background at how we arrived at this customer acceptance policy: We acknowledge the concerns to achieving our goals. We document them in our Mitigating Concerns page. \u00a0 Take GitLab for a spin See what your team could do with The DevSecOps Platform. Get free trial Have a question? We're here to help."
},
{
    "title": "GitLab Vision",
    "url": "https://handbook.gitlab.com/handbook/company/vision/",
    "content": "Our vision captures what we want to deliver to customers in the next 10 years. Today, we have the most comprehensive AI-powered DevSecOps Platform. This DevSecOps Platform shift is part of a larger trend: teams of all types are realizing that breaking down silos has compounding effects on productivity and collaboration. We see it with data and operations teams creating DataOps; we see it with machine learning and ops teams creating MLOps. As more companies (and more teams within a company) rely on our platform, we are positioned to become the AllOps platform \u2014 a single application for all R&D. This platform will offer significant and differentiated value to customers: For the next few years, the majority of our focus is on providing a rich and comprehensive DevSecOps platform to our customers. This is detailed in our company strategy. Gartner calls the combination of DevOps/MLOps/DataOps/AIOps xOps. Our Mission is on a 30-year cadence. It is the inspiration for this company vision, which is on a 10-year cadence. The vision here is reflected in our company strategy, which is on a 3-year cadence. You can find additional product vision details on our direction page. While we define our mission, vision, and strategy, we also acknowledge that we need to adapt with a changing market to meet customer needs. Netflix is a great example of this. Everyone knew that video on demand was the future. Netflix, however, started shipping DVDs over mail. They knew that it would get them a database of content that people would want to watch on demand. In other words, timing is everything. Additionally, we must ensure that our Platform is open. If a new, better version control technology enters the market, we will need to integrate it into our platform, as it is one component in an integrated DevSecOps product. GitLab has taken existing, fragmented software tooling markets, and by offering a consolidated offering instead, have created a new blue ocean. We would like to find more markets where we can repeat this same model. The desirable characteristics of such markets fall into two stages: category consolidation and creation. Our goal is to develop this model to be more quantifiable and formulaic, so that we can quickly and easily assess new opportunities. We acknowledge the concerns to achieving our goals. We document them in our Mitigating Concerns page. \u00a0 Take GitLab for a spin See what your team could do with The DevSecOps Platform. Get free trial Have a question? We're here to help."
},
{
    "title": "GitLab Strategy",
    "url": "https://handbook.gitlab.com/handbook/company/strategy/",
    "content": "Current strategy is in the internal handbook. The rest of this page desribes the strategy process. Our strategy is looking 3 years out and fits into our cadences. It also maps to and reflects GitLab\u2019s mission, vision and values. It is a living strategy, so we will revisit on a regular basis and iterate when there is reason to do so. Along the road to realizing our mission of everyone can contribute, our\nstrategic goal is to be the leading complete DevSecOps Platform. We help our customers build better software faster including developing cloud native applications, building mobile applications, and incorporating machine learning and artificial intelligence into their products and solutions. We believe that our dual flywheels (single application + open-core model) will propel us to efficiently be the default choice in the Enterprise market. As we execute on our strategy, it is important to use our financial targets as guide rails and mature our internal processes for building a durable business for the long-term. Our GitLab product vision is to deliver a single application for the entire DevOps lifecycle.  This is a very expansive product vision that requires us to build an enormous amount of product surface area.  Because we want to be efficient with capital, we want to build GitLab as a community. When we are early in a particular area of the product, we will plant seeds by shipping a small MVC. Shipping functionality that is incomplete to expand the scope sometimes goes against our instincts. However, planting those seeds even in an incomplete state allows others to see our path and contribute. With others contributing, we\u2019ll iterate faster and will accelerate the maturity of our offering faster than GitLab could on its own.  We can have a long tail of categories that are at a minimal maturity that don\u2019t get investment until they show traction. While these come with a low level of shame they allow the wider community to contribute and people to express interest. It is much more common for people to contribute to categories that already exist and express interest in categories already shipping in the product. A minimal category is the placeholder to channel energy, and it is our responsibility to till the earth with minimal iterations. GitLab the product should eventually have depth in every category it offers.  To build out real depth requires a shift in focus, from planting seeds to nurturing the product area to maturity. We should concentrate our nurture investments in the categories that have demonstrated monthly active usage, revenue contribution, and demonstrated customer demand.  As a product team, we\u2019ll be particularly focused on driving monthly active usage at the stage and group level.  This should lead to more Stages per Organization, which is important as each stage added triples paid conversion!  We\u2019ll also be heavily focused on driving usability, by measuring our system usability score, which is a measure of the user perception of GitLab\u2019s usability. If we effectively seed and then nurture, we can fully activate GitLab\u2019s two growth turbos, by creating wider community contributions and driving more stages per user. Please see our pricing model for details GitLab has two flywheel strategies that reinforce each other: our open core flywheel and our development spend flywheel.\nA flywheel strategy is defined as one that has positive feedback loops that build momentum, increasing the payoff of incremental effort.\nYou can visualize how the flywheels work in congruence via the diagram below. The KPI and responsibilities table lists the relevant indicator and department for every part of the flywheel. In the open core flywheel, more features drive more users which in turn drive more revenue and more contributions which lead to more users. The driving force behind the flywheel is that by using a DevOps platform to replace multiple point solutions, GitLab customers can achieve cost saving and efficiency gain. Therefore, when GitLab develops more features to improve the product maturity, it becomes easier to replace point solutions and GitLab will attract more users. GitLab is a complete DevOps platform, delivered as a single application, with contributions from the wider community. Compared to other DevOps platforms, GitLab leverages one or two unique turbos that boost the company: The advantage of a single application manifests itself if people start using more stages of the application.\nIn the graph below this is visualized with Stages per Organization (SpO), knowing that an organization using an extra stage triples conversion.\nIncreasing SpO drives both more seats and higher revenue per seat. In the development spend flywheel, we capture the relationship between merge requests (MRs), changes in ARR from one period to the next (Delta ARR), hyper growth R&D spend and the resulting impact on MRs. We see that more MRs increase stage maturity which drives more monthly active users and stages per user which in turn drives more seats and more revenue which funds R&D spend and leads to more MRs. Legend with links to the relevant metrics: To make sure our goals are clearly defined and aligned throughout the organization, we make use of Objectives and Key Results (OKRs) and Key Performance Indicators (KPIs) which are both publicly viewable. Our North Star KPI is revenue vs. plan. While our revenue data is limited access given that it is material nonpublic information (MNPI), revenue versus plan is a leading indicator of our likelihood of success in achieving revenue targets. Predictable revenue attainment is critical for continued business success. Our yearly plans are linked from the relevant cadence section. Activity Positioning and SWOT published in internal handbook with description of strategy process two weeks post offsite E-group capability gap exercise at e-group offsite (prework) Complete capability gap exercise at VP level to bring more input into the group Pull together comprehensive view of capabilities from e-group and VP sessions\nCraig/Dave E-group June Virtual Offsite Sessions: Kickoff LRO with inputs from this process"
},
{
    "title": "GitLab Communication",
    "url": "https://handbook.gitlab.com/handbook/communication/",
    "content": "We\u2019re an all-remote company that allows people to work from almost anywhere in the world. We hire great people regardless of where they live, but with GitLab team members across more than 60 countries, it\u2019s important for us to practice clear communication in ways that help us stay connected and work more efficiently. To accomplish this, we use asynchronous communication as a starting point and stay as open and transparent as we can by communicating through public issues, merge requests, and Slack channels. We also place an emphasis on ensuring that conclusions of offline conversations are written down.\nWhen we go back and forth three times, we jump on a synchronous video call. We communicate respectfully and professionally at all times. Embracing asynchronous communication and learning to use it effectively requires a mental shift. This can feel unusual or even uncomfortable for those who come from a colocated environment, where in-person meetings and communiques are the norm. Learn more about mastering the use of the written word in an all-remote setting. If you see something that concerns you in Slack, Issues, Merge Requests, Video, Emails or any other forum, we encourage you to respectfully say something directly to the individual in a 1:1 format. If there is an issue to raise regarding someone\u2019s communication or conduct, team members should follow the process for raising communication concerns by sharing their concern with their manager or, if preferred, email Team Member Relations (teammemberrelations@gitlab.com) directly. In an all-remote setting, where team members are empowered to live and work where they\u2019re most fulfilled, mastering asynchronous workflows is vital to avoiding dysfunction and enjoying outsized efficiencies and lifestyle flexibility. Asynchronous communication is the art of communicating and moving projects forward without the need for additional stakeholders to be available at the same time your communique is sent. To learn more on when to use asynchronous and synchronous communication, examples of async workflows in practice at GitLab, core async behaviors, and to take an async knowledge assessment, visit GitLab\u2019s guide to embracing asynchronous communication. When working on a problem or issue, communicate directly with the people you need support from rather than working through reporting lines. Direct communication with the people you need to collaborate with is more efficient than working through your manager, their manager, or another intermediary.\nEscalate to management if you are not getting the support you need. Remember that everyone is a manager of one and they might have to complete their own assignments and inform the reporting lines. (This guidance supplements and overlaps with GitLab\u2019s SAFE Framework, the guidance on the use of the internal handbook, and the additional guidance on this page. We ask our team members to consider the factors below in their communication. ) As GitLab matures, we want to continue to foster discussion while evolving our communication guidelines so that topics that are potentially GitLab sensitive are discussed in appropriate forums. This is particularly relevant as team members heavily leverage async modes of communication including merge requests, issues and epics, and in Slack communication. Words have impact long after they are written, and even when you\u2019re communicating internally, the manner in which you speak with one another should be viewed through an external lens. For additional information, please review our Guidelines for communicating effectively and responsibly through text. At GitLab, we are public by default, but some information is classified as internal or limited access. Please see the confidentiality levels handbook page for details on this. The above examples overlap with the GitLab\u2019s SAFE Framework examples. We recommend you to further review that page for more information and context. We encourage communicating risks to GitLab, its team members, or customers in a synchronous 1:1 setting. Where possible, a group of Communications Champions, made up of global team members and people managers, will be given a preview of companywide changes to provide feedback, so that team member perspectives have been taken into account. We\u2019ll introduce two cohorts for FY25: Each team member will participate for two quarters/6 months. Should a team member no longer be able to participate during their cohort; they can be backfilled. We\u2019ll engage bi-weekly with planned or urgent information seeking. We\u2019ll create a net-new slack channel for each group:\nNaming convention: #comms-champions-fy25-a People managers will nominate team members through a google form. After nominations, PBPs will review the list to ensure all are in good standing and collaborate on potential participants. People Comms & Engagement will make final selections. The table below outlines an overview of different communication forums at GitLab, and the considerations team members should think through related to potentially GitLab Sensitive topics when determining which forum to leverage. When in doubt, you can reach out to your People Business Partner and/or your leadership team  directly. Please see our Project names section. Internal communication is any work related communication at a company.\nInternal Communication includes conversations between team members, wider team discussions, or internal announcements.\nAt GitLab, everyone can contribute to the effectiveness of Internal Communications to support aspects of GitLab culture, such as intentional transparency and engaging people in open dialogue. Since we believe that all team members must be Managers of One, most communication is handled by the relevant group, but we know that some communications are more sensitive and contentious than others.\nIn those cases, the DRIs may want to engage the Internal Communications function. We want to avoid unstructured content which includes FAQs (Frequently Asked Questions), especially for internal communication. FAQs tend to take on the voice and concerns of assumed personas. Instead of assuming questions, aim to articulate key facts as statements and use these to structure content under topical headers which aren\u2019t questions. Structured content around GitLab, the product, should be in GitLab Docs and structured content around GitLab, the company, should be in the handbook; we should not use separate documents or locations to share this information. As an example, let\u2019s say your FAQ would have a question like: Q: I\u2019m not seeing widget X, what should I do?\nA: If you\u2019re not seeing widget X, you can verify if it\u2019s enabled or not by going to User Profile -> Settings and ensure the checkbox is enabled under Enable widget X You can reframe it to: How to enable widget X You can enable widget X by going to User Profile -> Settings and ticking the checkbox next to Enable widget X then clicking on the Save button Content guidelines across the industry support avoiding FAQs: Employ multimodal communication to broadcast important decisions. To reach our distributed organization, announce important decisions in the company announcements Slack channel, email the appropriate team email lists, Slack the appropriate channels, and target 1:1s or other important meetings on the same day, with the same information. When doing this, create and link to a single source of truth: ideally the handbook, otherwise an epic, issue, or Google Doc. The email or Slack message should not be the source of truth. When referring to email that recipients should have received, reference the sender and subject of the email so it\u2019s easy to find. For example, \u201cYou should have received an email from Jane Smith with the subject \u2018Training Seminar Details\u2019\u201d. If something is behaving strangely on https://gitlab.com, it might be a bug. It could also mean that something was changed intentionally. Please search if the issue has already been reported. If it has not been reported, and you are sure it is a bug, please file an issue. If you are unsure whether the behavior you experience is a bug, you may ask in the Slack channel #is-this-known.\nIf you know which stage of the DevOps lifecycle is affected, it is also okay to ask in #s_{stage}, for example #s_manage. When you ask: When taking notes in an agenda, in the handbook, or on our OKRs, keep items numbered so we can refer to Item 3 or 4a.\nThe number is not a signal of the importance or rank of the subject unless explicitly stated to be such.\nIt is just for ease of reference. Linking should not be in one direction. We should go beyond deep-linking to create a richer web of links that can surface content and ensure people consider all pages when making updates. When linking one page to another, try to link back as well. Instead of only linking from Page A to Page B, both link Page A to Page B and link Page B back to Page A. For example, the Live Doc Meeting section of the All Remote Guide links to the Live Docs Meetings page. The Live Docs Meetings page links back to the Live Doc Meeting section of the All Remote Guide. In informal acknowledgement scenarios, such as on Slack or on issue comments, it is common practice to use the following: In order to effectively communicate an important change to hundreds of distributed employees, we occasionally use an ACK process. To prevent overuse, this should only be used by a member of the exec team. Anyone may ask an exec to sponsor one. As a guideline, we\u2019d expect no more than one per quarter to be sent out. Too many ACKs lose power. To initiate an ACK process: As we continue to build on inclusion, recognition is a key and transformative tactic. Thanking team members provides an opportunity for them to be recognized for their contributions, influences engagement behavior, and acknowledges to team members their work is seen. By saying thanks, you are contributing to and supporting the value of DIB. Add Values emoji reactions to thank you messages in the #thanks slack channel\nor feel free to use them in GitLab.com, other slack channels and\nsocial media, when you see alignment to our values: GitLab\u2019s values.   As a second iteration, we have added these custom emoji to GitLab to enable tanuki values reactions in issues, epics, and MRs within the gitlab-com and gitlab-org groups. As a later iteration, we will begin tracking the number of emoji reactions for each value through the Reacji API and update this page with our findings! Indicate your availability by updating your own calendar using Google\u2019s \u201cout of office\u201d feature and include the dates you plan to be away in your automated response. Note that this feature will automatically decline any meeting invitations during the time frame you select. Informal communication is made up of interactions between co-workers that are unofficial in nature and focus on building social relationships outside of the normal hierarchy of a typical business structure. In other words, it\u2019s what happens when we get to know each other and talk about anything other than work. Informal communication is a vital part of GitLab culture, and we\u2019ve listed 20+ ways to engage. If there is something that you want to discuss, but you do not feel that it is\na reasonable option to discuss with either your manager or CEO, then you can reach\nout to any of the other C-level GitLab team members. When possible, it\u2019s best practice to start a discussion with a Merge Request (MR) instead of an issue. An MR is associated with a specific change that is proposed and transparent for everyone to review and openly discuss. The nature of MRs facilitate discussions around a proposed solution to a problem that is actionable. An MR is actionable, while an issue will take longer to take action on. Some merge requests that involve a big decision or change tend to collect a large amount of feedback. As GitLab grows in size, it is unrealistic for a single person to respond to potentially hundreds of comments. To remain efficient in these MRs and to make it scalable, it is important for the DRI to receive a clear signal of input that is shared on the merge request. Some MRs may be marked as \u201cManager Mention MRs\u201d by clearly designating them as such at the beginning of the MR description with the following code block: Additionally, add the ~\"Manager Mention MR\" label to the merge request. This will make future analytics on Manager Mention merge requests more easily identifiable. It also enables managers to subscribe to the label to be notified when an MR has elected the Manager Mention MR designation. We tried Manager Mention MR\u2019s for the first time in a recent announcement (2021-03-03) but this did not work well and we are working on making it better. We\u2019re starting with a more thoughtful and transparent process in our communications cadence and approach going forward, including all directs and people managers getting a few days\u2019 notice before important company-wide changes are announced to all team members. This will allow all directs and people managers to feel more enabled and better understand the why behind big changes in order to scale communication to team members. For all managers: It is important to ground yourself in the contents of the changes before the announcement goes live to all team members. If a team member tags you in a Manager Mention MR, it is your role to respond candidly and thoughtfully to their question or comment. If the line of questioning in the Manager Mention MR gets out of your depth, ask the DRI to help answer. If a team member comments without a manager tagged, the comment will be closed with a link to this handbook section or closed without comment. In a situation where a team member leaves a wildly inappropriate comment in the Manager Mention MR, you should feel empowered to delete comment and talk to your team member 1:1. Consider subscribing to the label ~\"Manager Mention MR\" to be notified when MRs transition to this designation. For team members: Check if the MR you are about to comment on has the ~\"Manager Mention MR\" label. Check each time as the label may have been added since you last commented. When leaving a comment in a Manager Mention MR, frame the comment as a question or suggestion to your manager directly, and not anyone else, including the DRI. We do this to scale communication, as it is unsustainable for the DRI to answer every question. MRs should not start out as a Manager Mention MR as we prefer communication to be direct. They should only be designated as such after the number of comments on them grows to a level that is unsustainable for the DRI. An exception to this is compensation changes and other company-wide announcements that can be sensitive/contentious in nature since they have historically generated many comments. When an MR is changed to be Manager Mention, the person making this change should add a comment stating this so that everyone tracking the MR can be informed. Issues are valuable when there isn\u2019t a specific code change that is being proposed, such as: When utilizing issues, it is still important to maintain focus by defining a single specific topic of discussion and the desired outcome that would result in the resolution of the issue. Issues should not be open-ended or go stale due to lack of resolution. For example, a team member may open an issue to track the progress of a blog post with associated to-do items that need to be completed by a certain date (e.g. first draft, peer review, publish). Once the specific items are completed, the issue can successfully be closed. Below are a few things to remember when creating issues: Pro Tip: When creating a Merge Request you can add closes: #[insert issue number here] and when the Merge Request is merged, the issue will automatically close. You can see an example of this here. Note: Automatic issue closing is disabled on some projects. Our companywide announcements channel is #company-fyi.\nIt is an announcement only channel, meaning that communications need to be approved before they can be posted. To minimize noise, announcements made in #company-fyi should not be duplicated in #whats-happening-at-gitlab. Be mindful of the attention economy. In order to post or have a message posted in #company-fyi, please reach out to the internal communications team or your function\u2019s executive who can approve the message and post it. Examples of what should not go in #company-fyi (as per new group guidelines): The above should all go in the new #whats-happening-at-GitLab channel (formerly the #company-announcement channel). Due to the volume of posts in the Slack channel, we recommend that you do not use #whats-happening-at-gitlab as a sole location for important announcements as information might get lost or muted. Examples of important items include but are not limited to: Meetings are incredibly expensive since they require synchronous time.\nThe most common meeting problems can all be addressed by following the above guidelines around scheduling meetings.\nSome of the most common meetings problems are outlined below: If folks are involved in a meeting and have capacity to do so, they should take notes using GitLab\u2019s Live Doc Meetings principles. This is important, because: It may look like a few people are already taking notes, do not see this as a deterrent for helping. Initial note takers may be first to show up and then see it as their responsibility to continue if no one else is stepping in. While meetings recordings are helpful, written notes are more efficient to read and offer greater opportunities for async engagement. Takes notes even when a meeting is being recorded. GitLab Executive Business Administrators sometimes support teams by taking notes. Since note taking takes time away from their other activities and can often be done by other folks, consider the following before engaging an EBA in a meeting solely for note taking purposes. Note taking helps us to work asynchronously. Team members can add thoughts to an agenda in advance of a meeting and understand what was discussed if they cannot attend. It also offers a record of discussion. Consider the following best practice when taking notes in meetings: If you have any questions about what may or may not be a sensitive topic, please refer to our SAFE Framework or reach out via the #safe Slack channel Presenting during meetings requires valuable synchronous time. Instead, recorded presentations make content accessible, prevent confusion, and increase participation for team members that prefer consuming content asynchronously. Remember it is not required to have a presentation or have a pre-recorded presentation. In the video below, GitLab CEO Sid Sijbrandij explains why there are no presentations in most meetings. Pre-recorded presentations enable: There are times when presenting during a meeting is needed. This may occur when adding more context to a specific topic on slides. If this is the case, consider the following: Best Practices for Pre-Recorded Presentations While most meetings should not have presentations, there are a few exceptions. Specifically, we may use synchronous touch points in meetings with large numbers of folks. These tend to be meetings used for building team cohesion and alignment. For example, GitLab Assembly or the Functional Leaders Meeting. GitLab has the following meeting framework for determining which meetings should have presentations: Introductions can be helpful during some external meetings, such as executive sales calls. In those meetings, use these guidelines: If you\u2019re scheduling a meeting across multiple regions, consider using the time ranges below to respect common working hours. The suggested times are organized by the regions that you\u2019re trying to accommodate.\nEach suggested window is shown in the local time zone.\nFor example, if your meeting includes team members in EMEA and AMER, you could consider scheduling from 8:00 AM to 10:00 AM Pacific Time. Note: Time zone offsets change throughout the year due to Daylight Savings Time, Summer Time, and similar time changes, so these suggested times may be less convenient at different times of year. When scheduling meetings with two or more sessions (usually when trying ensure worldwide coverage for all team members),\nname them after the topic, appended with a session number based on the order they show up in the calendar.\nTeam members will see the meeting invites in their email or calendar in relation to their local time zone and can decide for themselves which session to attend, based on their working hours. Avoid: For example: You are the manager of your attention, and you decide when you do or don\u2019t pay attention in a meeting. You will always have more work than time in your life.\nIf you get invited to a meeting you don\u2019t think you should go to, you should decline the meeting.\nIt is better to cancel than to show up and not pay attention. On the other hand, not every part of a meeting is relevant, but it can sometimes be helpful to have more people in a call.\nIf you only have one discussion point, if possible, try to reorder the meeting agenda to have your point first and then drop from the call.\nIf you get asked a question when you\u2019re not paying attention, it is an okay use of time to repeat a question every now and then.\nIf training is required for one\u2019s role, team members should plan to give the training full attention\u2013especially if engagement in discussions or breakout rooms is required. If training is \u2019nice to learn\u2019 or \u2018optional\u2019 for team members, multi-tasking can be done at the team members discretion. We don\u2019t use the first 15 minutes of a meeting to read the materials like they do at Amazon. You can use the start of a meeting to review the materials for the meeting if you need to, given you do not have to be paying attention, but that should not delay the start of the meeting for the people that already have questions based on the materials. Meetings start on time at GitLab. Do not use your camera to signal you\u2019re not paying attention; cameras should always be on. There are too few hours in a week, so we expect each team member to manage their attention. If you\u2019re hosting a meeting, don\u2019t tell people to give you their attention or stop multi-tasking. Respect each team member\u2019s agency over their time. Instead of demanding attention, earn participants\u2019 attention by organizing and facilitating meetings so they are compelling to attendees. You should take pride in being the first person to add a question to a\nmeeting agenda, however unlike the First post\nmeme we do want the first post to be\nmore than just \u201cFirst!\u201d. The meeting DRI will be happy to see there is a\nquestion ready before to kick off the meeting. The Meeting DRI should remember\nto thank the person for asking the first question. Never do a countdown or say something like. \u201cI\u2019ll give it x seconds\u201d, people are very unlikely to ask a question if you do that. Either ask for a question, wait for a question, or end the call. In calls that have remote participants everyone should use their own equipment (camera, headset, screen). When multiple people share equipment the following problems arise for remote participants: The people sharing equipment also have problems because they don\u2019t have their own equipment: The disadvantages for remote people are much greater than for the sharing people and hard to notice for the sharing people.\nThe disadvantages cause previously remote participants to travel to the meeting to be in person for a better experience.\nThe extra travel is inefficient since it is time consuming, expensive, bad for the environment, and unhealthy. Theoretically you can have multiple people in a room with their own equipment but in practice it is much better to be in separate rooms: Ask Me Anything meetings can be a useful opportunity for team members to meet a new leader, learn more about an existing team member, or gain clarity on a recent change. Fireside chats are informal conversations between a host and a guest. The guest is typically a new leader, board member, or guest speaker. They are a useful opportunity to learn specific information about these individuals and their professional careers and personal interests. Fireside chats allow the audience to learn more about the guests in a casual and approachable setting. Format: In advance of the call, the host will prepare questions and share them with the guest. During the call, the host will moderate the conversation with the guest, by verbalizing the prepared questions. There is specific amount of time reserved at the end of the agenda for questions from attendees. A Walk and Talk call is when team members step away from their computers and get outside for a meeting. The difference between a coffee chat and a Walk and Talk call is that a Walk and Talk call be held with people that you interact with frequently at GitLab. It could be social in nature or focused on a specific problem/topic that needs to be discussed. If it\u2019s a problem-solving focused discussion, the outcome should be captured in a merge request. It should not be used if the problem being discussed requires screen sharing or detailed note taking. There are great physical and mental health benefits to a walk and talk call. There are also benefits with increased focus and creativity. A Walk and Talk can also help prevent Zoom fatigue. The team members can use Zoom on their mobile device with the audio only function, or call one another from their preferred mobile device. A walk and talk call should be agreed to in advance to ensure that the local weather is compatible for a walk in both locations and that the walk and talk call fits into both team members\u2019 schedules. We\u2019ve created a Slack channel #walk-and-talk-meetings where, if you\u2019d like, you can share pictures from your walking meetings. After GitLab releases a new version every month, we have a\n30-minute call a few days later reflecting on what could have been\nbetter: We spend the first part of the retrospective meeting reviewing the action\nitems from the previous month. On the 8th of each month (or the next business day), we have a kickoff meeting\nfor the version that will be released in the following month. The product team and other leads will have already had\ndiscussions on what should be prioritized for that release. The purpose of this kickoff is\nto get everyone on the same page and to invite comments. Both the retrospectives and kickoffs are live streamed to our GitLab Unfiltered YouTube channel\nand posted to our Unfiltered YouTube channel. As GitLab continues to grow, sharing knowledge across the community becomes even more important.\nThe Deep Dives page describes initiatives we are trying to encourage.\nThis aligns with how we work since everything at GitLab is public by default. GitLab has a specific process to follow in crisis situations to ensure effective communications. Details can be found in the internal handbook. On 2022-01-20, the L&D team hosted Lorraine Lee for a live speaker series on video and presentation techniques in an all-remote workspace. Key points addressed in the training include: Watch the replay below: As you\u2019re creating external or business content for GitLab, please refer to the GitLab Content Style Guide. For technical content, you can reference this word list. This list offers additional guidance for written communication at GitLab: Many times an explanation can be aided by a visual.\nWhenever presenting a diagram, we should still allow everyone to contribute.\nWhere possible, take advantage of the handbook\u2019s support for Mermaid. If you are new to using Mermaid or need help troubleshooting errors in your Mermaid code, the Mermaid Live Editor can be a helpful tool.\nWhere taking advantage of Mermaid isn\u2019t possible, link to the original in our Google Drive so that the diagram can be edited by anyone. At GitLab we use ubiquitous language to increase communication efficiency. This is defined in Domain-driven design as: \u201cA language structured around the domain model and used by all team members to connect all the activities of the team with the software.\u201d We use it for activities in GitLab, even ones not implemented in software. By having ubiquitous words to identify concepts we prevent confusion over what is meant, for example we refer to parts of our organization as a function, department, or group depending on exactly what is meant. Make sure that domains don\u2019t overlap, for example organization size and deal size don\u2019t reuse words to prevent overlap. If a term is ambiguous don\u2019t use it, for example our hiring team uses the terms roles and vacancies, but avoid the ambiguous word job. Make sure that projects and working groups have clear and direct names. Prefer \u201cCI Spend Reduction Working Group\u201d to \u201cProject Raven Working Group\u201d. Make sure that people can infer as much as possible from the word, for example our subscription options allow you to know if someone is using self-managed or GitLab.com. Make sure terms don\u2019t overlap without clearly defining how and why, for example see our tier definitions. Keep terms to one or at most two words to prevent people from introducing ambiguity by shortening a term. When using two words make the first word unique because people tend to drop the second word more often. MECEFU is an acronym for Mutually Exclusive Collectively Exhaustive Few words Ubiquitous-language. You pronounce it: MessiFu. Think of the great soccer player Lionel Messi and his kung fu or soccer fu skills. We want to use MECEFU terms to describe a domain to ensure efficient communication. MECEFU terms have 4 characteristics that help with efficiency: An example of a MECEFU term is our sales segmentation: One nit-pick is that the Medium of SMB and Mid of Mid-Market sound very similar. Simple Language is meant to encourage everyone at GitLab to simplify the language we use.\nWe should always use the most clear, straightforward, and meaningful words possible in every conversation.\nAvoid using \u201cfluff\u201d words, jargon, or \u201ccorporate-speak\u201d phrases that don\u2019t add value. When you don\u2019t use Simple Language, you: When you do use Simple Language, you: Here\u2019s an example: Original sentence We\u2019re now launching an optimization of our approach leveraging key learnings from the project\u2019s postmortem. A Simple Language sentence We\u2019re creating a new plan based on what we learned from this project. Simple Language is important both when we\u2019re speaking to other team members and when we\u2019re representing GitLab to people outside the company. Be sure to use Simple Language in written communications as well.\nOur handbook, website, docs, marketing materials, and candidate or customer emails should be clear, concise, and effective.\nCorporate marketing maintains guidelines on GitLab\u2019s tone of voice. For example, do not suggest that you\u2019re \u201cworking in real-time\u201d when a matter is in disarray. Convey that a lack of organization is hampering a result, and provide feedback and clear steps on resolving. Do not use a cool term such as \u201ctiger team\u201d when the existing term of \u201cworking group\u201d is more exact. While cool terms such as these may be useful for persuading colleagues to join you in working towards a solution, the right way isn\u2019t to use flowery language. The last example is when we used \u2018Prioritizing for Global Optimization\u2019 for what we now call a headcount reset. When we renamed it we saw a good reduction in the use of this disruptive practice of moving people around. Using American English as our standard language supports our values such as efficiency, results, and transparency.\nCareful use of another person\u2019s language can be a celebration of diversity and build an atmosphere of inclusion. The guidance in this section applies to written one-to-one communication, for example, merge request comments between an author and reviewer, not merge request descriptions or commit messages. Also keep the following in mind: Here\u2019s an example: Hey @nmalcolm, I left some suggestions for your merge request. Ka mau te wehi! (Te Reo M\u0101ori: great work / well done!) \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059 (Japanese: thank you very much) for the review @cynthia! Avoid using Git in the naming of internal and external company related programs (BagGit, GitFit, Gitty, GitIt, etc.). Referencing Git creates an inaccurate perception that GitLab has a narrow focus. While GitLab started as a source control platform, it has become The DevOps Platform. We have a low internal email culture, as we see greater efficiency in other forms of communication (e.g. Slack). If you are emailing, please use the following guidelines: Slack is used for: Use a bias for action to quickly move conversations that require collaboration and action out of Slack and into an issue. Only 90 days of Slack activity will be retained, so Slack should specifically NOT be used for: Internal Slack messages between team members are still considered professional communication. Please do not use or add emoji\u2019s to Slack that are of a political, religious or of a sexual nature. You can refer to the Religion and politics at work section of the handbook. When in doubt do not use or add the emoji. If you have any concerns about an emoji that was used, please reach out to the author or if you are not comfortable doing so please reach out to your People Business Partner. There is a lot of information pertaining to Slack, as it is a critical part of GitLab\u2019s communication. See the Slack tools and tips page. Note: We don\u2019t use the term private message, because these direct messages are not inherently private like a phone call or private letter. The messages are potentially accessible by Workspace admins or via Backups. Slack refers to these types of messages as direct messages themselves. When using Slack for work-related purposes, please avoid direct messages. Direct messages discourage collaboration. You might actually be contacting the wrong person, and they cannot easily redirect you to the right person. If the person is unavailable at the moment, it is less efficient because other people cannot jump in and help. Use a public channel and mention the person or group you want to reach. This ensures it is easy for other people to chime in, involve other people if needed, and learn from whatever is discussed. If someone sends you a work-related direct message, it is okay to let them know you\u2019d like to take the conversation to a public channel, linking to this section of the handbook. The process might look something like: If you find yourself getting a lot of direct messages that should go in a public channel, consider changing your Slack status to an attention grabbing emoji and set it to something like: If you must send a work-related direct message, don\u2019t start a conversation with \u201cHi\u201d or \u201cHey\u201d as that interrupts their work without communicating anything. If you have a quick question, just ask the question directly, and the person will respond asynchronously. If you truly need to have a synchronous communication, then start by asking for that explicitly, while mentioning the subject. e.g., \u201cI\u2019m having trouble understanding issue #x, can we talk about it quickly?\u201d. Use private channels instead of group direct messages. Group direct messages are very hard to maintain, track, and respond to. They also have a key limitation in that you can\u2019t add people to the conversation. This is a hindrance to collaboration and transparency. Consider whether the conversation can take place in a public channel. If not, please use a private channel instead. This channel may have a short-term purpose. It is acceptable to leave the channel and/or archive it if you are no longer an active participant or the channel is no longer in use. For all the same reasons that we want to avoid direct messages, use public channels, and be handbook-first, we track the % of messages that are not DMs.\nAs we grow headcount, we exponentially increase the lines of communication- 3 people have 3 communication lines, 4 have 6, and 41 have 820.\nAs a result, there is a natural tendency for people to prefer private channels of communication.\nThe intentions are good, as people are looking to reduce noise for others, but this can lead to the same problems as described elsewhere on this page, notably: Slack is our primary source of chat communication and is where many personal interactions happen.\nWe want to continue to encourage folks to build personal relationships with one another which will often happen over DMs. We know that DMs will always exist.\nWe don\u2019t want to eliminate them.\nWe set a target of Slack messages that are not DMs being at least 25% of messages.\nAt the time that we set this target, it was <20% of communications. Everything at GitLab is a work in progress, so if we see a culture shift where Slack is not where work is occurring, thus inflating the amount of communication that is personal that is occurring, we can always change this KPI, but the steady growth of Slack messages paralleling the number of team members does not seem to suggest that is the case. The previous KPI (% of messages sent in public channels) was about public channels but since some necessary parts of the business occur in private channels (discussions around comp, hiring, talent acquisition- and we do A LOT of hiring), this version of the KPI makes more sense.\nEarlier in our history, 50% of all communication was in public channels. Note: Some of these charts require data from a sheetload file that needs to be manually updated. To self-serve data for a chart with missing data, please visit Slack\u2019s workspace administration page. It provides guidance on how to access Slack\u2019s analytics dashboard for a particular workspace. If this data is required in the charts below, you can ping the #data channel for a refresh. If this becomes a common request, we may choose for the manual step to become regularly scheduled. Start by understanding what we mean by respecting time. We should err toward putting material into channels over DMs and public channels over private channels even though we understand that this will generate more messages that can be read by more people. Respecting time is not about reducing the overall volume of channel messages that team members receive. It\u2019s about making sure that messages are targeted, expectations for asynchronous responses are clear, and we are communicating with consideration. The following tips provide ways to work respectfully with others given this context, though is not an exhaustive list: If you have a question that you can\u2019t find the answer to in our handbook (or you need help finding something in the handbook) team members across the company are here to help. Go directly to the subject matter experts/source in the designated slack channel to ensure your question is addressed. If your question doesn\u2019t relate to any of the existing topics: The times this feature would be used would be to comply with certain obligations. Corporate Export must be enabled by Slack in accordance with Slack\u2019s policy, which can be found here. Examples of instances where GitLab may need to use this feature may include, but are not limited to, those situations listed in Slack\u2019s documentation. No. The Slack Workspace Owner has the ability to export data from all direct messages and private channel conversations for the maximum retention period set by GitLab, which is currently set for 90-days. All messages that are older than 90-days cannot be exported by the Workspace Owner or any other Team Member at GitLab. While messages are not actively monitored, GitLab reserves the right to monitor its software for the reasons stated in its Employee Privacy Policy, including, but not limited to, the safety and protection of our Team Members, the protection of our intellectual property, and the exercise or defense of legal claims. Please keep GitLab values in mind when communicating directly with other team members.\nIf you have a confidential personal issue that you do not feel comfortable discussing via a business-provided internal communications tool, it is recommended to use a personal form of communication such as a text message or phone call.\nFor additional questions, please address in the issue. To use the \u201cSlack Down!\u201d group chat on Zoom: Once service is restored, go back to Slack. To use Slack Huddle: Once service is restored, go back to Zoom. Join the Slack Down! room on Hangouts Chat.\nOnce service is restored, go back to Slack and Zoom. Never use a Google Doc / Presentations for something non-confidential that has to end up on the website or the handbook. Work on these edits via commits to a merge request. Then link to the merge request or diff to present the change to people. This prevents a duplication of effort and/or an out of date handbook. Google Docs can be useful when rapidly iterating/commenting/suggesting on the content, but if the content is meant to be long lived it should be moved to the handbook as an SSOT and deprecated with a link to the handbook page. If the content is short lived, e.g. one-time report that won\u2019t be referred to beyond 2-3 weeks, it can remain in a Google Doc or presentation. Google Docs Pageless format is the preferred format for company documents that won\u2019t be printed. If you set your default to Pageless then this will be applied to all future documents as well. If a document is likely going to be printed (for example, a contract) the older paged style is acceptable. See Good practices and helpful tips for help navigating the pageless format. If you do need a Google Doc, create one with your company Google Workspace (formerly G Suite)\naccount and set the visibility, access controls and searchable flag according to the following guidelines. The recommended defaults when sharing a document for GitLab internal purposes is setting visibility to GitLab, access to Editor and searchable\nCan find in search results to ensure everyone can contribute! Note:\nTo our knowledge, it is not possible to set the default to Can Edit and you have to change the permissions from View manually. We hope that Google adds this capability in the future. Reference Google\u2019s documentation on Link Sharing to learn more. Pages like this are part of the handbook. The GitLab handbook is the central repository for how we run the company. GitLab Docs - docs.gitlab.com is where you can find documentation on GitLab, the product. repository/repositories are where files are kept under source code management. In most cases, requires MRs to merge. The Handbooks are in a repository, our code is in a repository, etc. README - README.md files are what are shown by default when you browse a repository. Contains useful information to give context on what the project/repository are for. These can also be used for user profiles as personal READMEs. We recommend you set your Google Calendar access permissions to \u2018Make available for GitLab - See all event details\u2019. Consider marking the following appointments as \u2018Private\u2019: There are several benefits and reasons to sharing your calendar with everyone at GitLab:  If you add blocks of time spent on recurring tasks to your Google Calendar to remind yourself to do things (e.g. \u201cCheck Google Analytics\u201d), consider marking yourself \u201cFree\u201d for those events so that coworkers know they may schedule a meeting during that time if they can\u2019t find another convenient time. This feature allows you to create a link to an availability schedule that you can send to your customers or coworkers for them to schedule a call according to your availability. This allows you to only show available spots while keeping your other calls private. This also avoids having to go back and forth between you and other person figuring out what day and time works best for both of you. Since this is a native Google Calendar functionality, there is no need to set up integrations with your calendar like other scheduling tools. A member of our Customer Success team created a demo video of how to use this feature. Key practices to consider during any meeting are listed below. GitLab team members are not authorized to speak with the media or analysts on behalf of our company unless authorized by our Marketing department. Unless authorized, do not give the impression that you are speaking on behalf of GitLab in any communication that may become public. This includes posts to online forums, social media sites, blogs, chat rooms, and bulletin boards. This policy also applies to comments to journalists about specific matters that relate to our businesses, as well as letters to the editor and endorsements of products or services. For more, please visit the Corporate Communications handbook section. GitLab as the leader in all remote work creates opportunities for our team members to receive requests from external 3rd parties to participate on panels, blogs or news publication or articles. Recently our team members have been approached by external 3rd parties looking to pay or compensate GitLab team members for their time to discuss GitLab remote practice to help them guide a client. Other third parties may contact GitLab team members to provide subject matter expertise that they may have by virtue of their role at GitLab. As in any request we ask that team members verify who they are speaking with to make sure the source is indeed a valid and legitimate request. Always remember that you represent GitLab and if any question makes you uncomfortable or gives you a pause on whether you should answer then we recommend that you do not answer. A third party\u2019s questions regarding GitLab financials, sales, compliance, executives or specifically where the company is heading should be treated with the most caution. We want and encourage all team members to be remote evangelists and this can be done without giving very specific information about GitLab. If you have any concern about a request please reach out on slack to #external-comms Please see our team member social media policy. See the YouTube page for options and instructions for posting recordings and live streaming to our YouTube channels. If you need to provide the details of GitLab\u2019s contact information you can take the address from the visiting page for reference; or the mailing address of the office in the Netherlands if that is more applicable. If a phone number is required, leave this field empty by default. If that is not possible, then use\nthe general number (+1-415-761-1791), but be aware that this number simply guides to a voice message that refers the caller back to contacting us via email. Competencies are the Single Source of Truth (SSoT) framework for things we need team members to learn. In an all-remote organization effective communication is key to exchanging knowledge, ideas, and information. Effective communication at GitLab: If you would like to improve your skills or expand your knowledge on topics relating to Communication at GitLab, check out our resources: Skills and behavior of applying effective communication as a Team Member: Skills and behavior of applying effective communication as a People Manager: A diversity, inclusion and belonging \u201cally\u201d is someone who is willing to take action in support of another person, in order to remove barriers that impede that person from contributing their skills and talents in the workplace or community. It is not required to be an ally to work at GitLab. At GitLab it is required to be inclusive. Being an ally goes a step beyond being inclusive to taking action to support marginalized groups. The first step in being an ally is self-educating. This is a page to list resources that GitLab team-members have found helpful in learning how to act as an ally. GitLab uses Zoom as the primary video collaboration platform for internal and external communications. Some of our customers and partners have different preferred tools and to facilitate the communication with those parties, GitLab provides licenses for WebEx and MS Teams. This service is only provided to team members that have a business need to host meetings and where Zoom is not accepted. It is not efficient for GitLab to use multiple video conferencing tools, however we encourage the use of the most popular ones among our customers and partners when needed. E.g.; Zoom, WebEx, MS Teams, Skype, etc. At GitLab, Slack is critical to our communication with each other.  While it enables real-time communication, we also are careful to remain true to our asynchronous mindset, suggesting that GitLab team-members set \u201cdo not disturb\u201d and not expect real-time answers from others all the time. There are groups of channels that can help with various areas of GitLab. This page speaks to a few subsets of those channel groups. The purpose of this playbook is to help those who are looking to create video content determine what type of video they should create, how to get it done, and most importantly identify why the video should be created in the first place. The first thing you should ask yourself when considering a video project is, \u201cwhy am I doing this video?\u201d In asking yourself that question, figure out what your purpose is for the video and why you feel there is a need for it. Also, be sure to check that a video hasn\u2019t already been created that fulfills the content gap you are seeking to fill. There are times in everyone\u2019s life when you can feel overwhelmed, anxious, angry or irritated about a situation.  At the next small disturbance it pushes you to react in perhaps a moment of frustration.  Everyone does it in their personal life as well as their work life.  As a manager this can be particularly challenging and sometimes you react or say something in a meeting, via slack, an issue or email during the heat of the moment.  In this section we are going to review the Power of the Pause and provide you with a few tips to help you take a moment and breathe before you respond. Below are terms people frequently use when they should use another term. \"GitLabber\" includes both the GitLab community and people who work at GitLab. When you want to refer specifically to people who work at GitLab, use \u201cGitLab team member\u201d instead. By definition, we are all international and global, regardless of where in the world we\u2019re located. International and rest of world are often incorrectly used to speak to non-US, so we don\u2019t use them to avoid confusion."
}]